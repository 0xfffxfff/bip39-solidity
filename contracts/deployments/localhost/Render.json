{
  "address": "0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "textColor",
          "type": "string"
        }
      ],
      "name": "_renderText",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "base64font",
          "type": "string"
        }
      ],
      "name": "renderSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "base64font",
          "type": "string"
        }
      ],
      "name": "renderSVGBase64",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "base64font",
          "type": "string"
        }
      ],
      "name": "renderSVGBase64static",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "base64font",
          "type": "string"
        }
      ],
      "name": "renderSVGstatic",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "base64font",
          "type": "string"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x813956dced87ac3aebb49f4eaa2ed607cb65dc0d56e0d7190e241d2d0e472d44",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE",
    "transactionIndex": 0,
    "gasUsed": "3643758",
    "logsBloom": "0x
    "blockHash": "0x97db3cd008bb16d3982d020ecb8e90761ff872eb71c80ca079073ade27f5427b",
    "transactionHash": "0x813956dced87ac3aebb49f4eaa2ed607cb65dc0d56e0d7190e241d2d0e472d44",
    "logs": [],
    "blockNumber": 18,
    "cumulativeGasUsed": "3643758",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "8c17e7c2717a10ab88794650c0e74a9b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"textColor\",\"type\":\"string\"}],\"name\":\"_renderText\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"base64font\",\"type\":\"string\"}],\"name\":\"renderSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"base64font\",\"type\":\"string\"}],\"name\":\"renderSVGBase64\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"base64font\",\"type\":\"string\"}],\"name\":\"renderSVGBase64static\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"base64font\",\"type\":\"string\"}],\"name\":\"renderSVGstatic\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"base64font\",\"type\":\"string\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/Render.sol\":\"Render\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363933363839303935303436\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/libraries/Background.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {SVG} from \\\"./SVG.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Background {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function render(\\n        string memory backgroundColor\\n    ) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"rect\\\",\\n                SVG.rectAttributes({\\n                    _width: \\\"100%\\\",\\n                    _height: \\\"100%\\\",\\n                    _fill: backgroundColor,\\n                    _attributes: \\\"\\\"\\n                })\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5f0c98eba8890f01c0c8dbddb311ed3f8012d92daedee16ea84db94c3bb83ea9\",\"license\":\"Unlicense\"},\"src/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    function encode(string memory _data) internal pure returns (string memory) {\\n        return encode(bytes(_data));\\n    }\\n\\n    function encode(bytes memory _data) internal pure returns (string memory) {\\n        if (_data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((_data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := _data\\n            let endPtr := add(dataPtr, mload(_data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(_data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x298c5050ef28c296db0e2f796e4c2747e8e014881517728e072fc15fdfc6c555\",\"license\":\"MIT\"},\"src/libraries/Effect.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {SVG} from \\\"./SVG.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Effect {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function vhsFilter(\\n        uint256 vhsLevel,\\n        uint256 distortionLevel,\\n        bool invert,\\n        bool animate\\n    ) internal pure returns (string memory) {\\n        string memory colorMatrix = invert\\n            ? \\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.35 0\\\"\\n            : \\\"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.35 0\\\";\\n        return\\n            string.concat(\\n                '<defs><filter id=\\\"vhs\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"616\\\" height=\\\"889\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                (\\n                    vhsLevel == 1 ? \\\"-6\\\" : vhsLevel == 2 ? \\\"-9\\\" : vhsLevel == 3\\n                        ? \\\"-10\\\"\\n                        : /*l4+*/ \\\"-12\\\"\\n                ),\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"textBlur_pass1\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                vhsLevel == 1 ? \\\"-3\\\" : vhsLevel == 2 ? \\\"-4.5\\\" : vhsLevel == 3\\n                    ? \\\"-5\\\"\\n                    : /*l4+*/ \\\"-6\\\",\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"textBlur_pass1\\\" result=\\\"textBlur_pass2\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                vhsLevel == 1 ? \\\"3\\\" : vhsLevel == 2 ? \\\"4.5\\\" : vhsLevel == 3\\n                    ? \\\"5\\\"\\n                    : /*l4+*/ \\\"6\\\",\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"textBlur_pass2\\\" result=\\\"textBlur_pass3\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                vhsLevel == 1 ? \\\"-6\\\" : vhsLevel == 2 ? \\\"-9\\\" : vhsLevel == 3\\n                    ? \\\"-10\\\"\\n                    : /*l4+*/ \\\"-12\\\",\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"textBlur_pass3\\\" result=\\\"textBlur_pass4\\\" /><feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"textBlur_pass4\\\" result=\\\"shape\\\" /><feGaussianBlur stdDeviation=\\\"',\\n                vhsLevel == 1 ? \\\"3.5\\\" : vhsLevel == 2 ? \\\"4\\\" : vhsLevel == 3\\n                    ? \\\"4.5\\\"\\n                    : /*l4+*/ \\\"5\\\",\\n                '\\\" result=\\\"textBlur_pass5\\\" />',\\n                '<feTurbulence baseFrequency=\\\".015\\\" type=\\\"fractalNoise\\\" />',\\n                '<feColorMatrix type=\\\"hueRotate\\\" values=\\\"0\\\">',\\n                (\\n                    animate\\n                        ? '<animate attributeName=\\\"values\\\" from=\\\"0\\\" to=\\\"360\\\" dur=\\\"16s\\\" repeatCount=\\\"indefinite\\\" />'\\n                        : \\\"\\\"\\n                ),\\n                \\\"</feColorMatrix>\\\",\\n                '<feDisplacementMap in=\\\"textBlur_pass5\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"B\\\" scale=\\\"',\\n                distortionLevel == 1 ? \\\"10\\\" : distortionLevel == 2\\n                    ? \\\"20\\\"\\n                    : \\\"22\\\",\\n                '\\\">',\\n                (\\n                    animate\\n                        ? (\\n                            string.concat(\\n                                '<animate attributeName=\\\"scale\\\" values=\\\"',\\n                                distortionLevel == 1\\n                                    ? \\\"10;20;15;25;15;20;10\\\"\\n                                    : distortionLevel == 2\\n                                    ? \\\"20;30;30;20\\\"\\n                                    : \\\"22:38:28:38:22\\\",\\n                                '\\\" dur=\\\"16s\\\" repeatCount=\\\"indefinite\\\" />'\\n                            )\\n                        )\\n                        : \\\"\\\"\\n                ),\\n                \\\"</feDisplacementMap></filter></defs>\\\"\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xe1cae91462baa5a9a8e82c06df3fac3073247eaa9e60ce167c32ab0a93024c94\",\"license\":\"Unlicense\"},\"src/libraries/Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Base64} from \\\"./Base64.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Metadata {\\n    string constant JSON_BASE64_HEADER = \\\"data:application/json;base64,\\\";\\n    string constant SVG_XML_BASE64_HEADER = \\\"data:image/svg+xml;base64,\\\";\\n\\n    function encodeMetadata(\\n        uint256 _tokenId,\\n        string memory _name,\\n        string memory _description,\\n        string memory _attributes,\\n        string memory _backgroundColor,\\n        string memory _svg,\\n        string memory _animation\\n    ) internal pure returns (string memory) {\\n        string memory metadata = string.concat(\\n            \\\"{\\\",\\n            Util.keyValue(\\\"tokenId\\\", Util.uint256ToString(_tokenId)),\\n            \\\",\\\",\\n            Util.keyValue(\\\"name\\\", _name),\\n            \\\",\\\",\\n            Util.keyValue(\\\"description\\\", _description),\\n            \\\",\\\",\\n            Util.keyValueNoQuotes(\\\"attributes\\\", _attributes),\\n            \\\",\\\",\\n            Util.keyValue(\\\"backgroundColor\\\", _backgroundColor),\\n            \\\",\\\",\\n            Util.keyValue(\\\"image\\\", _encodeSVG(_svg)),\\n            \\\",\\\",\\n            Util.keyValue(\\\"animation_url\\\", _encodeSVG(_animation)),\\n            \\\"}\\\"\\n        );\\n\\n        return _encodeJSON(metadata);\\n    }\\n\\n    /// @notice base64 encode json\\n    /// @param _json, stringified json\\n    /// @return string, bytes64 encoded json with prefix\\n    function _encodeJSON(\\n        string memory _json\\n    ) internal pure returns (string memory) {\\n        return string.concat(JSON_BASE64_HEADER, Base64.encode(_json));\\n    }\\n\\n    /// @notice base64 encode svg\\n    /// @param _svg, stringified json\\n    /// @return string, bytes64 encoded svg with prefix\\n    function _encodeSVG(\\n        string memory _svg\\n    ) internal pure returns (string memory) {\\n        return string.concat(SVG_XML_BASE64_HEADER, Base64.encode(bytes(_svg)));\\n    }\\n}\\n\",\"keccak256\":\"0xeffd26a54572b13e908c4ee3509887451b9741a11c49ab98462185eb802c827b\",\"license\":\"Unlicense\"},\"src/libraries/Render.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Metadata} from \\\"./Metadata.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\nimport {Traits} from \\\"./Traits.sol\\\";\\nimport {Background} from \\\"./Background.sol\\\";\\nimport {TextLine} from \\\"./TextLine.sol\\\";\\nimport {Traits} from \\\"./Traits.sol\\\";\\nimport {SVG} from \\\"./SVG.sol\\\";\\nimport {Effect} from \\\"./Effect.sol\\\";\\n\\nlibrary Render {\\n    string public constant description = \\\"Seed Poems\\\";\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                TOKENURI\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function tokenURI(\\n        uint256 _tokenId,\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        string memory wordString = words[0];\\n        for (uint i = 1; i < words.length; i++) {\\n            wordString = string.concat(wordString, \\\" \\\", words[i]);\\n        }\\n        return\\n            Metadata.encodeMetadata({\\n                _tokenId: _tokenId,\\n                _name: wordString,\\n                _description: wordString,\\n                _attributes: Traits.attributes(words, entropy),\\n                _backgroundColor: Traits.backgroundColor(words, entropy),\\n                _svg: _svg(words, entropy, base64font, false),\\n                _animation: _svg(words, entropy, base64font, true)\\n            });\\n    }\\n\\n    function renderSVG(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return _svg(words, entropy, base64font, true);\\n    }\\n\\n    function renderSVGBase64(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return Metadata._encodeSVG(_svg(words, entropy, base64font, true));\\n    }\\n\\n    function renderSVGstatic(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return _svg(words, entropy, base64font, false);\\n    }\\n\\n    function renderSVGBase64static(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return Metadata._encodeSVG(_svg(words, entropy, base64font, false));\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _svg(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font,\\n        bool animate\\n    ) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"svg\\\",\\n                SVG.svgAttributes(),\\n                string.concat(\\n                    \\\"<defs><style>\\\",\\n                    '@font-face {font-family: \\\"EBGI\\\";src: url(\\\"',\\n                    base64font,\\n                    '\\\");',\\n                    // \\\"text {text-transform: uppercase;\\\"\\n                    \\\"}</style>\\\",\\n                    Effect.vhsFilter(\\n                        words.length <= 3 ? 4 : words.length <= 6\\n                            ? 3\\n                            : words.length <= 9\\n                            ? 2\\n                            : 1,\\n                        Traits.distortionType(entropy),\\n                        keccak256(\\n                            abi.encodePacked(Traits.textColor(words, entropy))\\n                        ) == keccak256(abi.encodePacked(\\\"#000000\\\")),\\n                        animate\\n                    ),\\n                    \\\"</defs>\\\"\\n                ),\\n                Background.render(Traits.backgroundColor(words, entropy)),\\n                SVG.element(\\n                    \\\"g\\\",\\n                    string.concat(\\n                        SVG.filterAttribute(\\\"vhs\\\"),\\n                        ' transform-origin: 50% 50%; ',\\n                        'transform=\\\"rotate(',\\n                        Traits.textRotation(words, entropy),\\n                        ')\\\"'\\n                    ),\\n                    _renderText(\\n                        words,\\n                        entropy,\\n                        Traits.textColor(words, entropy)\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _renderText(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory textColor\\n    ) public pure returns (string memory) {\\n        uint256 wordCount = words.length;\\n        uint8 charsPerLine = 20;\\n        if (wordCount == 21) charsPerLine = 19;\\n        else if (wordCount == 18) charsPerLine = 18;\\n        else if (wordCount == 15) charsPerLine = 17;\\n        else if (wordCount == 12) charsPerLine = 16;\\n        else if (wordCount == 9) charsPerLine = 15;\\n        else if (wordCount == 6) charsPerLine = 12;\\n        else if (wordCount == 3) charsPerLine = 9;\\n        else if (wordCount != 24) revert(\\\"Invalid words per line\\\");\\n\\n        // the worst-case scenario is one word per line\\n        string[] memory tempLines = new string[](wordCount);\\n        string memory line;\\n        uint256 lineCount = 0;\\n\\n        for (uint256 i = 0; i < words.length; i++) {\\n            if (\\n                bytes(line).length != 0 &&\\n                bytes(line).length + bytes(words[i]).length + 1 > charsPerLine\\n            ) {\\n                tempLines[lineCount] = line;\\n                lineCount++;\\n                line = words[i];\\n            } else {\\n                if (bytes(line).length != 0) {\\n                    line = string(abi.encodePacked(line, \\\" \\\", words[i]));\\n                } else {\\n                    line = words[i];\\n                }\\n            }\\n\\n            if (i == words.length - 1) {\\n                tempLines[lineCount] = line;\\n            }\\n        }\\n\\n        string memory fontSize = \\\"125\\\";\\n        uint256 yDistance = 120;\\n        if (wordCount == 6) {\\n            fontSize = \\\"93\\\";\\n            yDistance = 93;\\n        } else if (wordCount == 9) {\\n            fontSize = \\\"75\\\";\\n            yDistance = 75;\\n        } else if (wordCount == 12) {\\n            fontSize = \\\"75\\\";\\n            yDistance = 75;\\n        } else if (wordCount == 15) {\\n            fontSize = \\\"65\\\";\\n            yDistance = 65;\\n        } else if (wordCount == 18) {\\n            fontSize = \\\"62\\\";\\n            yDistance = 62;\\n        } else if (wordCount == 21) {\\n            fontSize = \\\"57\\\";\\n            yDistance = 57;\\n        } else if (wordCount == 24) {\\n            fontSize = \\\"55\\\";\\n            yDistance = 55;\\n        }\\n\\n        string memory svgTexts;\\n        for (uint256 i = 0; i <= lineCount; i++) {\\n            svgTexts = string.concat(\\n                svgTexts,\\n                TextLine.render(\\n                    tempLines[i],\\n                    90,\\n                    (444 - (lineCount * yDistance) / 2) + (i * yDistance),\\n                    fontSize,\\n                    textColor\\n                )\\n            );\\n        }\\n\\n        return SVG.element(\\\"g\\\", \\\"\\\", svgTexts);\\n    }\\n}\\n\",\"keccak256\":\"0xbf7955267d90038e9b6ccf03e028df449e684bf1e9c80a7ea4b05d937d5e5fc2\",\"license\":\"Unlicense\"},\"src/libraries/SVG.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary SVG {\\n    /*//////////////////////////////////////////////////////////////\\n                                 ELEMENT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes\\n    ) internal pure returns (string memory) {\\n        return string.concat(\\\"<\\\", _type, \\\" \\\", _attributes, \\\"/>\\\");\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _children\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<\\\",\\n                _type,\\n                \\\" \\\",\\n                _attributes,\\n                \\\">\\\",\\n                _children,\\n                \\\"</\\\",\\n                _type,\\n                \\\">\\\"\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2\\n    ) internal pure returns (string memory) {\\n        return element(_type, _attributes, string.concat(_child1, _child2));\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(_child1, _child2, _child3)\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(_child1, _child2, _child3, _child4)\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(_child1, _child2, _child3, _child4, _child5)\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(\\n                    _child1,\\n                    _child2,\\n                    _child3,\\n                    _child4,\\n                    _child5,\\n                    _child6\\n                )\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6,\\n        string memory _child7\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(\\n                    _child1,\\n                    _child2,\\n                    _child3,\\n                    _child4,\\n                    _child5,\\n                    _child6,\\n                    _child7\\n                )\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6,\\n        string memory _child7,\\n        string memory _child8\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(\\n                    _child1,\\n                    _child2,\\n                    _child3,\\n                    _child4,\\n                    _child5,\\n                    _child6,\\n                    _child7,\\n                    _child8\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ATTRIBUTES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function svgAttributes() internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                'xmlns=\\\"http://www.w3.org/2000/svg\\\" '\\n                'xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" '\\n                'width=\\\"100%\\\" '\\n                'height=\\\"100%\\\" '\\n                'viewBox=\\\"0 0 616 889\\\" ',\\n                'preserveAspectRatio=\\\"xMidYMid meet\\\" ',\\n                'fill=\\\"none\\\" '\\n            );\\n    }\\n\\n    function textAttributes(\\n        string[2] memory _coords,\\n        string memory _fontSize,\\n        string memory _fontFamily,\\n        string memory _fill,\\n        string memory _attributes\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"x=\\\",\\n                Util.quote(_coords[0]),\\n                \\\"y=\\\",\\n                Util.quote(_coords[1]),\\n                \\\"font-size=\\\",\\n                Util.quote(string.concat(_fontSize, \\\"px\\\")),\\n                \\\"font-family=\\\",\\n                Util.quote(_fontFamily),\\n                \\\"fill=\\\",\\n                Util.quote(_fill),\\n                \\\" \\\",\\n                _attributes,\\n                \\\" \\\"\\n            );\\n    }\\n\\n    function rectAttributes(\\n        string memory _width,\\n        string memory _height,\\n        string memory _fill,\\n        string memory _attributes\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"width=\\\",\\n                Util.quote(_width),\\n                \\\"height=\\\",\\n                Util.quote(_height),\\n                \\\"fill=\\\",\\n                Util.quote(_fill),\\n                \\\" \\\",\\n                _attributes,\\n                \\\" \\\"\\n            );\\n    }\\n\\n    function filterAttribute(\\n        string memory _id\\n    ) internal pure returns (string memory) {\\n        return string.concat(\\\"filter=\\\", '\\\"', \\\"url(#\\\", _id, \\\")\\\", '\\\" ');\\n    }\\n}\\n\",\"keccak256\":\"0xec7f2f3d4425047a732b6dd274dc2e69b4e1f83837f27887efaa1a8cabe68487\",\"license\":\"Unlicense\"},\"src/libraries/TextLine.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\nimport {SVG} from \\\"./SVG.sol\\\";\\n\\nlibrary TextLine {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function render(\\n        string memory text,\\n        uint256 xOffset,\\n        uint256 yOffset,\\n        string memory fontSize,\\n        string memory textColor\\n    ) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"text\\\",\\n                SVG.textAttributes({\\n                    _fontSize: fontSize,\\n                    _fontFamily: \\\"EBGI, EB Garamond Italic, Garamond Italic, EB Garamond, Garamond, serif\\\",\\n                    _coords: [\\n                        Util.uint256ToString(xOffset),\\n                        Util.uint256ToString(yOffset)\\n                    ],\\n                    _fill: textColor,\\n                    _attributes: 'dy=\\\"0.4em\\\"' // offset text so yCoord aligns with top of text (magic number)\\n                }),\\n                text\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x939b7a08b6a2fbe0274017f33d8ebcafc88055acd0b1f5b5e7c1b7f091e1a190\",\"license\":\"Unlicense\"},\"src/libraries/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Traits {\\n\\n    function distortionTrait(\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        uint256 distortion = distortionType(entropy);\\n        return distortion == 1 ? \\\"Low\\\" : distortion == 2 ? \\\"Medium\\\" : \\\"High\\\";\\n    }\\n\\n    function distortionType(\\n        bytes memory entropy\\n    ) internal pure returns (uint256) {\\n        return (_rarity(entropy, \\\"distortion\\\") % 3) + 1; // 1-3\\n    }\\n\\n    function colorTrait(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string[3] memory color = colorType(words, entropy);\\n        return color[0];\\n    }\\n\\n    function colorType(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string[3] memory) {\\n        return [\\\"Void\\\", \\\"#F9F9F9\\\", \\\"#000000\\\"];\\n    }\\n\\n    function backgroundColor(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string[3] memory color = colorType(words, entropy);\\n        return color[1];\\n    }\\n\\n    function textColor(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string[3] memory color = colorType(words, entropy);\\n        return color[2];\\n    }\\n\\n    function textRotation(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        uint256 rotationSeed = _rarity(entropy, \\\"rotation\\\");\\n        bool isPositive = rotationSeed % 2 == 0;\\n        uint256 degrees = (rotationSeed / 10) % 6;\\n        uint256 float = (rotationSeed / 100) % 1000;\\n        return\\n            string.concat(\\n                isPositive ? \\\"\\\" : \\\"-\\\",\\n                Util.uint256ToString(degrees),\\n                \\\".\\\",\\n                Util.uint256ToString(float)\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 TRAITS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function attributes(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string memory result = \\\"[\\\";\\n        result = string.concat(\\n            result,\\n            _attribute(\\\"Words\\\", Util.uint256ToString(words.length))\\n        );\\n        return string.concat(result, \\\"]\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _attribute(\\n        string memory _traitType,\\n        string memory _value\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"{\\\",\\n                Util.keyValue(\\\"trait_type\\\", _traitType),\\n                \\\",\\\",\\n                Util.keyValue(\\\"value\\\", _value),\\n                \\\"}\\\"\\n            );\\n    }\\n\\n    function _rarity(\\n        bytes memory _seed,\\n        string memory _salt\\n    ) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(_seed, _salt)));\\n    }\\n}\\n\",\"keccak256\":\"0x8411284017562a60014a07926ae6da31c1870baec830bc526d05d5419a551068\",\"license\":\"Unlicense\"},\"src/libraries/Util.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nlibrary Util {\\n    error NumberHasTooManyDigits();\\n\\n    /// @notice wraps a string in quotes and adds a space after\\n    function quote(string memory value) internal pure returns (string memory) {\\n        return string.concat('\\\"', value, '\\\" ');\\n    }\\n\\n    function keyValue(\\n        string memory _key,\\n        string memory _value\\n    ) internal pure returns (string memory) {\\n        return string.concat('\\\"', _key, '\\\":\\\"', _value, '\\\"');\\n    }\\n\\n    function keyValueNoQuotes(\\n        string memory _key,\\n        string memory _value\\n    ) internal pure returns (string memory) {\\n        return string.concat('\\\"', _key, '\\\":', _value);\\n    }\\n\\n    /// @notice converts a tokenId to string and pads to _digits digits\\n    /// @dev tokenId must be less than 10**_digits\\n    /// @param _tokenId, uint256, the tokenId\\n    /// @param _digits, uint8, the number of digits to pad to\\n    /// @return result the resulting string\\n    function uint256ToString(\\n        uint256 _tokenId,\\n        uint8 _digits\\n    ) internal pure returns (string memory result) {\\n        uint256 max = 10 ** _digits;\\n        if (_tokenId >= max) revert NumberHasTooManyDigits();\\n        // add leading zeroes\\n        result = uint256ToString(_tokenId + max);\\n        assembly {\\n            // cut off one character\\n            result := add(result, 1)\\n            // store new length = _digits\\n            mstore(result, _digits)\\n        }\\n    }\\n\\n    /// @notice converts a uint256 to ascii representation, without leading zeroes\\n    /// @param _value, uint256, the value to convert\\n    /// @return result the resulting string\\n    function uint256ToString(\\n        uint256 _value\\n    ) internal pure returns (string memory result) {\\n        if (_value == 0) return \\\"0\\\";\\n\\n        assembly {\\n            // largest uint = 2^256-1 has 78 digits\\n            // reserve 110 = 78 + 32 bytes of data in memory\\n            // (first 32 are for string length)\\n\\n            // get 110 bytes of free memory\\n            result := add(mload(0x40), 110)\\n            mstore(0x40, result)\\n\\n            // keep track of digits\\n            let digits := 0\\n\\n            for {\\n\\n            } gt(_value, 0) {\\n\\n            } {\\n                // increment digits\\n                digits := add(digits, 1)\\n                // go back one byte\\n                result := sub(result, 1)\\n                // compute ascii char\\n                let c := add(mod(_value, 10), 48)\\n                // store byte\\n                mstore8(result, c)\\n                // advance to next digit\\n                _value := div(_value, 10)\\n            }\\n            // go back 32 bytes\\n            result := sub(result, 32)\\n            // store the length\\n            mstore(result, digits)\\n        }\\n    }\\n\\n    function bytes1ToString(\\n        bytes1 _value\\n    ) internal pure returns (string memory) {\\n        return uint256ToString(uint8(_value));\\n    }\\n\\n    function uint8ToString(uint8 _value) internal pure returns (string memory) {\\n        return uint256ToString(_value);\\n    }\\n\\n    /// @notice will revert in any characters are not in [0-9]\\n    function stringToUint256(\\n        string memory _value\\n    ) internal pure returns (uint256 result) {\\n        // 0-9 are 48-57\\n\\n        bytes memory value = bytes(_value);\\n        if (value.length == 0) return 0;\\n        uint256 multiplier = 10 ** (value.length - 1);\\n        uint256 i;\\n        while (multiplier != 0) {\\n            result += uint256((uint8(value[i]) - 48)) * multiplier;\\n            unchecked {\\n                multiplier /= 10;\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function bytes1ToHex(bytes1 _value) internal pure returns (string memory) {\\n        bytes memory result = new bytes(2);\\n        uint8 x = uint8(_value);\\n\\n        result[0] = getHexChar(x >> 4);\\n        result[1] = getHexChar(x % 16);\\n\\n        return string(result);\\n    }\\n\\n    function bytes32ToBytes(bytes32 x) internal pure returns (bytes memory) {\\n        bytes memory bytesString = new bytes(32);\\n        for (uint i = 0; i < 32; i++) {\\n            if (x[i] == 0) {\\n                bytesString[i] = bytes1(0x20);\\n            } else {\\n                bytesString[i] = x[i];\\n            }\\n        }\\n        return abi.encodePacked(bytesString);\\n    }\\n\\n    function bytes32ToString(bytes32 x) internal pure returns (string memory) {\\n        return string(bytes32ToBytes(x));\\n    }\\n\\n    function getHexChar(uint8 _value) internal pure returns (bytes1) {\\n        if (_value < 10) {\\n            return bytes1(_value + 48);\\n        }\\n        _value -= 10;\\n        return bytes1(_value + 97);\\n    }\\n\\n    function stringToBytes1(\\n        string memory _value\\n    ) internal pure returns (bytes1 result) {\\n        return bytes1(uint8(stringToUint256(_value)));\\n    }\\n\\n    function getRGBString(\\n        bytes memory _palette,\\n        uint256 _pos\\n    ) internal pure returns (string memory result) {\\n        return\\n            string.concat(\\n                \\\"#\\\",\\n                Util.bytes1ToHex(_palette[3 * _pos]),\\n                Util.bytes1ToHex(_palette[3 * _pos + 1]),\\n                Util.bytes1ToHex(_palette[3 * _pos + 2])\\n            );\\n    }\\n\\n    function getRGBString(\\n        bytes3 _color\\n    ) internal pure returns (string memory result) {\\n        return\\n            string.concat(\\n                \\\"#\\\",\\n                Util.bytes1ToHex(_color[0]),\\n                Util.bytes1ToHex(_color[1]),\\n                Util.bytes1ToHex(_color[2])\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x2504c3f999b200d7883c00c73bae04d5fcc305900e015dec580e6ecc50e7a216\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}