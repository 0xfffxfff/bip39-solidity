{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "NumberHasTooManyDigits",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "textColor",
          "type": "string"
        }
      ],
      "name": "_renderText",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "base64font",
          "type": "string"
        }
      ],
      "name": "renderSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "base64font",
          "type": "string"
        }
      ],
      "name": "renderSVGBase64",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "base64font",
          "type": "string"
        }
      ],
      "name": "renderSVGBase64static",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "base64font",
          "type": "string"
        }
      ],
      "name": "renderSVGstatic",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "base64font",
          "type": "string"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x070950332d5a9bddafaf2cdbf74c39dc940b64fb24d4eb09a973663711dcf218",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3726775",
    "logsBloom": "0x
    "blockHash": "0x1073c6510114096ad977b43abe9d1e742fcd6de4671b568c775a6d2728298952",
    "transactionHash": "0x070950332d5a9bddafaf2cdbf74c39dc940b64fb24d4eb09a973663711dcf218",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "3726775",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f8672c3ec2ca825207aabaa4ef255dff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NumberHasTooManyDigits\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"textColor\",\"type\":\"string\"}],\"name\":\"_renderText\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"base64font\",\"type\":\"string\"}],\"name\":\"renderSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"base64font\",\"type\":\"string\"}],\"name\":\"renderSVGBase64\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"base64font\",\"type\":\"string\"}],\"name\":\"renderSVGBase64static\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"base64font\",\"type\":\"string\"}],\"name\":\"renderSVGstatic\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"base64font\",\"type\":\"string\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Adopted from Bibos (0xf528e3381372c43f5e8a55b3e6c252e32f1a26e4)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/Render.sol\":\"Render\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363839343135303932363536\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/libraries/Background.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {SVG} from \\\"./SVG.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Background {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function render(\\n        string memory backgroundColor\\n    ) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"rect\\\",\\n                SVG.rectAttributes({\\n                    _width: \\\"100%\\\",\\n                    _height: \\\"100%\\\",\\n                    _fill: backgroundColor,\\n                    _attributes: \\\"\\\"\\n                })\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5f0c98eba8890f01c0c8dbddb311ed3f8012d92daedee16ea84db94c3bb83ea9\",\"license\":\"Unlicense\"},\"src/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    function encode(string memory _data) internal pure returns (string memory) {\\n        return encode(bytes(_data));\\n    }\\n\\n    function encode(bytes memory _data) internal pure returns (string memory) {\\n        if (_data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((_data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := _data\\n            let endPtr := add(dataPtr, mload(_data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(_data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x298c5050ef28c296db0e2f796e4c2747e8e014881517728e072fc15fdfc6c555\",\"license\":\"MIT\"},\"src/libraries/Effect.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {SVG} from \\\"./SVG.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Effect {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function vhsFilter(\\n        uint256 vhsLevel,\\n        uint256 distortionLevel,\\n        bool invert,\\n        bool animate\\n    ) internal pure returns (string memory) {\\n        string memory colorMatrix = invert\\n            ? \\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.35 0\\\"\\n            : \\\"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.35 0\\\";\\n        return\\n            string.concat(\\n                '<defs><filter id=\\\"vhs\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"616\\\" height=\\\"889\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                (\\n                    vhsLevel == 1 ? \\\"-6\\\" : vhsLevel == 2 ? \\\"-9\\\" : vhsLevel == 3\\n                        ? \\\"-10\\\"\\n                        : /*l4+*/ \\\"-12\\\"\\n                ),\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"textBlur_pass1\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                vhsLevel == 1 ? \\\"-3\\\" : vhsLevel == 2 ? \\\"-4.5\\\" : vhsLevel == 3\\n                    ? \\\"-5\\\"\\n                    : /*l4+*/ \\\"-6\\\",\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"textBlur_pass1\\\" result=\\\"textBlur_pass2\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                vhsLevel == 1 ? \\\"3\\\" : vhsLevel == 2 ? \\\"4.5\\\" : vhsLevel == 3\\n                    ? \\\"5\\\"\\n                    : /*l4+*/ \\\"6\\\",\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"textBlur_pass2\\\" result=\\\"textBlur_pass3\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                vhsLevel == 1 ? \\\"-6\\\" : vhsLevel == 2 ? \\\"-9\\\" : vhsLevel == 3\\n                    ? \\\"-10\\\"\\n                    : /*l4+*/ \\\"-12\\\",\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"textBlur_pass3\\\" result=\\\"textBlur_pass4\\\" /><feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"textBlur_pass4\\\" result=\\\"shape\\\" /><feGaussianBlur stdDeviation=\\\"',\\n                vhsLevel == 1 ? \\\"3.5\\\" : vhsLevel == 2 ? \\\"4\\\" : vhsLevel == 3\\n                    ? \\\"4.5\\\"\\n                    : /*l4+*/ \\\"5\\\",\\n                '\\\" result=\\\"textBlur_pass5\\\" />',\\n                '<feTurbulence baseFrequency=\\\".015\\\" type=\\\"fractalNoise\\\" />',\\n                '<feColorMatrix type=\\\"hueRotate\\\" values=\\\"0\\\">',\\n                (\\n                    animate\\n                        ? '<animate attributeName=\\\"values\\\" from=\\\"0\\\" to=\\\"360\\\" dur=\\\"16s\\\" repeatCount=\\\"indefinite\\\" />'\\n                        : \\\"\\\"\\n                ),\\n                \\\"</feColorMatrix>\\\",\\n                '<feDisplacementMap in=\\\"textBlur_pass5\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"B\\\" scale=\\\"',\\n                distortionLevel == 1 ? \\\"10\\\" : distortionLevel == 2\\n                    ? \\\"20\\\"\\n                    : \\\"22\\\",\\n                '\\\">',\\n                (\\n                    animate\\n                        ? (\\n                            string.concat(\\n                                '<animate attributeName=\\\"scale\\\" values=\\\"',\\n                                distortionLevel == 1\\n                                    ? \\\"10;20;15;25;15;20;10\\\"\\n                                    : distortionLevel == 2\\n                                    ? \\\"20;30;30;20\\\"\\n                                    : \\\"22:38:28:38:22\\\",\\n                                '\\\" dur=\\\"16s\\\" repeatCount=\\\"indefinite\\\" />'\\n                            )\\n                        )\\n                        : \\\"\\\"\\n                ),\\n                \\\"</feDisplacementMap></filter></defs>\\\"\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xe1cae91462baa5a9a8e82c06df3fac3073247eaa9e60ce167c32ab0a93024c94\",\"license\":\"Unlicense\"},\"src/libraries/Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Base64} from \\\"./Base64.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Metadata {\\n    string constant JSON_BASE64_HEADER = \\\"data:application/json;base64,\\\";\\n    string constant SVG_XML_BASE64_HEADER = \\\"data:image/svg+xml;base64,\\\";\\n\\n    function encodeMetadata(\\n        uint256 _tokenId,\\n        string memory _name,\\n        string memory _description,\\n        string memory _attributes,\\n        string memory _backgroundColor,\\n        string memory _svg,\\n        string memory _animation\\n    ) internal pure returns (string memory) {\\n        string memory metadata = string.concat(\\n            \\\"{\\\",\\n            Util.keyValue(\\\"tokenId\\\", Util.uint256ToString(_tokenId)),\\n            \\\",\\\",\\n            Util.keyValue(\\\"name\\\", _name),\\n            \\\",\\\",\\n            Util.keyValue(\\\"description\\\", _description),\\n            \\\",\\\",\\n            Util.keyValueNoQuotes(\\\"attributes\\\", _attributes),\\n            \\\",\\\",\\n            Util.keyValue(\\\"backgroundColor\\\", _backgroundColor),\\n            \\\",\\\",\\n            Util.keyValue(\\\"image\\\", _encodeSVG(_svg)),\\n            \\\",\\\",\\n            Util.keyValue(\\\"animation_url\\\", _encodeSVG(_animation)),\\n            \\\"}\\\"\\n        );\\n\\n        return _encodeJSON(metadata);\\n    }\\n\\n    /// @notice base64 encode json\\n    /// @param _json, stringified json\\n    /// @return string, bytes64 encoded json with prefix\\n    function _encodeJSON(\\n        string memory _json\\n    ) internal pure returns (string memory) {\\n        return string.concat(JSON_BASE64_HEADER, Base64.encode(_json));\\n    }\\n\\n    /// @notice base64 encode svg\\n    /// @param _svg, stringified json\\n    /// @return string, bytes64 encoded svg with prefix\\n    function _encodeSVG(\\n        string memory _svg\\n    ) internal pure returns (string memory) {\\n        return string.concat(SVG_XML_BASE64_HEADER, Base64.encode(bytes(_svg)));\\n    }\\n}\\n\",\"keccak256\":\"0xeffd26a54572b13e908c4ee3509887451b9741a11c49ab98462185eb802c827b\",\"license\":\"Unlicense\"},\"src/libraries/Render.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Metadata} from \\\"./Metadata.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\nimport {Traits} from \\\"./Traits.sol\\\";\\nimport {Background} from \\\"./Background.sol\\\";\\nimport {TextLine} from \\\"./TextLine.sol\\\";\\nimport {Traits} from \\\"./Traits.sol\\\";\\nimport {SVG} from \\\"./SVG.sol\\\";\\nimport {Effect} from \\\"./Effect.sol\\\";\\n\\n/// @notice Adopted from Bibos (0xf528e3381372c43f5e8a55b3e6c252e32f1a26e4)\\nlibrary Render {\\n    string public constant description = \\\"Seed Poems\\\";\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                TOKENURI\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function tokenURI(\\n        uint256 _tokenId,\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        string memory wordsStr = words[0];\\n        for (uint i = 1; i < words.length; i++) {\\n            wordsStr = string(abi.encodePacked(wordsStr, \\\" \\\", words[i]));\\n        }\\n        return\\n            Metadata.encodeMetadata({\\n                _tokenId: _tokenId,\\n                _name: _name(_tokenId),\\n                _description: wordsStr,\\n                _attributes: Traits.attributes(words, entropy),\\n                _backgroundColor: Traits.backgroundColor(words, entropy),\\n                _svg: _svg(words, entropy, base64font, false),\\n                _animation: _svg(words, entropy, base64font, true)\\n            });\\n    }\\n\\n    function renderSVG(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return _svg(words, entropy, base64font, true);\\n    }\\n\\n    function renderSVGBase64(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return Metadata._encodeSVG(_svg(words, entropy, base64font, true));\\n    }\\n\\n    function renderSVGstatic(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return _svg(words, entropy, base64font, false);\\n    }\\n\\n    function renderSVGBase64static(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return Metadata._encodeSVG(_svg(words, entropy, base64font, false));\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _svg(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font,\\n        bool animate\\n    ) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"svg\\\",\\n                SVG.svgAttributes(),\\n                string.concat(\\n                    \\\"<defs><style>\\\",\\n                    '@font-face {font-family: \\\"EBGI\\\";src: url(\\\"',\\n                    base64font,\\n                    '\\\");',\\n                    // \\\"text {text-transform: uppercase;\\\"\\n                    \\\"}</style>\\\",\\n                    Effect.vhsFilter(\\n                        words.length <= 3 ? 4 : words.length <= 6\\n                            ? 3\\n                            : words.length <= 9\\n                            ? 2\\n                            : 1,\\n                        Traits.distortionType(entropy),\\n                        keccak256(\\n                            abi.encodePacked(Traits.textColor(words, entropy))\\n                        ) == keccak256(abi.encodePacked(\\\"#000000\\\")),\\n                        animate\\n                    ),\\n                    \\\"</defs>\\\"\\n                ),\\n                Background.render(Traits.backgroundColor(words, entropy)),\\n                SVG.element(\\n                    \\\"g\\\",\\n                    string.concat(\\n                        SVG.filterAttribute(\\\"vhs\\\"),\\n                        // ' style=\\\"mix-blend-mode:exclusion\\\" ',\\n                        \\\" \\\",\\n                        'transform=\\\"rotate(',\\n                        Traits.textRotation(words, entropy),\\n                        ')\\\"'\\n                    ),\\n                    _renderText(\\n                        words,\\n                        entropy,\\n                        Traits.textColor(words, entropy)\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _renderText(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory textColor\\n    ) public pure returns (string memory) {\\n        uint256 wordCount = words.length;\\n        uint8 charsPerLine = 20;\\n        if (wordCount == 21) charsPerLine = 19;\\n        else if (wordCount == 18) charsPerLine = 18;\\n        else if (wordCount == 15) charsPerLine = 17;\\n        else if (wordCount == 12) charsPerLine = 16;\\n        else if (wordCount == 9) charsPerLine = 15;\\n        else if (wordCount == 6) charsPerLine = 12;\\n        else if (wordCount == 3) charsPerLine = 9;\\n        else if (wordCount != 24) revert(\\\"Invalid words per line\\\");\\n\\n        string[] memory tempLines = new string[](wordCount); // worst-case scenario, one word per line\\n        string memory line;\\n        uint256 lineCount = 0;\\n\\n        for (uint256 i = 0; i < words.length; i++) {\\n            if (\\n                bytes(line).length != 0 &&\\n                bytes(line).length + bytes(words[i]).length + 1 > charsPerLine\\n            ) {\\n                tempLines[lineCount] = line;\\n                lineCount++;\\n                line = words[i];\\n            } else {\\n                if (bytes(line).length != 0) {\\n                    line = string(abi.encodePacked(line, \\\" \\\", words[i]));\\n                } else {\\n                    line = words[i];\\n                }\\n            }\\n\\n            if (i == words.length - 1) {\\n                tempLines[lineCount] = line;\\n            }\\n        }\\n\\n        string memory fontSize = \\\"125\\\";\\n        uint256 yDistance = 120;\\n        if (wordCount == 6) {\\n            fontSize = \\\"93\\\";\\n            yDistance = 93;\\n        } else if (wordCount == 9) {\\n            fontSize = \\\"75\\\";\\n            yDistance = 75;\\n        } else if (wordCount == 12) {\\n            fontSize = \\\"75\\\";\\n            yDistance = 75;\\n        } else if (wordCount == 15) {\\n            fontSize = \\\"65\\\";\\n            yDistance = 65;\\n        } else if (wordCount == 18) {\\n            fontSize = \\\"62\\\";\\n            yDistance = 62;\\n        } else if (wordCount == 21) {\\n            fontSize = \\\"57\\\";\\n            yDistance = 57;\\n        } else if (wordCount == 24) {\\n            fontSize = \\\"55\\\";\\n            yDistance = 55;\\n        }\\n\\n        uint256 rotationSeed = Traits._rarity(entropy, \\\"rotation\\\");\\n        bool isPositive = rotationSeed % 2 == 0;\\n        uint256 degrees = (rotationSeed / 10) % 6;\\n        bytes memory svgTexts;\\n        for (uint256 i = 0; i <= lineCount; i++) {\\n            svgTexts = abi.encodePacked(\\n                svgTexts,\\n                TextLine.render(\\n                    tempLines[i],\\n                    (\\n                        isPositive\\n                            ? 90 + degrees * (words.length > 12 ? 1 : 2)\\n                            : 90 - degrees * (words.length > 12 ? 1 : 2)\\n                    ),\\n                    (444 - (lineCount * yDistance) / 2) + (i * yDistance),\\n                    fontSize,\\n                    textColor\\n                )\\n            );\\n        }\\n\\n        return SVG.element(\\\"g\\\", \\\"\\\", string(svgTexts));\\n    }\\n\\n    function _name(uint256 _tokenId) internal pure returns (string memory) {\\n        return\\n            string.concat(\\\"Mnemonic Poem \\\", Util.uint256ToString(_tokenId, 3));\\n    }\\n}\\n\",\"keccak256\":\"0xb403a2c8c37ba9b2d9b9276fafd6e81209d9d7802a50623ea9a99c232d2e6cf3\",\"license\":\"Unlicense\"},\"src/libraries/SVG.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary SVG {\\n    /*//////////////////////////////////////////////////////////////\\n                                 ELEMENT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes\\n    ) internal pure returns (string memory) {\\n        return string.concat(\\\"<\\\", _type, \\\" \\\", _attributes, \\\"/>\\\");\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _children\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<\\\",\\n                _type,\\n                \\\" \\\",\\n                _attributes,\\n                \\\">\\\",\\n                _children,\\n                \\\"</\\\",\\n                _type,\\n                \\\">\\\"\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2\\n    ) internal pure returns (string memory) {\\n        return element(_type, _attributes, string.concat(_child1, _child2));\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(_child1, _child2, _child3)\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(_child1, _child2, _child3, _child4)\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(_child1, _child2, _child3, _child4, _child5)\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(\\n                    _child1,\\n                    _child2,\\n                    _child3,\\n                    _child4,\\n                    _child5,\\n                    _child6\\n                )\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6,\\n        string memory _child7\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(\\n                    _child1,\\n                    _child2,\\n                    _child3,\\n                    _child4,\\n                    _child5,\\n                    _child6,\\n                    _child7\\n                )\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6,\\n        string memory _child7,\\n        string memory _child8\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(\\n                    _child1,\\n                    _child2,\\n                    _child3,\\n                    _child4,\\n                    _child5,\\n                    _child6,\\n                    _child7,\\n                    _child8\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ATTRIBUTES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function svgAttributes() internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                'xmlns=\\\"http://www.w3.org/2000/svg\\\" '\\n                'xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" '\\n                'width=\\\"100%\\\" '\\n                'height=\\\"100%\\\" '\\n                'viewBox=\\\"0 0 616 889\\\" ',\\n                'preserveAspectRatio=\\\"xMidYMid meet\\\" ',\\n                'fill=\\\"none\\\" '\\n            );\\n    }\\n\\n    function textAttributes(\\n        string[2] memory _coords,\\n        string memory _fontSize,\\n        string memory _fontFamily,\\n        string memory _fill,\\n        string memory _attributes\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"x=\\\",\\n                Util.quote(_coords[0]),\\n                \\\"y=\\\",\\n                Util.quote(_coords[1]),\\n                \\\"font-size=\\\",\\n                Util.quote(string.concat(_fontSize, \\\"px\\\")),\\n                \\\"font-family=\\\",\\n                Util.quote(_fontFamily),\\n                \\\"fill=\\\",\\n                Util.quote(_fill),\\n                \\\" \\\",\\n                _attributes,\\n                \\\" \\\"\\n            );\\n    }\\n\\n    function rectAttributes(\\n        string memory _width,\\n        string memory _height,\\n        string memory _fill,\\n        string memory _attributes\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"width=\\\",\\n                Util.quote(_width),\\n                \\\"height=\\\",\\n                Util.quote(_height),\\n                \\\"fill=\\\",\\n                Util.quote(_fill),\\n                \\\" \\\",\\n                _attributes,\\n                \\\" \\\"\\n            );\\n    }\\n\\n    function filterAttribute(\\n        string memory _id\\n    ) internal pure returns (string memory) {\\n        return string.concat(\\\"filter=\\\", '\\\"', \\\"url(#\\\", _id, \\\")\\\", '\\\" ');\\n    }\\n}\\n\",\"keccak256\":\"0xec7f2f3d4425047a732b6dd274dc2e69b4e1f83837f27887efaa1a8cabe68487\",\"license\":\"Unlicense\"},\"src/libraries/TextLine.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\nimport {SVG} from \\\"./SVG.sol\\\";\\n\\nlibrary TextLine {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function render(\\n        string memory text,\\n        uint256 xOffset,\\n        uint256 yOffset,\\n        string memory fontSize,\\n        string memory textColor\\n    ) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"text\\\",\\n                SVG.textAttributes({\\n                    _fontSize: fontSize,\\n                    _fontFamily: \\\"EBGI, EB Garamond Italic, Garamond Italic, EB Garamond, Garamond, serif\\\",\\n                    _coords: [\\n                        Util.uint256ToString(xOffset),\\n                        Util.uint256ToString(yOffset)\\n                    ],\\n                    _fill: textColor,\\n                    _attributes: 'dy=\\\"0.4em\\\"' // offset text so yCoord aligns with top of text (magic number)\\n                }),\\n                text\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x939b7a08b6a2fbe0274017f33d8ebcafc88055acd0b1f5b5e7c1b7f091e1a190\",\"license\":\"Unlicense\"},\"src/libraries/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Traits {\\n    function distortionTrait(\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        uint256 distortion = distortionType(entropy);\\n        distortion == 1 ? \\\"Low\\\" : distortion == 2 ? \\\"Med\\\" : \\\"High\\\";\\n    }\\n\\n    function distortionType(\\n        bytes memory entropy\\n    ) internal pure returns (uint256) {\\n        return (_rarity(entropy, \\\"distortion\\\") % 3) + 1; // 1-3\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 Colors\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function colorTrait(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string[3] memory color = colorType(words, entropy);\\n        return color[0];\\n    }\\n\\n    function colorType(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string[3] memory) {\\n        uint256 colorRarity = _rarity(entropy, \\\"color\\\") % 78;\\n        // if (colorRarity < 72) return [\\\"Inverse\\\", \\\"#000000\\\", \\\"#FFFFFF\\\"];\\n        return [\\\"Void\\\", \\\"#F9F9F9\\\", \\\"#000000\\\"];\\n    }\\n\\n    // function colorType(\\n    //     string[] memory words,\\n    //     bytes memory entropy\\n    // ) internal pure returns (string[3] memory) {\\n    //     uint256 colorRarity = _rarity(entropy, \\\"color\\\") % 100;\\n    //     if (colorRarity < 4) return [\\\"Inverse\\\", \\\"#FFFFFF\\\", \\\"#000000\\\"];\\n    //     if (colorRarity < 8) return [\\\"Sky\\\", \\\"#CBF2FE\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 12) return [\\\"Rose\\\", \\\"#F4D9EE\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 16) return [\\\"Blue\\\", \\\"#0000A6\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 20) return [\\\"Blue\\\", \\\"#112748\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 24) return [\\\"Red\\\", \\\"#BC1818\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 28) return [\\\"Sand\\\", \\\"#E1D8C9\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 32) return [\\\"Gray\\\", \\\"#E0E0E0\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 36) return [\\\"Feather\\\", \\\"#A4AFC0\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 40) return [\\\"Charcoal\\\", \\\"#36414F\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 44) return [\\\"Mint\\\", \\\"#D9EED3\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 48) return [\\\"Purple\\\", \\\"#5A00CD\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 52) return [\\\"Yellow\\\", \\\"#FAC300\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 56) return [\\\"Red\\\", \\\"#BC1818\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 60) return [\\\"Brown\\\", \\\"#402F2F\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 64) return [\\\"Orange\\\", \\\"#FF9C54\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 68) return [\\\"Green\\\", \\\"#172E20\\\", \\\"#FFFFFF\\\"];\\n    //     return [\\\"Void\\\", \\\"#111111\\\", \\\"#FFFFFF\\\"];\\n    // }\\n\\n    // function colorType(\\n    //     string[] memory words,\\n    //     bytes memory entropy\\n    // ) internal pure returns (string[3] memory) {\\n    //     uint256 colorRarity = _rarity(entropy, \\\"color\\\") % 100;\\n    //     if (colorRarity < 2) return [\\\"Inverse\\\", \\\"#FFFFFF\\\", \\\"#000000\\\"];\\n    //     if (colorRarity < 5) return [\\\"Sky\\\", \\\"#CBF2FE\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 8) return [\\\"Rose\\\", \\\"#F4D9EE\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 11) return [\\\"Blue\\\", \\\"#0000A6\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 14) return [\\\"Red\\\", \\\"#BC1818\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 17) return [\\\"Sand\\\", \\\"#E1D8C9\\\", \\\"#FFFFFF\\\"];\\n    //     return [\\\"Void\\\", \\\"#111111\\\", \\\"#FFFFFF\\\"];\\n    // }\\n\\n    // function colorType(\\n    //     string[] memory words,\\n    //     bytes memory entropy\\n    // ) internal pure returns (string[3] memory) {\\n    //     uint256 colorRarity = _rarity(entropy, \\\"color\\\") % 79;\\n    //     if (colorRarity < 1) return [\\\"Inverse\\\", \\\"#FFFFFF\\\", \\\"#000000\\\"];\\n    //     else if (colorRarity < 6) return [\\\"Sky\\\", \\\"#000000\\\", \\\"#CBF2FE\\\"];\\n    //     else if (colorRarity < 11) return [\\\"Rose\\\", \\\"#000000\\\", \\\"#F4D9EE\\\"];\\n    //     else if (colorRarity < 16) return [\\\"Blue\\\", \\\"#000000\\\", \\\"#0000A6\\\"];\\n    //     else if (colorRarity < 21) return [\\\"Red\\\", \\\"#000000\\\", \\\"#BC1818\\\"];\\n    //     else if (colorRarity < 26) return [\\\"Sand\\\", \\\"#000000\\\", \\\"#E1D8C9\\\"];\\n    //     // else if (colorRarity < 13) return [\\\"Pink\\\", \\\"#F89EE4\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 16) return [\\\"Yellow\\\", \\\"#FFD600\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     // else if (colorRarity < 55) return [\\\"Brown\\\", \\\"#132540\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 60) return [\\\"Beige\\\", \\\"#E0E0E0\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 75) return [\\\"Green\\\", \\\"#172E20\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else return [\\\"Void\\\", \\\"#000000\\\", \\\"#FFFFFF\\\"];\\n    // }\\n\\n    // function colorType(\\n    //     string[] memory words,\\n    //     bytes memory entropy\\n    // ) internal pure returns (string[3] memory) {\\n    //     uint256 colorRarity = _rarity(entropy, \\\"color\\\") % 79;\\n    //     if (colorRarity < 1) return [\\\"White\\\", \\\"#FFFFFF\\\", \\\"#000000\\\"];\\n    //     else if (colorRarity < 6) return [\\\"Sky\\\", \\\"#CBF2FE\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 11) return [\\\"Rose\\\", \\\"#F4D9EE\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 16) return [\\\"Blue\\\", \\\"#0000A6\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 21) return [\\\"Red\\\", \\\"#BC1818\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 26) return [\\\"Sand\\\", \\\"#E1D8C9\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 13) return [\\\"Pink\\\", \\\"#F89EE4\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 16) return [\\\"Yellow\\\", \\\"#FFD600\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     // else if (colorRarity < 55) return [\\\"Brown\\\", \\\"#132540\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 60) return [\\\"Beige\\\", \\\"#E0E0E0\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 75) return [\\\"Green\\\", \\\"#172E20\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else return [\\\"Void\\\", \\\"#000000\\\", \\\"#FFFFFF\\\"];\\n    // }\\n\\n    // function colorType(\\n    //     string[] memory words,\\n    //     bytes memory entropy\\n    // ) internal pure returns (string[3] memory) {\\n    //     uint256 colorRarity = _rarity(entropy, \\\"color\\\") % 79;\\n    //     if (colorRarity < 1) return [\\\"Orange\\\", \\\"#ffff\\\", \\\"#000\\\"];\\n    //     else if (colorRarity < 5) return [\\\"Gray\\\", \\\"#D3CFBD\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 10) return [\\\"Blue\\\", \\\"#0007B7\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 15) return [\\\"Orange\\\", \\\"#FF9C54\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 10) return [\\\"Charcoal\\\", \\\"#36414F\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 13) return [\\\"Pink\\\", \\\"#F89EE4\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 16) return [\\\"Yellow\\\", \\\"#FFD600\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     // else if (colorRarity < 55) return [\\\"Brown\\\", \\\"#132540\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 60) return [\\\"Beige\\\", \\\"#E0E0E0\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 75) return [\\\"Green\\\", \\\"#172E20\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else return [\\\"Void\\\", \\\"#000000\\\", \\\"#FFFFFF\\\"];\\n    // }\\n\\n    // function colorType(\\n    //     string[] memory words,\\n    //     bytes memory entropy\\n    // ) internal pure returns (string[3] memory) {\\n    //     uint256 colorRarity = _rarity(entropy, \\\"color\\\") % 79;\\n    //     if (colorRarity < 5) return [\\\"Blue\\\", \\\"#0007B7\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 10) return [\\\"Gray\\\", \\\"#E0E0E0\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else if (colorRarity < 15) return [\\\"Petrol\\\", \\\"#00FF19\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else if (colorRarity < 20) return [\\\"Charcoal\\\", \\\"#36414F\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 25) return [\\\"Mint\\\", \\\"#ECFFB8\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else if (colorRarity < 30) return [\\\"Marine\\\", \\\"#74FFE6\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else if (colorRarity < 35) return [\\\"Purple\\\", \\\"#5A00CD\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 40) return [\\\"Pink\\\", \\\"#F89EE4\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 45) return [\\\"Yellow\\\", \\\"#FFD600\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else if (colorRarity < 50) return [\\\"Red\\\", \\\"#E81C10\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 55) return [\\\"Brown\\\", \\\"#402F2F\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 60) return [\\\"Beige\\\", \\\"#D3CFBD\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 65) return [\\\"Sky\\\", \\\"#81E1FF\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 70) return [\\\"Orange\\\", \\\"#FF9C54\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 75) return [\\\"Green\\\", \\\"#254A2E\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 77) return [\\\"White\\\", \\\"#FFFFFF\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else return [\\\"Void\\\", \\\"#000000\\\", \\\"#FFFFFF\\\"];\\n    // }\\n\\n    function backgroundColor(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string[3] memory color = colorType(words, entropy);\\n        return color[1];\\n    }\\n\\n    function textColor(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string[3] memory color = colorType(words, entropy);\\n        return color[2];\\n    }\\n\\n    function textRotation(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        uint256 rotationSeed = _rarity(entropy, \\\"rotation\\\");\\n        bool isPositive = rotationSeed % 2 == 0;\\n        uint256 degrees = (rotationSeed / 10) % 6;\\n        uint256 float = (rotationSeed / 100) % 1000;\\n        return\\n            string.concat(\\n                isPositive ? \\\"\\\" : \\\"-\\\",\\n                Util.uint256ToString(degrees),\\n                \\\".\\\",\\n                Util.uint256ToString(float)\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 TRAITS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function attributes(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string memory result = \\\"[\\\";\\n        result = string.concat(\\n            result,\\n            _attribute(\\\"Color\\\", colorTrait(words, entropy)),\\n            _attribute(\\\"Words\\\", Util.uint256ToString(words.length))\\n        );\\n        return string.concat(result, \\\"]\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _attribute(\\n        string memory _traitType,\\n        string memory _value\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"{\\\",\\n                Util.keyValue(\\\"trait_type\\\", _traitType),\\n                \\\",\\\",\\n                Util.keyValue(\\\"value\\\", _value),\\n                \\\"}\\\"\\n            );\\n    }\\n\\n    function _rarity(\\n        bytes memory _seed,\\n        string memory _salt\\n    ) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(_seed, _salt)));\\n    }\\n}\\n\",\"keccak256\":\"0x3357f3ea0682984fa9fce3551c7d5008ef16a4d85091d38d9c351b07b065bb2e\",\"license\":\"Unlicense\"},\"src/libraries/Util.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nlibrary Util {\\n    error NumberHasTooManyDigits();\\n\\n    /// @notice wraps a string in quotes and adds a space after\\n    function quote(string memory value) internal pure returns (string memory) {\\n        return string.concat('\\\"', value, '\\\" ');\\n    }\\n\\n    function keyValue(\\n        string memory _key,\\n        string memory _value\\n    ) internal pure returns (string memory) {\\n        return string.concat('\\\"', _key, '\\\":\\\"', _value, '\\\"');\\n    }\\n\\n    function keyValueNoQuotes(\\n        string memory _key,\\n        string memory _value\\n    ) internal pure returns (string memory) {\\n        return string.concat('\\\"', _key, '\\\":', _value);\\n    }\\n\\n    /// @notice converts a tokenId to string and pads to _digits digits\\n    /// @dev tokenId must be less than 10**_digits\\n    /// @param _tokenId, uint256, the tokenId\\n    /// @param _digits, uint8, the number of digits to pad to\\n    /// @return result the resulting string\\n    function uint256ToString(\\n        uint256 _tokenId,\\n        uint8 _digits\\n    ) internal pure returns (string memory result) {\\n        uint256 max = 10 ** _digits;\\n        if (_tokenId >= max) revert NumberHasTooManyDigits();\\n        // add leading zeroes\\n        result = uint256ToString(_tokenId + max);\\n        assembly {\\n            // cut off one character\\n            result := add(result, 1)\\n            // store new length = _digits\\n            mstore(result, _digits)\\n        }\\n    }\\n\\n    /// @notice converts a uint256 to ascii representation, without leading zeroes\\n    /// @param _value, uint256, the value to convert\\n    /// @return result the resulting string\\n    function uint256ToString(\\n        uint256 _value\\n    ) internal pure returns (string memory result) {\\n        if (_value == 0) return \\\"0\\\";\\n\\n        assembly {\\n            // largest uint = 2^256-1 has 78 digits\\n            // reserve 110 = 78 + 32 bytes of data in memory\\n            // (first 32 are for string length)\\n\\n            // get 110 bytes of free memory\\n            result := add(mload(0x40), 110)\\n            mstore(0x40, result)\\n\\n            // keep track of digits\\n            let digits := 0\\n\\n            for {\\n\\n            } gt(_value, 0) {\\n\\n            } {\\n                // increment digits\\n                digits := add(digits, 1)\\n                // go back one byte\\n                result := sub(result, 1)\\n                // compute ascii char\\n                let c := add(mod(_value, 10), 48)\\n                // store byte\\n                mstore8(result, c)\\n                // advance to next digit\\n                _value := div(_value, 10)\\n            }\\n            // go back 32 bytes\\n            result := sub(result, 32)\\n            // store the length\\n            mstore(result, digits)\\n        }\\n    }\\n\\n    function bytes1ToString(\\n        bytes1 _value\\n    ) internal pure returns (string memory) {\\n        return uint256ToString(uint8(_value));\\n    }\\n\\n    function uint8ToString(uint8 _value) internal pure returns (string memory) {\\n        return uint256ToString(_value);\\n    }\\n\\n    /// @notice will revert in any characters are not in [0-9]\\n    function stringToUint256(\\n        string memory _value\\n    ) internal pure returns (uint256 result) {\\n        // 0-9 are 48-57\\n\\n        bytes memory value = bytes(_value);\\n        if (value.length == 0) return 0;\\n        uint256 multiplier = 10 ** (value.length - 1);\\n        uint256 i;\\n        while (multiplier != 0) {\\n            result += uint256((uint8(value[i]) - 48)) * multiplier;\\n            unchecked {\\n                multiplier /= 10;\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function bytes1ToHex(bytes1 _value) internal pure returns (string memory) {\\n        bytes memory result = new bytes(2);\\n        uint8 x = uint8(_value);\\n\\n        result[0] = getHexChar(x >> 4);\\n        result[1] = getHexChar(x % 16);\\n\\n        return string(result);\\n    }\\n\\n    function bytes32ToBytes(bytes32 x) internal pure returns (bytes memory) {\\n        bytes memory bytesString = new bytes(32);\\n        for (uint i = 0; i < 32; i++) {\\n            if (x[i] == 0) {\\n                bytesString[i] = bytes1(0x20);\\n            } else {\\n                bytesString[i] = x[i];\\n            }\\n        }\\n        return abi.encodePacked(bytesString);\\n    }\\n\\n    function bytes32ToString(bytes32 x) internal pure returns (string memory) {\\n        return string(bytes32ToBytes(x));\\n    }\\n\\n    function getHexChar(uint8 _value) internal pure returns (bytes1) {\\n        if (_value < 10) {\\n            return bytes1(_value + 48);\\n        }\\n        _value -= 10;\\n        return bytes1(_value + 97);\\n    }\\n\\n    function stringToBytes1(\\n        string memory _value\\n    ) internal pure returns (bytes1 result) {\\n        return bytes1(uint8(stringToUint256(_value)));\\n    }\\n\\n    function getRGBString(\\n        bytes memory _palette,\\n        uint256 _pos\\n    ) internal pure returns (string memory result) {\\n        return\\n            string.concat(\\n                \\\"#\\\",\\n                Util.bytes1ToHex(_palette[3 * _pos]),\\n                Util.bytes1ToHex(_palette[3 * _pos + 1]),\\n                Util.bytes1ToHex(_palette[3 * _pos + 2])\\n            );\\n    }\\n\\n    function getRGBString(\\n        bytes3 _color\\n    ) internal pure returns (string memory result) {\\n        return\\n            string.concat(\\n                \\\"#\\\",\\n                Util.bytes1ToHex(_color[0]),\\n                Util.bytes1ToHex(_color[1]),\\n                Util.bytes1ToHex(_color[2])\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x2504c3f999b200d7883c00c73bae04d5fcc305900e015dec580e6ecc50e7a216\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c80630403faa4146101095780637284e4161461009657806374a06ecf1461008d57806388508639146100845780638f866a921461007b578063eb5cf9ab146100725763fcb700351461006a57600080fd5b61000e610636565b5061000e61061e565b5061000e610608565b5061000e610463565b5061000e61044d565b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576101056040516100cf8161015a565b600a81527f5365656420506f656d73000000000000000000000000000000000000000000006020820152604051918291826103f0565b0390f35b61010561011e61011836610350565b91611185565b604051918291826103f0565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761017657604052565b61017e61012a565b604052565b6020810190811067ffffffffffffffff82111761017657604052565b6060810190811067ffffffffffffffff82111761017657604052565b6080810190811067ffffffffffffffff82111761017657604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761017657604052565b60209067ffffffffffffffff8111610232575b60051b0190565b61023a61012a565b61022b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff811161027b575b01160190565b61028361012a565b610275565b81601f8201121561000e5780359061029f8261023f565b926102ad60405194856101d7565b8284526020838301011161000e57816000926020809301838601378301015290565b9080601f8301121561000e578135906102e782610218565b926102f560405194856101d7565b828452602092838086019160051b8301019280841161000e57848301915b8483106103235750505050505090565b823567ffffffffffffffff811161000e57869161034584848094890101610288565b815201920191610313565b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261000e5767ffffffffffffffff9160043583811161000e578261039b916004016102cf565b9260243581811161000e57836103b391600401610288565b9260443591821161000e576103ca91600401610288565b90565b60005b8381106103e05750506000910152565b81810151838201526020016103d0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040936020845261043381518092816020880152602088880191016103cd565b0116010190565b6040519061044782610183565b60008252565b5061010561011e61045d36610350565b91611306565b5060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5767ffffffffffffffff60043560243582811161000e576104b29036906004016102cf565b60443583811161000e576104ca903690600401610288565b9260643590811161000e576104e3903690600401610288565b928151156105fb575b6020828101519094600180805b61054d575b61010561011e8888888c898961054761051e610519886141e9565b613180565b916105298688613d17565b9461053387613b2d565b01519561054182828a611185565b97611306565b95610a0f565b909285518410156105f557876105e86105ee926105bc61056d888b610679565b516105b66040519584610589889651809284808a0191016103cd565b8501016001907f200000000000000000000000000000000000000000000000000000000000000081520190565b90610705565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826101d7565b936106cb565b90806104f9565b926104fe565b610603610649565b6104ec565b5061010561011e61061836610350565b91612d23565b5061010561011e61063161045d36610350565b610eb2565b5061010561011e61063161011836610350565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602091815181101561068e575b60051b010190565b610696610649565b610686565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106f9570190565b61070161069b565b0190565b90610701602092828151948592016103cd565b604051906107258261015a565b600482527f6e616d65000000000000000000000000000000000000000000000000000000006020830152565b6040519061075e8261015a565b600b82527f6465736372697074696f6e0000000000000000000000000000000000000000006020830152565b604051906107978261015a565b600a82527f61747472696275746573000000000000000000000000000000000000000000006020830152565b604051906107d08261015a565b600f82527f6261636b67726f756e64436f6c6f7200000000000000000000000000000000006020830152565b604051906108098261015a565b600582527f696d6167650000000000000000000000000000000000000000000000000000006020830152565b604051906108428261015a565b600d82527f616e696d6174696f6e5f75726c000000000000000000000000000000000000006020830152565b9492909695939196604051978896602088017f7b0000000000000000000000000000000000000000000000000000000000000090528051908160218a0191602001916108b9926103cd565b8701917f2c0000000000000000000000000000000000000000000000000000000000000092836021820152815191826022830191602001916108fa926103cd565b0182602282015281519182602383019160200191610917926103cd565b0190602382015260240161092a91610705565b7f2c00000000000000000000000000000000000000000000000000000000000000815260010161095991610705565b7f2c00000000000000000000000000000000000000000000000000000000000000815260010161098891610705565b7f2c0000000000000000000000000000000000000000000000000000000000000081526001016109b791610705565b7f7d000000000000000000000000000000000000000000000000000000000000008152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181018352600101610a0d90836101d7565b565b610a1f9096949295939196614248565b95604051610a2c8161015a565b6007815260208101907f746f6b656e49640000000000000000000000000000000000000000000000000082526040519889927f22000000000000000000000000000000000000000000000000000000000000009283602086015251908160218601610a96926103cd565b8301602181017f223a220000000000000000000000000000000000000000000000000000000000905281519182602483019160200191610ad5926103cd565b0190602482015203600581018852602501610af090886101d7565b610af8610718565b90610b02916140bb565b94610b0b610751565b90610b15916140bb565b90610b1e61078a565b90610b2891614156565b91610b316107c3565b90610b3b916140bb565b92610b4590610eb2565b610b4d6107fc565b90610b57916140bb565b93610b6190610eb2565b610b69610835565b90610b73916140bb565b94610b7d9661086e565b6103ca90610bc7565b6020610a0d919392936040519481610ba787935180928680870191016103cd565b8201610bbb825180938680850191016103cd565b010380855201836101d7565b6103ca90610c0a60405191610bdb8361015a565b601d83527f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000006020840152610d4e565b90610b86565b60405190610c1d8261019f565b604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b9060028201809211610c7d57565b610a0d61069b565b9060208201809211610c7d57565b9060018201809211610c7d57565b605a019081605a11610c7d57565b91908201809211610c7d57565b908160021b917f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811603610c7d57565b81810292918115918404141715610c7d57565b90610d098261023f565b610d1660405191826101d7565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610d44829461023f565b0190602036910137565b805115610ea957610d5d610c10565b610d79610d74610d6d8451610c6f565b6003900490565b610cbc565b91610d8b610d8684610c85565b610cff565b92835280815182019060208501935b828210610e4d57505050600390510680600114610e0457600214610dbc575090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f3d0000000000000000000000000000000000000000000000000000000000000091015290565b507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe7f3d3d00000000000000000000000000000000000000000000000000000000000091015290565b90919360049060038094019384516001603f81818460121c16880101519260f893841b8652828282600c1c1689010151841b8387015282828260061c1689010151841b60028701521686010151901b9082015201939190610d9a565b506103ca61043a565b6103ca90610c0a60405191610ec68361015a565b601a83527f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000006020840152610d4e565b606a610a0d919392936040519485917f3c646566733e3c7374796c653e0000000000000000000000000000000000000060208401527f40666f6e742d66616365207b666f6e742d66616d696c793a202245424749223b602d8401527f7372633a2075726c282200000000000000000000000000000000000000000000604d840152610f8a8151809260206057870191016103cd565b82017f22293b000000000000000000000000000000000000000000000000000000000060578201527f7d3c2f7374796c653e0000000000000000000000000000000000000000000000605a820152610fec8251809360206063850191016103cd565b017f3c2f646566733e00000000000000000000000000000000000000000000000000606382015203604a8101855201836101d7565b6040519061102e8261015a565b600382527f76687300000000000000000000000000000000000000000000000000000000006020830152565b6035610a0d91939293604051948161107c8793518092602080870191016103cd565b82017f200000000000000000000000000000000000000000000000000000000000000060208201527f7472616e73666f726d3d22726f7461746528000000000000000000000000000060218201526110de8251809360206033850191016103cd565b017f292200000000000000000000000000000000000000000000000000000000000060338201520360158101855201836101d7565b604051906111208261015a565b600182527f67000000000000000000000000000000000000000000000000000000000000006020830152565b604051906111598261015a565b600382527f73766700000000000000000000000000000000000000000000000000000000006020830152565b6103ca92916112c7611268611198613504565b8451909590600090600381116112d557505061126260045b6111b986613a9b565b60ff60406111c689613b2d565b015160405190816111db602082018093610705565b039161120d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938481018352826101d7565b5190209060405161125760208201928261124b856007907f233030303030300000000000000000000000000000000000000000000000000081520190565b039081018352826101d7565b5190201492166126a5565b90610ef5565b916112b8611281602061127a84613b2d565b015161147a565b946112a4611295611290611021565b613632565b61129e85613c25565b9061105a565b9260406112b082613b2d565b015191612d23565b6112c0611113565b918261328e565b926112d061114c565b6133e9565b600681116112e957505061126260036111b0565b60091090506112fc5761126260026111b0565b61126260016111b0565b6103ca92916112c7611268611319613504565b8451909590600090600381116113d757505061126260045b61133a86613a9b565b60ff604061134789613b2d565b0151604051908161135c602082018093610705565b039161138e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938481018352826101d7565b519020906040516113cc60208201928261124b856007907f233030303030300000000000000000000000000000000000000000000000000081520190565b519020149216612890565b600681116113eb5750506112626003611331565b60091090506113fe576112626002611331565b6112626001611331565b604051906114158261015a565b600482527f31303025000000000000000000000000000000000000000000000000000000006020830152565b6040519061144e8261015a565b600482527f72656374000000000000000000000000000000000000000000000000000000006020830152565b6103ca906115ec603461148b611408565b611493611408565b906114bf6114b96114b3604051936114aa85610183565b60008552614040565b93614040565b95614040565b6040519586937f77696474683d000000000000000000000000000000000000000000000000000060208601526114ff8151809260206026890191016103cd565b84017f6865696768743d00000000000000000000000000000000000000000000000000602682015261153b825180936020602d850191016103cd565b017f66696c6c3d000000000000000000000000000000000000000000000000000000602d8201526115768251809360206032850191016103cd565b017f200000000000000000000000000000000000000000000000000000000000000060328201526115b18251809360206033850191016103cd565b016115de603382017f20000000000000000000000000000000000000000000000000000000000000009052565b0360148101845201826101d7565b6115f4611441565b6131d4565b604051906116068261019f565b602a82527f30203020302e33352030000000000000000000000000000000000000000000006040837f302030203020302031203020302030203020312030203020302030203120302060208201520152565b604051906116658261019f565b602a82527f30203020302e33352030000000000000000000000000000000000000000000006040837f302030203020302030203020302030203020302030203020302030203020302060208201520152565b604051906116c48261015a565b600382527f2d313200000000000000000000000000000000000000000000000000000000006020830152565b604051906116fd8261015a565b600382527f2d313000000000000000000000000000000000000000000000000000000000006020830152565b604051906117368261015a565b600282527f2d390000000000000000000000000000000000000000000000000000000000006020830152565b6040519061176f8261015a565b600282527f2d360000000000000000000000000000000000000000000000000000000000006020830152565b604051906117a88261015a565b600282527f2d350000000000000000000000000000000000000000000000000000000000006020830152565b604051906117e18261015a565b600482527f2d342e35000000000000000000000000000000000000000000000000000000006020830152565b6040519061181a8261015a565b600282527f2d330000000000000000000000000000000000000000000000000000000000006020830152565b604051906118538261015a565b600182527f36000000000000000000000000000000000000000000000000000000000000006020830152565b6040519061188c8261015a565b600182527f35000000000000000000000000000000000000000000000000000000000000006020830152565b604051906118c58261015a565b600382527f342e3500000000000000000000000000000000000000000000000000000000006020830152565b604051906118fe8261015a565b600182527f33000000000000000000000000000000000000000000000000000000000000006020830152565b604051906119378261015a565b600182527f34000000000000000000000000000000000000000000000000000000000000006020830152565b604051906119708261015a565b600382527f332e3500000000000000000000000000000000000000000000000000000000006020830152565b604051906119a9826101bb565b605782527f6174436f756e743d22696e646566696e69746522202f3e0000000000000000006060837f3c616e696d617465206174747269627574654e616d653d2276616c756573222060208201527f66726f6d3d22302220746f3d2233363022206475723d2231367322207265706560408201520152565b60405190611a2e8261015a565b600282527f32320000000000000000000000000000000000000000000000000000000000006020830152565b60405190611a678261015a565b600282527f32300000000000000000000000000000000000000000000000000000000000006020830152565b60405190611aa08261015a565b600282527f31300000000000000000000000000000000000000000000000000000000000006020830152565b60405190611ad98261015a565b600e82527f32323a33383a32383a33383a32320000000000000000000000000000000000006020830152565b60405190611b128261015a565b600b82527f32303b33303b33303b32300000000000000000000000000000000000000000006020830152565b60405190611b4b8261015a565b601482527f31303b32303b31353b32353b31353b32303b31300000000000000000000000006020830152565b90610a0d606e60405180947f3c616e696d617465206174747269627574654e616d653d227363616c6522207660208301527f616c7565733d22000000000000000000000000000000000000000000000000006040830152611be28151809260206047860191016103cd565b81017f22206475723d223136732220726570656174436f756e743d22696e646566696e60478201527f69746522202f3e00000000000000000000000000000000000000000000000000606782015203604e8101855201836101d7565b99979593919b9a98969492909b6040519c8d9b60208d017f3c646566733e3c66696c7465722069643d227668732220783d22302220793d22905260408d017f30222077696474683d2236313622206865696768743d22383839222066696c74905260608d017f6572556e6974733d227573657253706163654f6e5573652220636f6c6f722d69905260808d017f6e746572706f6c6174696f6e2d66696c746572733d2273524742223e3c666546905260a08d017f6c6f6f6420666c6f6f642d6f7061636974793d22302220726573756c743d2242905260c08d017f61636b67726f756e64496d61676546697822202f3e3c6665436f6c6f724d6174905260e08d017f72697820696e3d22536f75726365416c7068612220747970653d226d6174726990526101008d017f78222076616c7565733d2230203020302030203020302030203020302030203090526101208d017f20302030203020302030203020302031323720302220726573756c743d22686190526101408d017f7264416c70686122202f3e3c66654f66667365742064783d220000000000000090526101598d01611de891610705565b7f22202f3e3c6665476175737369616e426c757220737464446576696174696f6e81527f3d223222202f3e3c6665436f6d706f7369746520696e323d2268617264416c7060208201527f686122206f70657261746f723d226f757422202f3e3c6665436f6c6f724d617460408201527f72697820747970653d226d6174726978222076616c7565733d220000000000006060820152607a01611e8991610705565b7f22202f3e3c6665426c656e64206d6f64653d226e6f726d616c2220696e323d2281527f4261636b67726f756e64496d6167654669782220726573756c743d227465787460208201527f426c75725f706173733122202f3e3c6665436f6c6f724d617472697820696e3d60408201527f22536f75726365416c7068612220747970653d226d6174726978222076616c7560608201527f65733d223020302030203020302030203020302030203020302030203020302060808201527f302030203020302031323720302220726573756c743d2268617264416c70686160a08201527f22202f3e3c66654f66667365742064783d22000000000000000000000000000060c082015260d201611f9c91610705565b7f22202f3e3c6665476175737369616e426c757220737464446576696174696f6e81527f3d223222202f3e3c6665436f6d706f7369746520696e323d2268617264416c7060208201527f686122206f70657261746f723d226f757422202f3e3c6665436f6c6f724d617460408201527f72697820747970653d226d6174726978222076616c7565733d220000000000006060820152607a0161203d91610705565b7f22202f3e3c6665426c656e64206d6f64653d226e6f726d616c2220696e323d2281527f74657874426c75725f70617373312220726573756c743d2274657874426c757260208201527f5f706173733222202f3e3c6665436f6c6f724d617472697820696e3d22536f7560408201527f726365416c7068612220747970653d226d6174726978222076616c7565733d2260608201527f302030203020302030203020302030203020302030203020302030203020302060808201527f3020302031323720302220726573756c743d2268617264416c70686122202f3e60a08201527f3c66654f66667365742064783d2200000000000000000000000000000000000060c082015260ce0161215091610705565b7f22202f3e3c6665476175737369616e426c757220737464446576696174696f6e81527f3d223222202f3e3c6665436f6d706f7369746520696e323d2268617264416c7060208201527f686122206f70657261746f723d226f757422202f3e3c6665436f6c6f724d617460408201527f72697820747970653d226d6174726978222076616c7565733d220000000000006060820152607a016121f191610705565b7f22202f3e3c6665426c656e64206d6f64653d226e6f726d616c2220696e323d2281527f74657874426c75725f70617373322220726573756c743d2274657874426c757260208201527f5f706173733322202f3e3c6665436f6c6f724d617472697820696e3d22536f7560408201527f726365416c7068612220747970653d226d6174726978222076616c7565733d2260608201527f302030203020302030203020302030203020302030203020302030203020302060808201527f3020302031323720302220726573756c743d2268617264416c70686122202f3e60a08201527f3c66654f66667365742064783d2200000000000000000000000000000000000060c082015260ce0161230491610705565b7f22202f3e3c6665476175737369616e426c757220737464446576696174696f6e81527f3d223222202f3e3c6665436f6d706f7369746520696e323d2268617264416c7060208201527f686122206f70657261746f723d226f757422202f3e3c6665436f6c6f724d617460408201527f72697820747970653d226d6174726978222076616c7565733d220000000000006060820152607a016123a591610705565b7f22202f3e3c6665426c656e64206d6f64653d226e6f726d616c2220696e323d2281527f74657874426c75725f70617373332220726573756c743d2274657874426c757260208201527f5f706173733422202f3e3c6665426c656e64206d6f64653d226e6f726d616c2260408201527f20696e3d22536f75726365477261706869632220696e323d2274657874426c7560608201527f725f70617373342220726573756c743d22736861706522202f3e3c666547617560808201527f737369616e426c757220737464446576696174696f6e3d22000000000000000060a082015260b80161249291610705565b7f2220726573756c743d2274657874426c75725f706173733522202f3e0000000081527f3c666554757262756c656e636520626173654672657175656e63793d222e3031601c8201527f352220747970653d226672616374616c4e6f69736522202f3e00000000000000603c8201526055017f3c6665436f6c6f724d617472697820747970653d22687565526f74617465222081527f76616c7565733d2230223e0000000000000000000000000000000000000000006020820152602b0161255991610705565b7f3c2f6665436f6c6f724d61747269783e0000000000000000000000000000000081527f3c6665446973706c6163656d656e744d617020696e3d2274657874426c75725f60108201527f70617373352220784368616e6e656c53656c6563746f723d225222207943686160308201527f6e6e656c53656c6563746f723d224222207363616c653d22000000000000000060508201526068016125fa91610705565b7f223e000000000000000000000000000000000000000000000000000000000000815260020161262991610705565b7f3c2f6665446973706c6163656d656e744d61703e3c2f66696c7465723e3c2f6481527f6566733e000000000000000000000000000000000000000000000000000000006020820152602401037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352610a0d90836101d7565b6103ca9215612882576126b6611658565b915b600182146000811561284d57506126cd611762565b935b6000821561281857506126e061180d565b935b600083156127e357506126f36118f1565b925b600081156127ae5750612706611762565b915b600091156127745750508161271b611963565b935b61272561043a565b956000906001810361274d5750508161273c611a93565b975b8161274761043a565b9a611c3e565b6002141590506127665781612760611a5a565b9761273e565b8161276f611a21565b612760565b6002810361278d5750508161278761192a565b9361271d565b6003141590506127a557816127a06118b8565b612787565b816127a061187f565b600283036127c557506127bf611729565b91612708565b50600382036127db576127d66116f0565b6127bf565b6127d66116b7565b600282036127fa57506127f46118b8565b926126f5565b50600381036128105761280b61187f565b6127f4565b61280b611846565b6002850361282f57506128296117d4565b936126e2565b50600384036128455761284061179b565b612829565b612840611762565b60028403612864575061285e611729565b936126cf565b506003830361287a576128756116f0565b61285e565b6128756116b7565b61288a6115f9565b916126b8565b906103ca92600014612a9b576128a4611658565b915b6001811460008115612a6657506128bb611762565b935b60008215612a3157506128ce61180d565b925b600083156129fc57506128e16118f1565b925b600081156129c757506128f4611762565b915b6000911561298d57505081612909611963565b935b8161291461199c565b966001891460008115612969575061292a611a93565b995b6000911561294757505081612747612942611b3e565b611b77565b60021415905061295d5781612747612942611b05565b81612747612942611acc565b5060028a036129805761297a611a5a565b9961292c565b612988611a21565b61297a565b600281036129a6575050816129a061192a565b9361290b565b6003141590506129be57816129b96118b8565b6129a0565b816129b961187f565b600283036129de57506129d8611729565b916128f6565b50600382036129f4576129ef6116f0565b6129d8565b6129ef6116b7565b60028203612a135750612a0d6118b8565b926128e3565b5060038103612a2957612a2461187f565b612a0d565b612a24611846565b60028403612a485750612a426117d4565b926128d0565b5060038303612a5e57612a5961179b565b612a42565b612a59611762565b60028303612a7d5750612a77611729565b936128bd565b5060038203612a9357612a8e6116f0565b612a77565b612a8e6116b7565b612aa36115f9565b916128a6565b90612ab382610218565b612ac060405191826101d7565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612aee8294610218565b019060005b828110612aff57505050565b806060602080938501015201612af3565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201918211610c7d57565b605a0390605a8211610c7d57565b906101bc918203918211610c7d57565b60405190612b688261015a565b600382527f31323500000000000000000000000000000000000000000000000000000000006020830152565b60405190612ba18261015a565b600282527f35350000000000000000000000000000000000000000000000000000000000006020830152565b60405190612bda8261015a565b600282527f35370000000000000000000000000000000000000000000000000000000000006020830152565b60405190612c138261015a565b600282527f36320000000000000000000000000000000000000000000000000000000000006020830152565b60405190612c4c8261015a565b600282527f36350000000000000000000000000000000000000000000000000000000000006020830152565b60405190612c858261015a565b600282527f37350000000000000000000000000000000000000000000000000000000000006020830152565b60405190612cbe8261015a565b600282527f39330000000000000000000000000000000000000000000000000000000000006020830152565b60405190612cf78261015a565b600882527f726f746174696f6e0000000000000000000000000000000000000000000000006020830152565b90918151906014936015831494856000146130b057506013955b612d4684612aa9565b926000928360605b8851861015612e775780518015159081612e4c575b5015612dce5790612d8991612d788289610679565b52612d838188610679565b506106cb565b95612daf612d97868a610679565b51955b612da48a51612b10565b8114612db8576106cb565b94969096612d4e565b86612dc38a8a610679565b52612d838989610679565b805191979186908a9015612e3657612daf926105bc612df3612e0794612e3094610679565b516105b66040519586946020860190610705565b7f2000000000000000000000000000000000000000000000000000000000000000815260010190565b95612d9a565b612daf925090612e4591610679565b5195612d9a565b612e6c9150612e6790612e5f898d610679565b515190610caf565b610c93565b60ff8c161038612d63565b509498509250939095612e88612b5b565b9160789160068203612fe25750505050612ea0612cb1565b91612eb9605d959493925b612eb3612cea565b90613ffb565b906001956006600a888516159404066060976000975b84891115612efd575050505050505050506103ca919250612eee611113565b90612ef761043a565b8261328e565b9091929394959697986105b6612fa3612fa9926105bc8f8d8f8d8f91612f8d8f918f8f908f8f612f7683612f8795612f8194612f7c94612f939f8a612f4191610679565b519c60009015612fc0575091612f6b91600c612f70945111600014612fb65760ff905b1690610cec565b610ca1565b98610cec565b60011c90565b612b4b565b92610cec565b90610caf565b91613758565b6040519485936020850190610705565b996106cb565b9796959493929190612ecf565b5060ff6002612f64565b5051612f7092612fdd929091600c1015612fb65760ff1690610cec565b612b3d565b600982036130085750505050612ff6612c78565b91612eb9604b925b9594939295612eab565b600c8203613028575050505061301c612c78565b91612eb9604b92612ffe565b600f8203613048575050505061303c612c3f565b91612eb9604192612ffe565b60128203613068575050505061305c612c06565b91612eb9603e92612ffe565b1561308457505050613078612bcd565b91612eb9603992612ffe565b91939092909160181461309b575b612eb990612ffe565b915091506130a7612b94565b91603791613092565b601284036130c15750601295612d3d565b600f84036130d25750601195612d3d565b600c84036130e35750601095612d3d565b600984036130f45750600f95612d3d565b600684036131065750600c955b612d3d565b600384036131175750600995612d3d565b956018840315613101576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c696420776f72647320706572206c696e65000000000000000000006044820152606490fd5b90610a0d602e60405180947f4d6e656d6f6e696320506f656d2000000000000000000000000000000000000060208301526131c481518092602086860191016103cd565b810103600e8101855201836101d7565b6024610a0d919392936040519485917f3c00000000000000000000000000000000000000000000000000000000000000602084015261321d8151809260206021870191016103cd565b82017f200000000000000000000000000000000000000000000000000000000000000060218201526132598251809360206022850191016103cd565b017f2f3e00000000000000000000000000000000000000000000000000000000000060228201520360048101855201836101d7565b610a0d9260269295946040519687937f3c0000000000000000000000000000000000000000000000000000000000000060208601526132d78151809260206021890191016103cd565b84017f200000000000000000000000000000000000000000000000000000000000000060218201526133138251809360206022850191016103cd565b01917f3e00000000000000000000000000000000000000000000000000000000000000928360228201526133518251809360206023850191016103cd565b017f3c2f000000000000000000000000000000000000000000000000000000000000602382015261338c8251809360206025850191016103cd565b019060258201520360068101855201836101d7565b610a0d9193929360405194859183516133c2816020968780880191016103cd565b83016133d6825180938780850191016103cd565b01610bbb825180938680850191016103cd565b90936133fb906103ca946026946133a1565b6040519485927f3c0000000000000000000000000000000000000000000000000000000000000060208501526134ef81519260208301936134408160218901876103cd565b86017f2000000000000000000000000000000000000000000000000000000000000000602182015261347c8251809360206022850191016103cd565b01937f3e00000000000000000000000000000000000000000000000000000000000000948560228201526134ba8251809360206023850191016103cd565b01917f3c2f000000000000000000000000000000000000000000000000000000000000602384015251809360258401906103cd565b019060258201520360068101845201826101d7565b604051907f786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737660208301527f672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e77332e6f7260408301527f672f313939392f786c696e6b222077696474683d22313030252220686569676860608301527f743d2231303025222076696577426f783d22302030203631362038383922200060808301527f7072657365727665417370656374526174696f3d22784d6964594d6964206d65609f8301527f657422200000000000000000000000000000000000000000000000000000000060bf8301527f66696c6c3d226e6f6e652220000000000000000000000000000000000000000060c383015260af825260e0820182811067ffffffffffffffff82111761017657604052565b90610a0d603060405180947f66696c7465723d0000000000000000000000000000000000000000000000000060208301527f220000000000000000000000000000000000000000000000000000000000000060278301527f75726c282300000000000000000000000000000000000000000000000000000060288301526136c3815180926020602d860191016103cd565b81017f2900000000000000000000000000000000000000000000000000000000000000602d8201527f2220000000000000000000000000000000000000000000000000000000000000602e8201520360108101855201836101d7565b6040519061372c8261015a565b600482527f74657874000000000000000000000000000000000000000000000000000000006020830152565b92939160409081519282840184811067ffffffffffffffff821117613a8e575b835261378390614248565b835261378e90614248565b92602080840194855282516137a2816101bb565b604781527f454247492c20454220476172616d6f6e64204974616c69632c20476172616d6f828201527f6e64204974616c69632c20454220476172616d6f6e642c20476172616d6f6e64848201527f2c2073657269660000000000000000000000000000000000000000000000000060608201528351946138228661015a565b600a86527f64793d22302e34656d2200000000000000000000000000000000000000000000838701525161385590614040565b955161386090614040565b97845181819251908186808501920191613879926103cd565b81018481017f70780000000000000000000000000000000000000000000000000000000000009052036002810182526022016138b590826101d7565b6138be90614040565b906138c890614040565b926138d290614040565b93519788968388017f783d0000000000000000000000000000000000000000000000000000000000009052805190818560228b01920191613912926103cd565b8701602281017f793d0000000000000000000000000000000000000000000000000000000000009052815191828560248401920191613950926103cd565b0190602482017f666f6e742d73697a653d00000000000000000000000000000000000000000000905280518093602e840192019161398d926103cd565b01602e81016139bb907f666f6e742d66616d696c793d00000000000000000000000000000000000000009052565b603a016139c791610705565b7f66696c6c3d00000000000000000000000000000000000000000000000000000081526005016139f691610705565b7f20000000000000000000000000000000000000000000000000000000000000008152600101613a2591610705565b7f20000000000000000000000000000000000000000000000000000000000000008152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181018352600101613a7b90836101d7565b613a8361371f565b906103ca928261328e565b613a9661012a565b613778565b613add60039160405190613aae8261015a565b600a82527f646973746f7274696f6e000000000000000000000000000000000000000000006020830152613ffb565b0660018101809111613aec5790565b6103ca61069b565b60405190613b018261015a565b600782527f23303030303030000000000000000000000000000000000000000000000000006020830152565b604090815192613b3c8461019f565b60005b606080821015613b555785820152602001613b3f565b50509250613b9890825190613b698261015a565b600582527f636f6c6f720000000000000000000000000000000000000000000000000000006020830152613ffb565b50805190613ba58261019f565b8051613bb08161015a565b600481527f566f696400000000000000000000000000000000000000000000000000000000602082015282528051613be78161015a565b600781527f234639463946390000000000000000000000000000000000000000000000000060208201526020830152613c1e613af4565b9082015290565b6103ca6021613c39613ccd93612eb3612cea565b60018116613cdc57613c4961043a565b613c686103e86064613c606006600a870406614248565b940406614248565b906040519586938251613c838160209586808a0191016103cd565b8501613c97825180938680850191016103cd565b01917f2e0000000000000000000000000000000000000000000000000000000000000081840152835193849187850191016103cd565b010360018101845201826101d7565b604051613ce88161015a565b600181527f2d000000000000000000000000000000000000000000000000000000000000006020820152613c49565b60217f5d0000000000000000000000000000000000000000000000000000000000000092613e0e6103ca9360405190613d4f8261015a565b60018252613e08613dce613dc7613d8c6020977f5b0000000000000000000000000000000000000000000000000000000000000089880152613b2d565b51604051613d998161015a565b600581527f436f6c6f7200000000000000000000000000000000000000000000000000000089820152613e3b565b9251614248565b604051613dda8161015a565b600581527f576f72647300000000000000000000000000000000000000000000000000000087820152613e3b565b916133a1565b906040519482613e2787945180928580880191016103cd565b8301918201520360018101845201826101d7565b6023613f8d926103ca9260405191613e528361015a565b600a8352613fc6613f54602092613f1a6025858801967f74726169745f7479706500000000000000000000000000000000000000000000885260405198899188830199613eca7f220000000000000000000000000000000000000000000000000000000000000093848d5251809260218701906103cd565b83017f223a2200000000000000000000000000000000000000000000000000000000006021820152613f05825180938c6024850191016103cd565b019060248201520360058101895201876101d7565b604051613f268161015a565b600581527f76616c7565000000000000000000000000000000000000000000000000000000858201526140bb565b926040519788957f7b000000000000000000000000000000000000000000000000000000000000008588015251809260218801906103cd565b8401917f2c00000000000000000000000000000000000000000000000000000000000000602184015283519384916022850191016103cd565b017f7d0000000000000000000000000000000000000000000000000000000000000060228201520360038101845201826101d7565b9061403a602060405180938261401a81840197888151938492016103cd565b820161402e825180938680850191016103cd565b010380845201826101d7565b51902090565b90610a0d602360405180947f220000000000000000000000000000000000000000000000000000000000000060208301526140858151809260206021860191016103cd565b81017f222000000000000000000000000000000000000000000000000000000000000060218201520360038101855201836101d7565b91906025610a0d916040519485917f2200000000000000000000000000000000000000000000000000000000000000918260208501526141058151809260206021880191016103cd565b83017f223a22000000000000000000000000000000000000000000000000000000000060218201526141418251809360206024850191016103cd565b019060248201520360058101855201836101d7565b6023610a0d919392936040519485917f2200000000000000000000000000000000000000000000000000000000000000602084015261419f8151809260206021870191016103cd565b82017f223a00000000000000000000000000000000000000000000000000000000000060218201526141da82518093602087850191016103cd565b010360038101855201836101d7565b6103e88082101561421e5781614209916001930180911161421157614248565b019060038252565b61421961069b565b614248565b60046040517f51aa39c0000000000000000000000000000000000000000000000000000000008152fd5b9081156142c657606e6040510180604052826000935b61428a57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001918252565b909260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9101930190600a906030828206018353048061425e565b90506040516142d48161015a565b600181527f300000000000000000000000000000000000000000000000000000000000000060208201529056fea2646970667358221220927bdc18c8be8f0b0bb4ffebb76052fc6c3bbd2ceeb20e24cb1f1992a8e7689364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Adopted from Bibos (0xf528e3381372c43f5e8a55b3e6c252e32f1a26e4)",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}