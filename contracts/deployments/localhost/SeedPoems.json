{
  "address": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IncorrectPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxPublicSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewOwnerIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoHandoverRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipHandoverCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipHandoverRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ARTIST_ALLOTMENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WORD_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WORD_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "bind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_wordsChunk",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "commitWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "completeOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        }
      ],
      "name": "entropyToMnemonic",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        }
      ],
      "name": "entropyToMnemonicString",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "words",
          "type": "uint256"
        }
      ],
      "name": "generateEntropy",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "words",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        }
      ],
      "name": "generateMnemonic",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "words",
          "type": "uint256"
        }
      ],
      "name": "generateMnemonic",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "words",
          "type": "uint256"
        }
      ],
      "name": "generateMnemonicString",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "words",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        }
      ],
      "name": "generateMnemonicString",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFont",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintedIndices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWordlist",
      "outputs": [
        {
          "internalType": "string[2048]",
          "name": "",
          "type": "string[2048]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        }
      ],
      "name": "indicesToWords",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isEntropyMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "language",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "seedIndices",
          "type": "uint256[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "seedIndices",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bound",
          "type": "bool"
        }
      ],
      "name": "mintArtist",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintReserveActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "wordIndices",
          "type": "uint256[]"
        }
      ],
      "name": "mnemonicToEntropy",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "result",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "ownershipHandoverExpiresAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownershipHandoverValidFor",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "renderSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "renderSVGBase64",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "seedIndices",
          "type": "uint256[]"
        }
      ],
      "name": "renderSVGBase64FromWords",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "renderSVGBase64static",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "seedIndices",
          "type": "uint256[]"
        }
      ],
      "name": "renderSVGBase64staticFromWords",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "seedIndices",
          "type": "uint256[]"
        }
      ],
      "name": "renderSVGFromWords",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "renderSVGstatic",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "seedIndices",
          "type": "uint256[]"
        }
      ],
      "name": "renderSVGstaticFromWords",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "seeds",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "bound",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fontString",
          "type": "string"
        }
      ],
      "name": "setFont",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wordlist",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7960b993fc16086e7c8aaefa78f2c2ef4918c3b6ce8a92b9fc87e0746ee09e5e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
    "transactionIndex": 0,
    "gasUsed": "4729000",
    "logsBloom": "0x
    "blockHash": "0xa1a89ccf5d3a90140730fe0c6448cf283f8180180080de32c43b9c6cb4438707",
    "transactionHash": "0x7960b993fc16086e7c8aaefa78f2c2ef4918c3b6ce8a92b9fc87e0746ee09e5e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19,
        "transactionHash": "0x7960b993fc16086e7c8aaefa78f2c2ef4918c3b6ce8a92b9fc87e0746ee09e5e",
        "address": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa1a89ccf5d3a90140730fe0c6448cf283f8180180080de32c43b9c6cb4438707"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19,
        "transactionHash": "0x7960b993fc16086e7c8aaefa78f2c2ef4918c3b6ce8a92b9fc87e0746ee09e5e",
        "address": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa1a89ccf5d3a90140730fe0c6448cf283f8180180080de32c43b9c6cb4438707"
      }
    ],
    "blockNumber": 19,
    "cumulativeGasUsed": "4729000",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "8c17e7c2717a10ab88794650c0e74a9b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IncorrectPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxPublicSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHandoverRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARTIST_ALLOTMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WORD_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WORD_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_wordsChunk\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"commitWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"completeOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"}],\"name\":\"entropyToMnemonic\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"}],\"name\":\"entropyToMnemonicString\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"words\",\"type\":\"uint256\"}],\"name\":\"generateEntropy\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"words\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"}],\"name\":\"generateMnemonic\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"words\",\"type\":\"uint256\"}],\"name\":\"generateMnemonic\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"words\",\"type\":\"uint256\"}],\"name\":\"generateMnemonicString\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"words\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"}],\"name\":\"generateMnemonicString\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFont\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintedIndices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWordlist\",\"outputs\":[{\"internalType\":\"string[2048]\",\"name\":\"\",\"type\":\"string[2048]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"indicesToWords\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isEntropyMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"language\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seedIndices\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seedIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bound\",\"type\":\"bool\"}],\"name\":\"mintArtist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintReserveActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"wordIndices\",\"type\":\"uint256[]\"}],\"name\":\"mnemonicToEntropy\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipHandoverValidFor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"renderSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"renderSVGBase64\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seedIndices\",\"type\":\"uint256[]\"}],\"name\":\"renderSVGBase64FromWords\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"renderSVGBase64static\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seedIndices\",\"type\":\"uint256[]\"}],\"name\":\"renderSVGBase64staticFromWords\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seedIndices\",\"type\":\"uint256[]\"}],\"name\":\"renderSVGFromWords\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"renderSVGstatic\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seedIndices\",\"type\":\"uint256[]\"}],\"name\":\"renderSVGstaticFromWords\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seeds\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"bound\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fontString\",\"type\":\"string\"}],\"name\":\"setFont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wordlist\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NewOwnerIsZeroAddress()\":[{\"details\":\"The `newOwner` cannot be the zero address.\"}],\"NoHandoverRequest()\":[{\"details\":\"The `pendingOwner` does not have a valid handover request.\"}],\"Unauthorized()\":[{\"details\":\"The caller is not authorized to call the function.\"}]},\"kind\":\"dev\",\"methods\":{\"bind(uint256,address)\":{\"params\":{\"id\":\"tokenId of the poem to be bound\"}},\"cancelOwnershipHandover()\":{\"details\":\"Cancels the two-step ownership handover to the caller, if any.\"},\"completeOwnershipHandover(address)\":{\"details\":\"Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`.\"},\"getMintedIndices()\":{\"details\":\"Intended to be used offchain\"},\"owner()\":{\"details\":\"Returns the owner of the contract.\"},\"ownershipHandoverExpiresAt(address)\":{\"details\":\"Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\"},\"ownershipHandoverValidFor()\":{\"details\":\"Returns how long a two-step ownership handover is valid for in seconds.\"},\"renounceOwnership()\":{\"details\":\"Allows the owner to renounce their ownership.\"},\"requestOwnershipHandover()\":{\"details\":\"Request a two-step ownership handover to the caller. The request will be automatically expire in 48 hours (172800 seconds) by default.\"},\"transferOwnership(address)\":{\"details\":\"Allows the owner to transfer the ownership to `newOwner`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bind(uint256,address)\":{\"notice\":\"This method allows a seed poem to be bound to a specific address that is derived from the seed itself.\"},\"setPause(bool)\":{\"notice\":\"Pause/Unpause minting\"},\"withdraw(address)\":{\"notice\":\"Withdraws balance to address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/SeedPoems.sol\":\"SeedPoems\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363933363839303935303436\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"solady/src/auth/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\\n/// @dev While the ownable portion follows [EIP-173](https://eips.ethereum.org/EIPS/eip-173)\\n/// for compatibility, the nomenclature for the 2-step ownership handover\\n/// may be unique to this codebase.\\nabstract contract Ownable {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The caller is not authorized to call the function.\\n    error Unauthorized();\\n\\n    /// @dev The `newOwner` cannot be the zero address.\\n    error NewOwnerIsZeroAddress();\\n\\n    /// @dev The `pendingOwner` does not have a valid handover request.\\n    error NoHandoverRequest();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\\n    /// despite it not being as lightweight as a single argument event.\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @dev An ownership handover to `pendingOwner` has been requested.\\n    event OwnershipHandoverRequested(address indexed pendingOwner);\\n\\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipTransferred(address,address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverRequested(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverCanceled(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The owner slot is given by: `not(_OWNER_SLOT_NOT)`.\\n    /// It is intentionally chosen to be a high value\\n    /// to avoid collision with lower slots.\\n    /// The choice of manual storage layout is to enable compatibility\\n    /// with both regular and upgradeable contracts.\\n    uint256 private constant _OWNER_SLOT_NOT = 0x8b78c6d8;\\n\\n    /// The ownership handover slot of `newOwner` is given by:\\n    /// ```\\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\\n    ///     let handoverSlot := keccak256(0x00, 0x20)\\n    /// ```\\n    /// It stores the expiry timestamp of the two-step ownership handover.\\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     INTERNAL FUNCTIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Initializes the owner directly without authorization guard.\\n    /// This function must be called upon initialization,\\n    /// regardless of whether the contract is upgradeable or not.\\n    /// This is to enable generalization to both regular and upgradeable contracts,\\n    /// and to save gas in case the initial owner is not the caller.\\n    /// For performance reasons, this function will not check if there\\n    /// is an existing owner.\\n    function _initializeOwner(address newOwner) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clean the upper 96 bits.\\n            newOwner := shr(96, shl(96, newOwner))\\n            // Store the new value.\\n            sstore(not(_OWNER_SLOT_NOT), newOwner)\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n        }\\n    }\\n\\n    /// @dev Sets the owner directly without authorization guard.\\n    function _setOwner(address newOwner) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ownerSlot := not(_OWNER_SLOT_NOT)\\n            // Clean the upper 96 bits.\\n            newOwner := shr(96, shl(96, newOwner))\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n            // Store the new value.\\n            sstore(ownerSlot, newOwner)\\n        }\\n    }\\n\\n    /// @dev Throws if the sender is not the owner.\\n    function _checkOwner() internal view virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the caller is not the stored owner, revert.\\n            if iszero(eq(caller(), sload(not(_OWNER_SLOT_NOT)))) {\\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(shl(96, newOwner)) {\\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /// @dev Allows the owner to renounce their ownership.\\n    function renounceOwnership() public payable virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /// @dev Request a two-step ownership handover to the caller.\\n    /// The request will be automatically expire in 48 hours (172800 seconds) by default.\\n    function requestOwnershipHandover() public payable virtual {\\n        unchecked {\\n            uint256 expires = block.timestamp + ownershipHandoverValidFor();\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Compute and set the handover slot to `expires`.\\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\\n                mstore(0x00, caller())\\n                sstore(keccak256(0x0c, 0x20), expires)\\n                // Emit the {OwnershipHandoverRequested} event.\\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\\n            }\\n        }\\n    }\\n\\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\\n    function cancelOwnershipHandover() public payable virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x20), 0)\\n            // Emit the {OwnershipHandoverCanceled} event.\\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\\n        }\\n    }\\n\\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            let handoverSlot := keccak256(0x0c, 0x20)\\n            // If the handover does not exist, or has expired.\\n            if gt(timestamp(), sload(handoverSlot)) {\\n                mstore(0x00, 0x6f5e8818) // `NoHandoverRequest()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Set the handover slot to 0.\\n            sstore(handoverSlot, 0)\\n        }\\n        _setOwner(pendingOwner);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   PUBLIC READ FUNCTIONS                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of the contract.\\n    function owner() public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := sload(not(_OWNER_SLOT_NOT))\\n        }\\n    }\\n\\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\\n    function ownershipHandoverExpiresAt(address pendingOwner)\\n        public\\n        view\\n        virtual\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the handover slot.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            // Load the handover slot.\\n            result := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\\n    function ownershipHandoverValidFor() public view virtual returns (uint64) {\\n        return 48 * 3600;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         MODIFIERS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Marks a function as only callable by the owner.\\n    modifier onlyOwner() virtual {\\n        _checkOwner();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x75727636324bbe778d1e323970d29179a4cfdf291cbe4c4567ca149e9acef42a\",\"license\":\"MIT\"},\"solady/src/utils/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Read and write to persistent storage at a fraction of the cost.\\n/// @author Solady (https://github.com/vectorized/solmady/blob/main/src/utils/SSTORE2.sol)\\n/// @author Saw-mon-and-Natalie (https://github.com/Saw-mon-and-Natalie)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SSTORE2.sol)\\n/// @author Modified from 0xSequence (https://github.com/0xSequence/sstore2/blob/master/contracts/SSTORE2.sol)\\nlibrary SSTORE2 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev We skip the first byte as it's a STOP opcode,\\n    /// which ensures the contract can't be called.\\n    uint256 internal constant DATA_OFFSET = 1;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Unable to deploy the storage contract.\\n    error DeploymentFailed();\\n\\n    /// @dev The storage contract address is invalid.\\n    error InvalidPointer();\\n\\n    /// @dev Attempt to read outside of the storage contract's bytecode bounds.\\n    error ReadOutOfBounds();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         WRITE LOGIC                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Writes `data` into the bytecode of a storage contract and returns its address.\\n    function write(bytes memory data) internal returns (address pointer) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let originalDataLength := mload(data)\\n\\n            // Add 1 to data size since we are prefixing it with a STOP opcode.\\n            let dataSize := add(originalDataLength, DATA_OFFSET)\\n\\n            /**\\n             * ------------------------------------------------------------------------------+\\n             * Opcode      | Mnemonic        | Stack                   | Memory              |\\n             * ------------------------------------------------------------------------------|\\n             * 61 codeSize | PUSH2 codeSize  | codeSize                |                     |\\n             * 80          | DUP1            | codeSize codeSize       |                     |\\n             * 60 0xa      | PUSH1 0xa       | 0xa codeSize codeSize   |                     |\\n             * 3D          | RETURNDATASIZE  | 0 0xa codeSize codeSize |                     |\\n             * 39          | CODECOPY        | codeSize                | [0..codeSize): code |\\n             * 3D          | RETURNDATASIZE  | 0 codeSize              | [0..codeSize): code |\\n             * F3          | RETURN          |                         | [0..codeSize): code |\\n             * 00          | STOP            |                         |                     |\\n             * ------------------------------------------------------------------------------+\\n             * @dev Prefix the bytecode with a STOP opcode to ensure it cannot be called.\\n             * Also PUSH2 is used since max contract size cap is 24,576 bytes which is less than 2 ** 16.\\n             */\\n            mstore(\\n                data,\\n                or(\\n                    0x61000080600a3d393df300,\\n                    // Left shift `dataSize` by 64 so that it lines up with the 0000 after PUSH2.\\n                    shl(0x40, dataSize)\\n                )\\n            )\\n\\n            // Deploy a new contract with the generated creation code.\\n            pointer := create(0, add(data, 0x15), add(dataSize, 0xa))\\n\\n            // If `pointer` is zero, revert.\\n            if iszero(pointer) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Restore original length of the variable size `data`.\\n            mstore(data, originalDataLength)\\n        }\\n    }\\n\\n    /// @dev Writes `data` into the bytecode of a storage contract with `salt`\\n    /// and returns its deterministic address.\\n    function writeDeterministic(bytes memory data, bytes32 salt)\\n        internal\\n        returns (address pointer)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let originalDataLength := mload(data)\\n            let dataSize := add(originalDataLength, DATA_OFFSET)\\n\\n            mstore(data, or(0x61000080600a3d393df300, shl(0x40, dataSize)))\\n\\n            // Deploy a new contract with the generated creation code.\\n            pointer := create2(0, add(data, 0x15), add(dataSize, 0xa), salt)\\n\\n            // If `pointer` is zero, revert.\\n            if iszero(pointer) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Restore original length of the variable size `data`.\\n            mstore(data, originalDataLength)\\n        }\\n    }\\n\\n    /// @dev Returns the initialization code hash of the storage contract for `data`.\\n    /// Used for mining vanity addresses with create2crunch.\\n    function initCodeHash(bytes memory data) internal pure returns (bytes32 hash) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let originalDataLength := mload(data)\\n            let dataSize := add(originalDataLength, DATA_OFFSET)\\n\\n            mstore(data, or(0x61000080600a3d393df300, shl(0x40, dataSize)))\\n\\n            hash := keccak256(add(data, 0x15), add(dataSize, 0xa))\\n\\n            // Restore original length of the variable size `data`.\\n            mstore(data, originalDataLength)\\n        }\\n    }\\n\\n    /// @dev Returns the address of the storage contract for `data`\\n    /// deployed with `salt` by `deployer`.\\n    function predictDeterministicAddress(bytes memory data, bytes32 salt, address deployer)\\n        internal\\n        pure\\n        returns (address predicted)\\n    {\\n        bytes32 hash = initCodeHash(data);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and store the bytecode hash.\\n            mstore8(0x00, 0xff) // Write the prefix.\\n            mstore(0x35, hash)\\n            mstore(0x01, shl(96, deployer))\\n            mstore(0x15, salt)\\n            predicted := keccak256(0x00, 0x55)\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x35, 0)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         READ LOGIC                         */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns all the `data` from the bytecode of the storage contract at `pointer`.\\n    function read(address pointer) internal view returns (bytes memory data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let pointerCodesize := extcodesize(pointer)\\n            if iszero(pointerCodesize) {\\n                // Store the function selector of `InvalidPointer()`.\\n                mstore(0x00, 0x11052bb4)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Offset all indices by 1 to skip the STOP opcode.\\n            let size := sub(pointerCodesize, DATA_OFFSET)\\n\\n            // Get the pointer to the free memory and allocate\\n            // enough 32-byte words for the data and the length of the data,\\n            // then copy the code to the allocated memory.\\n            // Masking with 0xffe0 will suffice, since contract size is less than 16 bits.\\n            data := mload(0x40)\\n            mstore(0x40, add(data, and(add(size, 0x3f), 0xffe0)))\\n            mstore(data, size)\\n            mstore(add(add(data, 0x20), size), 0) // Zeroize the last slot.\\n            extcodecopy(pointer, add(data, 0x20), DATA_OFFSET, size)\\n        }\\n    }\\n\\n    /// @dev Returns the `data` from the bytecode of the storage contract at `pointer`,\\n    /// from the byte at `start`, to the end of the data stored.\\n    function read(address pointer, uint256 start) internal view returns (bytes memory data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let pointerCodesize := extcodesize(pointer)\\n            if iszero(pointerCodesize) {\\n                // Store the function selector of `InvalidPointer()`.\\n                mstore(0x00, 0x11052bb4)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // If `!(pointer.code.size > start)`, reverts.\\n            // This also handles the case where `start + DATA_OFFSET` overflows.\\n            if iszero(gt(pointerCodesize, start)) {\\n                // Store the function selector of `ReadOutOfBounds()`.\\n                mstore(0x00, 0x84eb0dd1)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            let size := sub(pointerCodesize, add(start, DATA_OFFSET))\\n\\n            // Get the pointer to the free memory and allocate\\n            // enough 32-byte words for the data and the length of the data,\\n            // then copy the code to the allocated memory.\\n            // Masking with 0xffe0 will suffice, since contract size is less than 16 bits.\\n            data := mload(0x40)\\n            mstore(0x40, add(data, and(add(size, 0x3f), 0xffe0)))\\n            mstore(data, size)\\n            mstore(add(add(data, 0x20), size), 0) // Zeroize the last slot.\\n            extcodecopy(pointer, add(data, 0x20), add(start, DATA_OFFSET), size)\\n        }\\n    }\\n\\n    /// @dev Returns the `data` from the bytecode of the storage contract at `pointer`,\\n    /// from the byte at `start`, to the byte at `end` (exclusive) of the data stored.\\n    function read(address pointer, uint256 start, uint256 end)\\n        internal\\n        view\\n        returns (bytes memory data)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let pointerCodesize := extcodesize(pointer)\\n            if iszero(pointerCodesize) {\\n                // Store the function selector of `InvalidPointer()`.\\n                mstore(0x00, 0x11052bb4)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // If `!(pointer.code.size > end) || (start > end)`, revert.\\n            // This also handles the cases where\\n            // `end + DATA_OFFSET` or `start + DATA_OFFSET` overflows.\\n            if iszero(\\n                and(\\n                    gt(pointerCodesize, end), // Within bounds.\\n                    iszero(gt(start, end)) // Valid range.\\n                )\\n            ) {\\n                // Store the function selector of `ReadOutOfBounds()`.\\n                mstore(0x00, 0x84eb0dd1)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            let size := sub(end, start)\\n\\n            // Get the pointer to the free memory and allocate\\n            // enough 32-byte words for the data and the length of the data,\\n            // then copy the code to the allocated memory.\\n            // Masking with 0xffe0 will suffice, since contract size is less than 16 bits.\\n            data := mload(0x40)\\n            mstore(0x40, add(data, and(add(size, 0x3f), 0xffe0)))\\n            mstore(data, size)\\n            mstore(add(add(data, 0x20), size), 0) // Zeroize the last slot.\\n            extcodecopy(pointer, add(data, 0x20), add(start, DATA_OFFSET), size)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37b70d6747e5ddbde738b39d1463ea18050dada568141c5cfd45317ef962d619\",\"license\":\"MIT\"},\"solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    mapping(address => uint256) internal _balanceOf;\\n\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\n        require((owner = _ownerOf[id]) != address(0), \\\"NOT_MINTED\\\");\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        return _balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _balanceOf[from]--;\\n\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            _balanceOf[owner]--;\\n        }\\n\\n        delete _ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721TokenReceiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x04af19f16f00ba65ae168d6d10da5210dc18da6bcec6974dccf984ba388aa22d\",\"license\":\"AGPL-3.0-only\"},\"src/BIP39.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ncontract BIP39 {\\n    string constant public language = \\\"english\\\";\\n    string[2048] public wordlist;\\n    bool public finalized;\\n    address private deployer;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    modifier onlyDeployer {\\n        require(msg.sender == deployer, \\\"only deployer\\\");\\n        _;\\n    }\\n\\n    function commitWords(string[] memory _wordsChunk, uint256 _offset) external onlyDeployer {\\n        require(!finalized, \\\"finalized\\\");\\n        require(_offset + _wordsChunk.length - 1 < 2048, \\\"index too high\\\");\\n        for (uint256 i = 0; i < _wordsChunk.length; i++) {\\n            wordlist[_offset + i] = _wordsChunk[i];\\n        }\\n    }\\n\\n    function finalizeWords() external onlyDeployer {\\n        finalized = true;\\n    }\\n\\n    function getWordlist() external view returns (string[2048] memory) {\\n        return wordlist;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                BIP39\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function entropyToMnemonic(bytes memory entropy) public pure returns (uint[] memory) {\\n        bytes32 hashedEntropy = sha256(entropy);\\n        string memory binaryEntropy = \\\"\\\";\\n        for (uint i = 0; i < entropy.length; i++) {\\n            binaryEntropy = string(abi.encodePacked(binaryEntropy, uintToBinaryString(uint8(entropy[i]), 8)));\\n        }\\n        string memory binaryChecksum = substring(uintToBinaryString(uint256(hashedEntropy), 256), 0, entropy.length * 8 / 4);\\n        string memory binaryString = string(abi.encodePacked(binaryEntropy, binaryChecksum));\\n\\n        uint mnemonicLength = (entropy.length * 8 + entropy.length / 4 + 7) / 11;\\n\\n        uint[] memory mnemonicIndices = new uint[](mnemonicLength);\\n        for (uint i = 0; i < mnemonicLength; i++) {\\n            uint index = binaryToUint(substring(binaryString, i * 11, min((i+1) * 11, bytes(binaryString).length)));\\n            mnemonicIndices[i] = index;\\n        }\\n        return mnemonicIndices;\\n    }\\n\\n\\n    function entropyToMnemonicString(bytes memory entropy) public view returns (string[] memory) {\\n        return indicesToWords(entropyToMnemonic(entropy));\\n    }\\n\\n    function mnemonicToEntropy(uint[] memory wordIndices) public pure returns (bytes memory) {\\n        require(wordIndices.length >= 3 && wordIndices.length <= 24 && wordIndices.length % 3 == 0, \\\"Invalid word count\\\");\\n\\n        uint concatLenBits = wordIndices.length * 11;\\n        bytes memory concatBits = new bytes(concatLenBits);\\n\\n        for (uint wordIndex = 0; wordIndex < wordIndices.length; wordIndex++) {\\n            uint ndx = wordIndices[wordIndex];\\n\\n            for (uint i = 0; i < 11; i++) {\\n                bool isOne = (ndx & (1 << (10 - i))) != 0;\\n                concatBits[(wordIndex * 11) + i] = isOne ? bytes1(uint8(1)) : bytes1(uint8(0));\\n            }\\n        }\\n\\n        uint checksumLengthBits = concatLenBits / 33;\\n        uint entropyLengthBits = concatLenBits - checksumLengthBits;\\n\\n        bytes memory entropy = new bytes(entropyLengthBits / 8);\\n        for (uint i = 0; i < entropy.length; i++) {\\n            for (uint j = 0; j < 8; j++) {\\n                if (uint8(concatBits[(i * 8) + j]) == 1) {\\n                    entropy[i] = bytes1(uint8(entropy[i]) | uint8(1 << (7 - j)));\\n                }\\n            }\\n        }\\n\\n        bytes32 hashBytes = sha256(entropy);\\n\\n        for (uint i = 0; i < checksumLengthBits; i++) {\\n            require(\\n                uint8(concatBits[entropyLengthBits + i]) == uint8(uint8(hashBytes[i / 8]) >> (7 - i % 8) & 1),\\n                \\\"Failed checksum\\\"\\n            );\\n        }\\n\\n        return entropy;\\n    }\\n\\n    function generateMnemonic(uint256 words) public view returns (uint[] memory) {\\n        require(words >= 3 && words <= 24 && words % 3 == 0, \\\"Invalid word count\\\");\\n        bytes memory entropy = generateEntropy(words);\\n        uint[] memory mnemonicIndices = entropyToMnemonic(entropy);\\n        return mnemonicIndices;\\n    }\\n\\n    function generateMnemonic(uint256 words, bytes memory entropy) public pure returns (uint[] memory) {\\n        require(words >= 3 && words <= 24 && words % 3 == 0, \\\"Invalid word count\\\");\\n        uint[] memory mnemonicIndices = entropyToMnemonic(entropy);\\n        return mnemonicIndices;\\n    }\\n\\n    function generateMnemonicString(uint256 words) public view returns (string[] memory) {\\n        return indicesToWords(generateMnemonic(words));\\n    }\\n\\n    function generateMnemonicString(uint256 words, bytes memory entropy) public view returns (string[] memory) {\\n        return indicesToWords(generateMnemonic(words, entropy));\\n    }\\n\\n    function indicesToWords(uint256[] memory indices) public view returns (string[] memory) {\\n        string[] memory words = new string[](indices.length);\\n        for (uint index; index < indices.length; index++) {\\n            words[index] = wordlist[indices[index]];\\n        }\\n        return words;\\n    }\\n\\n    function generateEntropy(uint256 words) public view returns (bytes memory) {\\n        require(words >= 3 && words <= 24 && words % 3 == 0, \\\"Invalid word count\\\");\\n\\n        bytes32 totalEntropy = keccak256(abi.encodePacked(\\n            tx.origin,\\n            blockhash(block.number - 1),\\n            block.timestamp,\\n            gasleft()\\n        ));\\n\\n        uint256 bits = words / 3 * 32;\\n        uint256 bytesLength = bits / 8;\\n\\n        bytes memory entropy = new bytes(bytesLength);\\n        for (uint i = 0; i < bytesLength; i++) {\\n            entropy[i] = totalEntropy[i];\\n        }\\n        return entropy;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                Utility\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function substring(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint i = startIndex; i < endIndex; i++) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n\\n    function uintToBinaryString(uint256 x, uint256 length) internal pure returns (string memory) {\\n        bytes memory result = new bytes(length);\\n        for (uint i = 0; i < length; i++) {\\n            uint8 b = uint8(uint(x) >> (length - 1 - i));\\n            result[i] = b % 2 == 0 ? bytes1(uint8(48)) : bytes1(uint8(49));  // 48 and 49 are '0' and '1' in ASCII\\n        }\\n        return string(result);\\n    }\\n\\n    function binaryToUint(string memory binaryString) internal pure returns (uint) {\\n        bytes memory binaryBytes = bytes(binaryString);\\n        uint result = 0;\\n        for (uint i = 0; i < binaryBytes.length; i++) {\\n            if (binaryBytes[i] == '1') {\\n                result += 2**(binaryBytes.length - i - 1);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function min(uint a, uint b) private pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n}\",\"keccak256\":\"0x528430e95803f9c283b3e3a821535ff2733b45066f0db095cf62ff9c985d20b3\",\"license\":\"UNLICENSED\"},\"src/SeedPoems.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"solady/src/utils/SSTORE2.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./BIP39.sol\\\";\\nimport \\\"./SeedPoemsAdmin.sol\\\";\\nimport {Render} from \\\"./libraries/Render.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                               seek                                 //\\n//                               poet                                 //\\n//                               seed                                 //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                       0xfff.eth    //\\n//                                                                    //\\n////////////////////////////////////////////////////////////////////////\\n\\ncontract SeedPoems is BIP39, SeedPoemsAdmin, ReentrancyGuard {\\n    struct Seed {\\n        uint256[] indices;\\n        bytes entropy;\\n        bool bound;\\n    }\\n\\n    mapping(uint256 => Seed) public seeds;\\n    mapping(bytes32 => bool) public isEntropyMinted;\\n\\n    address private font;\\n\\n    constructor() SeedPoemsAdmin() {\\n        uint256[] memory seedIndices = new uint256[](3);\\n        seedIndices[0] = 1560; // seek\\n        seedIndices[1] = 1337; // poet\\n        seedIndices[2] = 1559; // seed\\n        _mintPoem(seedIndices, msg.sender, false);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 MINT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mintPoem(\\n        uint256[] memory seedIndices,\\n        address to,\\n        bool bound\\n    ) internal {\\n        uint id = ++totalSupply;\\n\\n        // Keep track of words minted\\n        totalWords += seedIndices.length;\\n        require(\\n            totalWords <= MAX_WORD_SUPPLY,\\n            \\\"MINTABLE_WORD_LIMIT_REACHED_2048\\\"\\n        );\\n\\n        // This generates the entropy from the seed indices\\n        // and simultaneously validates the seed.\\n        bytes memory entropy = mnemonicToEntropy(seedIndices);\\n\\n        // hash entropy to check if it has been minted\\n        bytes32 entropyHash = keccak256(entropy);\\n        require(!isEntropyMinted[entropyHash], \\\"MNEMONIC_ALREADY_MINTED\\\");\\n        isEntropyMinted[entropyHash] = true;\\n\\n        // Store the seed\\n        seeds[id] = Seed({\\n            indices: seedIndices,\\n            entropy: entropy,\\n            bound: bound\\n        });\\n\\n        // Mint the token\\n        _mint(to, id);\\n    }\\n\\n    function mint(\\n        uint256[] memory seedIndices\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        publicMintChecks(seedIndices.length)\\n    {\\n        _mintPoem(seedIndices, msg.sender, false);\\n    }\\n\\n    function mintArtist(\\n        uint256[] memory seedIndices,\\n        address to,\\n        bool bound\\n    )\\n        external\\n        payable\\n        onlyOwner\\n        ownerMintChecks(seedIndices.length)\\n        nonReentrant\\n    {\\n        _mintPoem(seedIndices, to, bound);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 BINDING\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * This method allows a seed poem to be bound to a specific\\n     * address that is derived from the seed itself.\\n     * @param id tokenId of the poem to be bound\\n     */\\n    function bind(\\n        uint256 id,\\n        address to /*, message, signature, address */\\n    ) public {\\n        require(ownerOf(id) == msg.sender, \\\"ONLY_OWNER\\\");\\n        transferFrom(msg.sender, to, id);\\n        seeds[id].bound = true;\\n        // TODO: require valid signature signed offchain by the artist's \\\"validator\\\"\\n        revert('IMPLEMENT_ME');\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public override {\\n        require(!seeds[id].bound, \\\"BOUND\\\");\\n        super.transferFrom(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public override {\\n        require(!seeds[id].bound, \\\"BOUND\\\");\\n        super.safeTransferFrom(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public override {\\n        require(!seeds[id].bound, \\\"BOUND\\\");\\n        super.safeTransferFrom(from, to, id, data);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 VIEW\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Intended to be used offchain\\n     */\\n    function getMintedIndices() external view returns (uint256[] memory) {\\n        uint256[] memory mintedIndicesArray = new uint256[](totalWords);\\n        uint words = 0;\\n        for (uint i = 0; i < totalSupply; i++) {\\n            for (uint j = 0; j < seeds[i].indices.length; j++) {\\n                mintedIndicesArray[words++] = seeds[i].indices[j];\\n            }\\n        }\\n        return mintedIndicesArray;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function tokenURI(\\n        uint256 _tokenId\\n    ) public view override returns (string memory) {\\n        require(_ownerOf[_tokenId] != address(0), \\\"NOT_MINTED\\\");\\n        return\\n            Render.tokenURI(\\n                _tokenId,\\n                indicesToWords(seeds[_tokenId].indices),\\n                seeds[_tokenId].entropy,\\n                getFont()\\n            );\\n    }\\n\\n    function renderSVG(uint256 _tokenId) external view returns (string memory) {\\n        return\\n            Render.renderSVG(\\n                indicesToWords(seeds[_tokenId].indices),\\n                seeds[_tokenId].entropy,\\n                getFont()\\n            );\\n    }\\n\\n    function renderSVGFromWords(\\n        uint256[] memory seedIndices\\n    ) external view returns (string memory) {\\n        bytes memory entropy = mnemonicToEntropy(seedIndices);\\n        return\\n            Render.renderSVG(indicesToWords(seedIndices), entropy, getFont());\\n    }\\n\\n    function renderSVGBase64(\\n        uint256 _tokenId\\n    ) external view returns (string memory) {\\n        return\\n            Render.renderSVGBase64(\\n                indicesToWords(seeds[_tokenId].indices),\\n                seeds[_tokenId].entropy,\\n                getFont()\\n            );\\n    }\\n\\n    function renderSVGBase64FromWords(\\n        uint256[] memory seedIndices\\n    ) external view returns (string memory) {\\n        bytes memory entropy = mnemonicToEntropy(seedIndices);\\n        return\\n            Render.renderSVGBase64(\\n                indicesToWords(seedIndices),\\n                entropy,\\n                getFont()\\n            );\\n    }\\n\\n    function renderSVGstatic(\\n        uint256 _tokenId\\n    ) external view returns (string memory) {\\n        return\\n            Render.renderSVGstatic(\\n                indicesToWords(seeds[_tokenId].indices),\\n                seeds[_tokenId].entropy,\\n                getFont()\\n            );\\n    }\\n\\n    function renderSVGstaticFromWords(\\n        uint256[] memory seedIndices\\n    ) external view returns (string memory) {\\n        bytes memory entropy = mnemonicToEntropy(seedIndices);\\n        return\\n            Render.renderSVGstatic(\\n                indicesToWords(seedIndices),\\n                entropy,\\n                getFont()\\n            );\\n    }\\n\\n    function renderSVGBase64static(\\n        uint256 _tokenId\\n    ) external view returns (string memory) {\\n        return\\n            Render.renderSVGBase64static(\\n                indicesToWords(seeds[_tokenId].indices),\\n                seeds[_tokenId].entropy,\\n                getFont()\\n            );\\n    }\\n\\n    function renderSVGBase64staticFromWords(\\n        uint256[] memory seedIndices\\n    ) external view returns (string memory) {\\n        bytes memory entropy = mnemonicToEntropy(seedIndices);\\n        return\\n            Render.renderSVGBase64static(\\n                indicesToWords(seedIndices),\\n                entropy,\\n                getFont()\\n            );\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Font\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    function setFont(\\n        string calldata fontString\\n    )\\n        external\\n        onlyOwner\\n    {\\n        font = SSTORE2.write(bytes(fontString));\\n    }\\n\\n    function getFont() public view returns (string memory) {\\n        return string(abi.encodePacked(SSTORE2.read(font)));\\n    }\\n}\\n\",\"keccak256\":\"0x60a09e855dd9375c22dc39c09d0bb955c6bb8d5bd29706c9466a13d55afbbfab\",\"license\":\"UNLICENSED\"},\"src/SeedPoemsAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"solmate/src/tokens/ERC721.sol\\\";\\nimport \\\"solady/src/auth/Ownable.sol\\\";\\n\\nerror IncorrectPrice();\\nerror MaxSupply();\\nerror Paused();\\nerror ReserveMintingDisabled();\\nerror MaxClaimed();\\nerror NoReserveForAddress();\\nerror MaxReserveClaim();\\nerror MaxPublicSupply();\\nerror InvalidProof();\\n\\nabstract contract SeedPoemsAdmin is ERC721, Ownable {\\n\\n    uint256 public constant MAX_WORD_SUPPLY = 2048;\\n    uint256 public constant ARTIST_ALLOTMENT = 408; // 20% of words\\n    uint256 public constant WORD_SUPPLY = MAX_WORD_SUPPLY - ARTIST_ALLOTMENT;\\n    uint256 public constant PRICE = 0.03 ether;\\n\\n    uint256 public totalSupply;\\n\\n    uint256 public totalWords;\\n    uint256 public publicClaimed;\\n    mapping (address => uint) reserve;\\n\\n    bytes32 public reserveRoot;\\n\\n    bool public mintReserveActive = true;\\n    bool public mintingPaused = true;\\n\\n    constructor () ERC721(\\\"Seed Poems\\\", \\\"SEED\\\") {\\n        _initializeOwner(msg.sender);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                  Mint\\n    //////////////////////////////////////////////////////////////*/\\n\\n    modifier publicMintChecks(uint256 words) {\\n        if (totalWords + words > MAX_WORD_SUPPLY) revert MaxSupply();\\n        if (mintingPaused) revert Paused();\\n        if (publicClaimed + words > WORD_SUPPLY) revert MaxPublicSupply();\\n        if (msg.value != PRICE) revert IncorrectPrice();\\n        publicClaimed += words;\\n        _;\\n    }\\n\\n    modifier ownerMintChecks(uint256 words) {\\n        if (totalWords + words > MAX_WORD_SUPPLY) revert MaxSupply();\\n        _;\\n    }\\n\\n    /// @notice Pause/Unpause minting\\n    function setPause(bool value) public onlyOwner {\\n        mintingPaused = value;\\n    }\\n\\n    /// @notice Withdraws balance to address\\n    function withdraw(address payable _to) public onlyOwner {\\n        (bool success,) = _to.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x66b9af14dce570e9d2c7ddcefd40a3acffb6a58dd401775b5b44267f7d1fcb71\",\"license\":\"UNLICENSED\"},\"src/libraries/Background.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {SVG} from \\\"./SVG.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Background {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function render(\\n        string memory backgroundColor\\n    ) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"rect\\\",\\n                SVG.rectAttributes({\\n                    _width: \\\"100%\\\",\\n                    _height: \\\"100%\\\",\\n                    _fill: backgroundColor,\\n                    _attributes: \\\"\\\"\\n                })\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5f0c98eba8890f01c0c8dbddb311ed3f8012d92daedee16ea84db94c3bb83ea9\",\"license\":\"Unlicense\"},\"src/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    function encode(string memory _data) internal pure returns (string memory) {\\n        return encode(bytes(_data));\\n    }\\n\\n    function encode(bytes memory _data) internal pure returns (string memory) {\\n        if (_data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((_data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := _data\\n            let endPtr := add(dataPtr, mload(_data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(_data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x298c5050ef28c296db0e2f796e4c2747e8e014881517728e072fc15fdfc6c555\",\"license\":\"MIT\"},\"src/libraries/Effect.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {SVG} from \\\"./SVG.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Effect {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function vhsFilter(\\n        uint256 vhsLevel,\\n        uint256 distortionLevel,\\n        bool invert,\\n        bool animate\\n    ) internal pure returns (string memory) {\\n        string memory colorMatrix = invert\\n            ? \\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.35 0\\\"\\n            : \\\"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.35 0\\\";\\n        return\\n            string.concat(\\n                '<defs><filter id=\\\"vhs\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"616\\\" height=\\\"889\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                (\\n                    vhsLevel == 1 ? \\\"-6\\\" : vhsLevel == 2 ? \\\"-9\\\" : vhsLevel == 3\\n                        ? \\\"-10\\\"\\n                        : /*l4+*/ \\\"-12\\\"\\n                ),\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"textBlur_pass1\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                vhsLevel == 1 ? \\\"-3\\\" : vhsLevel == 2 ? \\\"-4.5\\\" : vhsLevel == 3\\n                    ? \\\"-5\\\"\\n                    : /*l4+*/ \\\"-6\\\",\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"textBlur_pass1\\\" result=\\\"textBlur_pass2\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                vhsLevel == 1 ? \\\"3\\\" : vhsLevel == 2 ? \\\"4.5\\\" : vhsLevel == 3\\n                    ? \\\"5\\\"\\n                    : /*l4+*/ \\\"6\\\",\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"textBlur_pass2\\\" result=\\\"textBlur_pass3\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                vhsLevel == 1 ? \\\"-6\\\" : vhsLevel == 2 ? \\\"-9\\\" : vhsLevel == 3\\n                    ? \\\"-10\\\"\\n                    : /*l4+*/ \\\"-12\\\",\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"textBlur_pass3\\\" result=\\\"textBlur_pass4\\\" /><feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"textBlur_pass4\\\" result=\\\"shape\\\" /><feGaussianBlur stdDeviation=\\\"',\\n                vhsLevel == 1 ? \\\"3.5\\\" : vhsLevel == 2 ? \\\"4\\\" : vhsLevel == 3\\n                    ? \\\"4.5\\\"\\n                    : /*l4+*/ \\\"5\\\",\\n                '\\\" result=\\\"textBlur_pass5\\\" />',\\n                '<feTurbulence baseFrequency=\\\".015\\\" type=\\\"fractalNoise\\\" />',\\n                '<feColorMatrix type=\\\"hueRotate\\\" values=\\\"0\\\">',\\n                (\\n                    animate\\n                        ? '<animate attributeName=\\\"values\\\" from=\\\"0\\\" to=\\\"360\\\" dur=\\\"16s\\\" repeatCount=\\\"indefinite\\\" />'\\n                        : \\\"\\\"\\n                ),\\n                \\\"</feColorMatrix>\\\",\\n                '<feDisplacementMap in=\\\"textBlur_pass5\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"B\\\" scale=\\\"',\\n                distortionLevel == 1 ? \\\"10\\\" : distortionLevel == 2\\n                    ? \\\"20\\\"\\n                    : \\\"22\\\",\\n                '\\\">',\\n                (\\n                    animate\\n                        ? (\\n                            string.concat(\\n                                '<animate attributeName=\\\"scale\\\" values=\\\"',\\n                                distortionLevel == 1\\n                                    ? \\\"10;20;15;25;15;20;10\\\"\\n                                    : distortionLevel == 2\\n                                    ? \\\"20;30;30;20\\\"\\n                                    : \\\"22:38:28:38:22\\\",\\n                                '\\\" dur=\\\"16s\\\" repeatCount=\\\"indefinite\\\" />'\\n                            )\\n                        )\\n                        : \\\"\\\"\\n                ),\\n                \\\"</feDisplacementMap></filter></defs>\\\"\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xe1cae91462baa5a9a8e82c06df3fac3073247eaa9e60ce167c32ab0a93024c94\",\"license\":\"Unlicense\"},\"src/libraries/Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Base64} from \\\"./Base64.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Metadata {\\n    string constant JSON_BASE64_HEADER = \\\"data:application/json;base64,\\\";\\n    string constant SVG_XML_BASE64_HEADER = \\\"data:image/svg+xml;base64,\\\";\\n\\n    function encodeMetadata(\\n        uint256 _tokenId,\\n        string memory _name,\\n        string memory _description,\\n        string memory _attributes,\\n        string memory _backgroundColor,\\n        string memory _svg,\\n        string memory _animation\\n    ) internal pure returns (string memory) {\\n        string memory metadata = string.concat(\\n            \\\"{\\\",\\n            Util.keyValue(\\\"tokenId\\\", Util.uint256ToString(_tokenId)),\\n            \\\",\\\",\\n            Util.keyValue(\\\"name\\\", _name),\\n            \\\",\\\",\\n            Util.keyValue(\\\"description\\\", _description),\\n            \\\",\\\",\\n            Util.keyValueNoQuotes(\\\"attributes\\\", _attributes),\\n            \\\",\\\",\\n            Util.keyValue(\\\"backgroundColor\\\", _backgroundColor),\\n            \\\",\\\",\\n            Util.keyValue(\\\"image\\\", _encodeSVG(_svg)),\\n            \\\",\\\",\\n            Util.keyValue(\\\"animation_url\\\", _encodeSVG(_animation)),\\n            \\\"}\\\"\\n        );\\n\\n        return _encodeJSON(metadata);\\n    }\\n\\n    /// @notice base64 encode json\\n    /// @param _json, stringified json\\n    /// @return string, bytes64 encoded json with prefix\\n    function _encodeJSON(\\n        string memory _json\\n    ) internal pure returns (string memory) {\\n        return string.concat(JSON_BASE64_HEADER, Base64.encode(_json));\\n    }\\n\\n    /// @notice base64 encode svg\\n    /// @param _svg, stringified json\\n    /// @return string, bytes64 encoded svg with prefix\\n    function _encodeSVG(\\n        string memory _svg\\n    ) internal pure returns (string memory) {\\n        return string.concat(SVG_XML_BASE64_HEADER, Base64.encode(bytes(_svg)));\\n    }\\n}\\n\",\"keccak256\":\"0xeffd26a54572b13e908c4ee3509887451b9741a11c49ab98462185eb802c827b\",\"license\":\"Unlicense\"},\"src/libraries/Render.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Metadata} from \\\"./Metadata.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\nimport {Traits} from \\\"./Traits.sol\\\";\\nimport {Background} from \\\"./Background.sol\\\";\\nimport {TextLine} from \\\"./TextLine.sol\\\";\\nimport {Traits} from \\\"./Traits.sol\\\";\\nimport {SVG} from \\\"./SVG.sol\\\";\\nimport {Effect} from \\\"./Effect.sol\\\";\\n\\nlibrary Render {\\n    string public constant description = \\\"Seed Poems\\\";\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                TOKENURI\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function tokenURI(\\n        uint256 _tokenId,\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        string memory wordString = words[0];\\n        for (uint i = 1; i < words.length; i++) {\\n            wordString = string.concat(wordString, \\\" \\\", words[i]);\\n        }\\n        return\\n            Metadata.encodeMetadata({\\n                _tokenId: _tokenId,\\n                _name: wordString,\\n                _description: wordString,\\n                _attributes: Traits.attributes(words, entropy),\\n                _backgroundColor: Traits.backgroundColor(words, entropy),\\n                _svg: _svg(words, entropy, base64font, false),\\n                _animation: _svg(words, entropy, base64font, true)\\n            });\\n    }\\n\\n    function renderSVG(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return _svg(words, entropy, base64font, true);\\n    }\\n\\n    function renderSVGBase64(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return Metadata._encodeSVG(_svg(words, entropy, base64font, true));\\n    }\\n\\n    function renderSVGstatic(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return _svg(words, entropy, base64font, false);\\n    }\\n\\n    function renderSVGBase64static(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return Metadata._encodeSVG(_svg(words, entropy, base64font, false));\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _svg(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font,\\n        bool animate\\n    ) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"svg\\\",\\n                SVG.svgAttributes(),\\n                string.concat(\\n                    \\\"<defs><style>\\\",\\n                    '@font-face {font-family: \\\"EBGI\\\";src: url(\\\"',\\n                    base64font,\\n                    '\\\");',\\n                    // \\\"text {text-transform: uppercase;\\\"\\n                    \\\"}</style>\\\",\\n                    Effect.vhsFilter(\\n                        words.length <= 3 ? 4 : words.length <= 6\\n                            ? 3\\n                            : words.length <= 9\\n                            ? 2\\n                            : 1,\\n                        Traits.distortionType(entropy),\\n                        keccak256(\\n                            abi.encodePacked(Traits.textColor(words, entropy))\\n                        ) == keccak256(abi.encodePacked(\\\"#000000\\\")),\\n                        animate\\n                    ),\\n                    \\\"</defs>\\\"\\n                ),\\n                Background.render(Traits.backgroundColor(words, entropy)),\\n                SVG.element(\\n                    \\\"g\\\",\\n                    string.concat(\\n                        SVG.filterAttribute(\\\"vhs\\\"),\\n                        ' transform-origin: 50% 50%; ',\\n                        'transform=\\\"rotate(',\\n                        Traits.textRotation(words, entropy),\\n                        ')\\\"'\\n                    ),\\n                    _renderText(\\n                        words,\\n                        entropy,\\n                        Traits.textColor(words, entropy)\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _renderText(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory textColor\\n    ) public pure returns (string memory) {\\n        uint256 wordCount = words.length;\\n        uint8 charsPerLine = 20;\\n        if (wordCount == 21) charsPerLine = 19;\\n        else if (wordCount == 18) charsPerLine = 18;\\n        else if (wordCount == 15) charsPerLine = 17;\\n        else if (wordCount == 12) charsPerLine = 16;\\n        else if (wordCount == 9) charsPerLine = 15;\\n        else if (wordCount == 6) charsPerLine = 12;\\n        else if (wordCount == 3) charsPerLine = 9;\\n        else if (wordCount != 24) revert(\\\"Invalid words per line\\\");\\n\\n        // the worst-case scenario is one word per line\\n        string[] memory tempLines = new string[](wordCount);\\n        string memory line;\\n        uint256 lineCount = 0;\\n\\n        for (uint256 i = 0; i < words.length; i++) {\\n            if (\\n                bytes(line).length != 0 &&\\n                bytes(line).length + bytes(words[i]).length + 1 > charsPerLine\\n            ) {\\n                tempLines[lineCount] = line;\\n                lineCount++;\\n                line = words[i];\\n            } else {\\n                if (bytes(line).length != 0) {\\n                    line = string(abi.encodePacked(line, \\\" \\\", words[i]));\\n                } else {\\n                    line = words[i];\\n                }\\n            }\\n\\n            if (i == words.length - 1) {\\n                tempLines[lineCount] = line;\\n            }\\n        }\\n\\n        string memory fontSize = \\\"125\\\";\\n        uint256 yDistance = 120;\\n        if (wordCount == 6) {\\n            fontSize = \\\"93\\\";\\n            yDistance = 93;\\n        } else if (wordCount == 9) {\\n            fontSize = \\\"75\\\";\\n            yDistance = 75;\\n        } else if (wordCount == 12) {\\n            fontSize = \\\"75\\\";\\n            yDistance = 75;\\n        } else if (wordCount == 15) {\\n            fontSize = \\\"65\\\";\\n            yDistance = 65;\\n        } else if (wordCount == 18) {\\n            fontSize = \\\"62\\\";\\n            yDistance = 62;\\n        } else if (wordCount == 21) {\\n            fontSize = \\\"57\\\";\\n            yDistance = 57;\\n        } else if (wordCount == 24) {\\n            fontSize = \\\"55\\\";\\n            yDistance = 55;\\n        }\\n\\n        string memory svgTexts;\\n        for (uint256 i = 0; i <= lineCount; i++) {\\n            svgTexts = string.concat(\\n                svgTexts,\\n                TextLine.render(\\n                    tempLines[i],\\n                    90,\\n                    (444 - (lineCount * yDistance) / 2) + (i * yDistance),\\n                    fontSize,\\n                    textColor\\n                )\\n            );\\n        }\\n\\n        return SVG.element(\\\"g\\\", \\\"\\\", svgTexts);\\n    }\\n}\\n\",\"keccak256\":\"0xbf7955267d90038e9b6ccf03e028df449e684bf1e9c80a7ea4b05d937d5e5fc2\",\"license\":\"Unlicense\"},\"src/libraries/SVG.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary SVG {\\n    /*//////////////////////////////////////////////////////////////\\n                                 ELEMENT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes\\n    ) internal pure returns (string memory) {\\n        return string.concat(\\\"<\\\", _type, \\\" \\\", _attributes, \\\"/>\\\");\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _children\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<\\\",\\n                _type,\\n                \\\" \\\",\\n                _attributes,\\n                \\\">\\\",\\n                _children,\\n                \\\"</\\\",\\n                _type,\\n                \\\">\\\"\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2\\n    ) internal pure returns (string memory) {\\n        return element(_type, _attributes, string.concat(_child1, _child2));\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(_child1, _child2, _child3)\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(_child1, _child2, _child3, _child4)\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(_child1, _child2, _child3, _child4, _child5)\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(\\n                    _child1,\\n                    _child2,\\n                    _child3,\\n                    _child4,\\n                    _child5,\\n                    _child6\\n                )\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6,\\n        string memory _child7\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(\\n                    _child1,\\n                    _child2,\\n                    _child3,\\n                    _child4,\\n                    _child5,\\n                    _child6,\\n                    _child7\\n                )\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6,\\n        string memory _child7,\\n        string memory _child8\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(\\n                    _child1,\\n                    _child2,\\n                    _child3,\\n                    _child4,\\n                    _child5,\\n                    _child6,\\n                    _child7,\\n                    _child8\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ATTRIBUTES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function svgAttributes() internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                'xmlns=\\\"http://www.w3.org/2000/svg\\\" '\\n                'xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" '\\n                'width=\\\"100%\\\" '\\n                'height=\\\"100%\\\" '\\n                'viewBox=\\\"0 0 616 889\\\" ',\\n                'preserveAspectRatio=\\\"xMidYMid meet\\\" ',\\n                'fill=\\\"none\\\" '\\n            );\\n    }\\n\\n    function textAttributes(\\n        string[2] memory _coords,\\n        string memory _fontSize,\\n        string memory _fontFamily,\\n        string memory _fill,\\n        string memory _attributes\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"x=\\\",\\n                Util.quote(_coords[0]),\\n                \\\"y=\\\",\\n                Util.quote(_coords[1]),\\n                \\\"font-size=\\\",\\n                Util.quote(string.concat(_fontSize, \\\"px\\\")),\\n                \\\"font-family=\\\",\\n                Util.quote(_fontFamily),\\n                \\\"fill=\\\",\\n                Util.quote(_fill),\\n                \\\" \\\",\\n                _attributes,\\n                \\\" \\\"\\n            );\\n    }\\n\\n    function rectAttributes(\\n        string memory _width,\\n        string memory _height,\\n        string memory _fill,\\n        string memory _attributes\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"width=\\\",\\n                Util.quote(_width),\\n                \\\"height=\\\",\\n                Util.quote(_height),\\n                \\\"fill=\\\",\\n                Util.quote(_fill),\\n                \\\" \\\",\\n                _attributes,\\n                \\\" \\\"\\n            );\\n    }\\n\\n    function filterAttribute(\\n        string memory _id\\n    ) internal pure returns (string memory) {\\n        return string.concat(\\\"filter=\\\", '\\\"', \\\"url(#\\\", _id, \\\")\\\", '\\\" ');\\n    }\\n}\\n\",\"keccak256\":\"0xec7f2f3d4425047a732b6dd274dc2e69b4e1f83837f27887efaa1a8cabe68487\",\"license\":\"Unlicense\"},\"src/libraries/TextLine.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\nimport {SVG} from \\\"./SVG.sol\\\";\\n\\nlibrary TextLine {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function render(\\n        string memory text,\\n        uint256 xOffset,\\n        uint256 yOffset,\\n        string memory fontSize,\\n        string memory textColor\\n    ) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"text\\\",\\n                SVG.textAttributes({\\n                    _fontSize: fontSize,\\n                    _fontFamily: \\\"EBGI, EB Garamond Italic, Garamond Italic, EB Garamond, Garamond, serif\\\",\\n                    _coords: [\\n                        Util.uint256ToString(xOffset),\\n                        Util.uint256ToString(yOffset)\\n                    ],\\n                    _fill: textColor,\\n                    _attributes: 'dy=\\\"0.4em\\\"' // offset text so yCoord aligns with top of text (magic number)\\n                }),\\n                text\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x939b7a08b6a2fbe0274017f33d8ebcafc88055acd0b1f5b5e7c1b7f091e1a190\",\"license\":\"Unlicense\"},\"src/libraries/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Traits {\\n\\n    function distortionTrait(\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        uint256 distortion = distortionType(entropy);\\n        return distortion == 1 ? \\\"Low\\\" : distortion == 2 ? \\\"Medium\\\" : \\\"High\\\";\\n    }\\n\\n    function distortionType(\\n        bytes memory entropy\\n    ) internal pure returns (uint256) {\\n        return (_rarity(entropy, \\\"distortion\\\") % 3) + 1; // 1-3\\n    }\\n\\n    function colorTrait(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string[3] memory color = colorType(words, entropy);\\n        return color[0];\\n    }\\n\\n    function colorType(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string[3] memory) {\\n        return [\\\"Void\\\", \\\"#F9F9F9\\\", \\\"#000000\\\"];\\n    }\\n\\n    function backgroundColor(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string[3] memory color = colorType(words, entropy);\\n        return color[1];\\n    }\\n\\n    function textColor(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string[3] memory color = colorType(words, entropy);\\n        return color[2];\\n    }\\n\\n    function textRotation(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        uint256 rotationSeed = _rarity(entropy, \\\"rotation\\\");\\n        bool isPositive = rotationSeed % 2 == 0;\\n        uint256 degrees = (rotationSeed / 10) % 6;\\n        uint256 float = (rotationSeed / 100) % 1000;\\n        return\\n            string.concat(\\n                isPositive ? \\\"\\\" : \\\"-\\\",\\n                Util.uint256ToString(degrees),\\n                \\\".\\\",\\n                Util.uint256ToString(float)\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 TRAITS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function attributes(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string memory result = \\\"[\\\";\\n        result = string.concat(\\n            result,\\n            _attribute(\\\"Words\\\", Util.uint256ToString(words.length))\\n        );\\n        return string.concat(result, \\\"]\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _attribute(\\n        string memory _traitType,\\n        string memory _value\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"{\\\",\\n                Util.keyValue(\\\"trait_type\\\", _traitType),\\n                \\\",\\\",\\n                Util.keyValue(\\\"value\\\", _value),\\n                \\\"}\\\"\\n            );\\n    }\\n\\n    function _rarity(\\n        bytes memory _seed,\\n        string memory _salt\\n    ) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(_seed, _salt)));\\n    }\\n}\\n\",\"keccak256\":\"0x8411284017562a60014a07926ae6da31c1870baec830bc526d05d5419a551068\",\"license\":\"Unlicense\"},\"src/libraries/Util.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nlibrary Util {\\n    error NumberHasTooManyDigits();\\n\\n    /// @notice wraps a string in quotes and adds a space after\\n    function quote(string memory value) internal pure returns (string memory) {\\n        return string.concat('\\\"', value, '\\\" ');\\n    }\\n\\n    function keyValue(\\n        string memory _key,\\n        string memory _value\\n    ) internal pure returns (string memory) {\\n        return string.concat('\\\"', _key, '\\\":\\\"', _value, '\\\"');\\n    }\\n\\n    function keyValueNoQuotes(\\n        string memory _key,\\n        string memory _value\\n    ) internal pure returns (string memory) {\\n        return string.concat('\\\"', _key, '\\\":', _value);\\n    }\\n\\n    /// @notice converts a tokenId to string and pads to _digits digits\\n    /// @dev tokenId must be less than 10**_digits\\n    /// @param _tokenId, uint256, the tokenId\\n    /// @param _digits, uint8, the number of digits to pad to\\n    /// @return result the resulting string\\n    function uint256ToString(\\n        uint256 _tokenId,\\n        uint8 _digits\\n    ) internal pure returns (string memory result) {\\n        uint256 max = 10 ** _digits;\\n        if (_tokenId >= max) revert NumberHasTooManyDigits();\\n        // add leading zeroes\\n        result = uint256ToString(_tokenId + max);\\n        assembly {\\n            // cut off one character\\n            result := add(result, 1)\\n            // store new length = _digits\\n            mstore(result, _digits)\\n        }\\n    }\\n\\n    /// @notice converts a uint256 to ascii representation, without leading zeroes\\n    /// @param _value, uint256, the value to convert\\n    /// @return result the resulting string\\n    function uint256ToString(\\n        uint256 _value\\n    ) internal pure returns (string memory result) {\\n        if (_value == 0) return \\\"0\\\";\\n\\n        assembly {\\n            // largest uint = 2^256-1 has 78 digits\\n            // reserve 110 = 78 + 32 bytes of data in memory\\n            // (first 32 are for string length)\\n\\n            // get 110 bytes of free memory\\n            result := add(mload(0x40), 110)\\n            mstore(0x40, result)\\n\\n            // keep track of digits\\n            let digits := 0\\n\\n            for {\\n\\n            } gt(_value, 0) {\\n\\n            } {\\n                // increment digits\\n                digits := add(digits, 1)\\n                // go back one byte\\n                result := sub(result, 1)\\n                // compute ascii char\\n                let c := add(mod(_value, 10), 48)\\n                // store byte\\n                mstore8(result, c)\\n                // advance to next digit\\n                _value := div(_value, 10)\\n            }\\n            // go back 32 bytes\\n            result := sub(result, 32)\\n            // store the length\\n            mstore(result, digits)\\n        }\\n    }\\n\\n    function bytes1ToString(\\n        bytes1 _value\\n    ) internal pure returns (string memory) {\\n        return uint256ToString(uint8(_value));\\n    }\\n\\n    function uint8ToString(uint8 _value) internal pure returns (string memory) {\\n        return uint256ToString(_value);\\n    }\\n\\n    /// @notice will revert in any characters are not in [0-9]\\n    function stringToUint256(\\n        string memory _value\\n    ) internal pure returns (uint256 result) {\\n        // 0-9 are 48-57\\n\\n        bytes memory value = bytes(_value);\\n        if (value.length == 0) return 0;\\n        uint256 multiplier = 10 ** (value.length - 1);\\n        uint256 i;\\n        while (multiplier != 0) {\\n            result += uint256((uint8(value[i]) - 48)) * multiplier;\\n            unchecked {\\n                multiplier /= 10;\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function bytes1ToHex(bytes1 _value) internal pure returns (string memory) {\\n        bytes memory result = new bytes(2);\\n        uint8 x = uint8(_value);\\n\\n        result[0] = getHexChar(x >> 4);\\n        result[1] = getHexChar(x % 16);\\n\\n        return string(result);\\n    }\\n\\n    function bytes32ToBytes(bytes32 x) internal pure returns (bytes memory) {\\n        bytes memory bytesString = new bytes(32);\\n        for (uint i = 0; i < 32; i++) {\\n            if (x[i] == 0) {\\n                bytesString[i] = bytes1(0x20);\\n            } else {\\n                bytesString[i] = x[i];\\n            }\\n        }\\n        return abi.encodePacked(bytesString);\\n    }\\n\\n    function bytes32ToString(bytes32 x) internal pure returns (string memory) {\\n        return string(bytes32ToBytes(x));\\n    }\\n\\n    function getHexChar(uint8 _value) internal pure returns (bytes1) {\\n        if (_value < 10) {\\n            return bytes1(_value + 48);\\n        }\\n        _value -= 10;\\n        return bytes1(_value + 97);\\n    }\\n\\n    function stringToBytes1(\\n        string memory _value\\n    ) internal pure returns (bytes1 result) {\\n        return bytes1(uint8(stringToUint256(_value)));\\n    }\\n\\n    function getRGBString(\\n        bytes memory _palette,\\n        uint256 _pos\\n    ) internal pure returns (string memory result) {\\n        return\\n            string.concat(\\n                \\\"#\\\",\\n                Util.bytes1ToHex(_palette[3 * _pos]),\\n                Util.bytes1ToHex(_palette[3 * _pos + 1]),\\n                Util.bytes1ToHex(_palette[3 * _pos + 2])\\n            );\\n    }\\n\\n    function getRGBString(\\n        bytes3 _color\\n    ) internal pure returns (string memory result) {\\n        return\\n            string.concat(\\n                \\\"#\\\",\\n                Util.bytes1ToHex(_color[0]),\\n                Util.bytes1ToHex(_color[1]),\\n                Util.bytes1ToHex(_color[2])\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x2504c3f999b200d7883c00c73bae04d5fcc305900e015dec580e6ecc50e7a216\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6040608081523462000af0576200001562000af5565b90600a918281526020695365656420506f656d7360b01b818301526200003a62000af5565b60048082526314d1515160e21b838301526108008054610100600160a81b03191633600890811b610100600160a81b031691909117825585519197929590939092916001600160401b03919082811162000a325761080190806200009f835462000b47565b96601f978a89821162000abd575b5050899088831160011462000a535760009262000a47575b50508160011b916000199060031b1c19161790555b805182811162000a32578061080292620000f5845462000b47565b87811162000a00575b50889087831160011462000996576000926200098a575b50508160011b916000199060031b1c19161790555b61080c805461ffff191661010117905533638b78c6d81981905560007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a36001938461080d5587519160808301838110828211176200097557895260039384845287840160603682378451156200096057610618905283518710156200094b576105398a8501528351600210156200094b5761061760608501526108079a620001d68c5462000b9d565b809c558451620001eb61080891825462000bc3565b809155116200090a57835185808210159182620008fd575b82620008f1575b505015620008b9578351600b80820291808304821490151715620007f457620002338262000bd1565b9260008a5b62000809575b5050506021810491828203918211620007f4576200025e82881c62000bd1565b9460008a5b620006e0575b5050898c51865160005b818110620006cd575090806000928101838152039060025afa15620006c2576000519160005b8481106200060c5750505050508151878301208060005261080f9081895260ff8b6000205416620005c9576000528752886000209360ff1994878682541617905589519360608501858110848211176200056c578b52845287840192835289840195600087528b60005261080e89528a6000209451805190848211620005b457680100000000000000008211620005b4578a90875483895580841062000594575b5001866000528a6000208a60005b848110620005815750925050508501935180519384116200056c576200036f855462000b47565b8a8382116200052e575b505089918411600114620004b6579260029492819260ff9795600093620004aa575b5050828a1b92600019911b1c19161790555b019251151591835416911617905533156200047557846000526108039283835260018060a01b03856000205416620004415750336000526108048252836000209081540190558360005252806000203360018060a01b031982541617905551903360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4614d17908162000c448239f35b845162461bcd60e51b8152908101839052600e60248201526d1053149150511657d3525395115160921b6044820152606490fd5b50606492519162461bcd60e51b835282015260116024820152701253959053125117d49150d25412515395607a1b6044820152fd5b0151915038806200039b565b9091889392601f19841692866000528b6000209360005b8d82821062000517575050918593916002989660ff9a98969410620004fc575b50505050811b019055620003ad565b01519060f884600019921b161c1916905538808080620004ed565b8385015187558d98909601959384019301620004cd565b6200055a918760005284826000209181890160051c830193891062000562575b0160051c019062000b84565b388a62000379565b925081926200054e565b60418b634e487b7160e01b6000525260246000fd5b8d845194019381840155018b9062000348565b620005ad90896000528484600020918201910162000b84565b386200033a565b60418c634e487b7160e01b6000525260246000fd5b8a5162461bcd60e51b8152808b018a9052601760248201527f4d4e454d4f4e49435f414c52454144595f4d494e5445440000000000000000006044820152606490fd5b620006236200061c828462000bc3565b8462000c1b565b5160f81c818a1c8d811015620006ad576007908184168203918211620006975786901a901c8c160362000661576200065b9062000b9d565b62000299565b508c5162461bcd60e51b8152808d018c9052600f60248201526e4661696c656420636865636b73756d60881b6044820152606490fd5b5060118f634e487b7160e01b6000525260246000fd5b60328f634e487b7160e01b6000525260246000fd5b8b513d6000823e3d90fd5b888101840151838201528d930162000273565b8651811015620007ee57908a9160005b8281106200070c5750620007049062000b9d565b909162000263565b90809293508a1b828104841483151715620007d9576200073182620007389262000bc3565b8562000c1b565b518c60f891821c146200075c575b50620007529062000b9d565b908b9291620006f0565b62000768838a62000c1b565b51811c90600791838303928311620007c2576200075293928f901b60ff1617901b7fff000000000000000000000000000000000000000000000000000000000000001660001a620007ba848b62000c1b565b539062000746565b505060118f634e487b7160e01b6000525260246000fd5b60118f634e487b7160e01b6000525260246000fd5b62000269565b60118b634e487b7160e01b6000525260246000fd5b8751811015620008b35790818c8c949360051b8a01015160005b84811062000841575050620008389062000b9d565b90919262000238565b83819293949596500384811162000697576000908e901b831615620008ad5750600160f81b5b858402848104871485151715620007c257906200089a6200088e84620008a1959462000bc3565b9160001a918a62000c1b565b5362000b9d565b908c9493929162000823565b62000867565b6200023e565b895162461bcd60e51b8152808a018990526012602482015271125b9d985b1a59081ddbdc990818dbdd5b9d60721b6044820152606490fd5b0615905085386200020a565b6018811115925062000203565b60648989808d519262461bcd60e51b845283015260248201527f4d494e5441424c455f574f52445f4c494d49545f524541434845445f323034386044820152fd5b603289634e487b7160e01b6000525260246000fd5b60328a634e487b7160e01b6000525260246000fd5b604189634e487b7160e01b6000525260246000fd5b01519050388062000115565b60008581528a81209350601f198516905b8b828210620009e9575050908460019594939210620009cf575b505050811b0190556200012a565b015160001960f88460031b161c19169055388080620009c1565b6001859682939686015181550195019301620009a7565b62000a2b90856000528a6000208980860160051c8201928d871062000562570160051c019062000b84565b38620000fe565b604188634e487b7160e01b6000525260246000fd5b015190503880620000c5565b60008581528b81209350601f198516905b8c82821062000aa657505090846001959493921062000a8c575b505050811b019055620000da565b015160001960f88460031b161c1916905538808062000a7e565b600185968293968601518155019501930162000a64565b62000ae891866000528a826000209181870160051c830193871062000562570160051c019062000b84565b388a620000ad565b600080fd5b60408051919082016001600160401b0381118382101762000b1557604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811162000b1557601f01601f191660200190565b90600182811c9216801562000b79575b602083101462000b6357565b634e487b7160e01b600052602260045260246000fd5b91607f169162000b57565b81811062000b90575050565b6000815560010162000b84565b600019811462000bad5760010190565b634e487b7160e01b600052601160045260246000fd5b9190820180921162000bad57565b9062000bdd8262000b2b565b60405190601f1990601f01811682016001600160401b0381118382101762000b155760405283825262000c11829462000b2b565b0190602036910137565b90815181101562000c2d570160200190565b634e487b7160e01b600052603260045260246000fdfe6080604090808252600436101561001557600080fd5b60003560e01c90816301ffc9a7146131ee5750806306bddb1914612e4657806306fdde0314612d7a578063081812fc14612d1a5780630908853214612bed578063095ea7b314612af15780630b35610214612ab2578063165d7e8014612a7457806316c6ca971461295d57806317aee9ba146128bf57806318160ddd146128815780631a0823a41461242657806323b872dd1461240f57806325692962146123a55780632a2758be1461234e5780633438c9b31461231257806335585877146122b35780633d92e4f01461227157806340d06d801461223657806342842e0e1461211a57806346623ecd1461207c578063492f7e0414611f875780634c0e5ec914611ee95780634d81e43314611e9257806351cff8d914611e0757806354d1f13d14611da15780635ca2ddf114611cc95780636352211e14611c6e578063665aa64714611c2b57806370a0823114611b62578063715018a614611ae357806378d20fa214611a0457806382f4fd5d146119c65780638d859f3e146119865780638da5cb5b146119145780639524bb44146118d957806395d89b41146117b4578063985e5937146116a85780639fa587ac14611692578063a22cb465146115ba578063a582fc5614611570578063b3f05b971461152d578063b4d7ec71146114ac578063b88d4fde146112e3578063bedb86fb14611266578063c6dc80fb146111f7578063c87b56dd146110bc578063d12a4c9814610fe4578063d3af112c14610fba578063d451a75714610ee2578063d7533f0214610ea6578063d838b1f514610e6b578063e1a283d614610e25578063e985e9c514610da6578063eb60633a14610d5c578063ed9978c714610cd1578063f04e283e14610c09578063f0503e8014610b87578063f0d0779c14610b49578063f1eeb61b14610afa578063f232b8e6146109a9578063f2fde38b146108f6578063f8e93ef9146103375763fee81cf4146102e157600080fd5b346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760209061031b613562565b63389a75e1600c5260005281600c20549051908152f35b600080fd5b506020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325767ffffffffffffffff9160043583811161033257610385903690600401613585565b9161038e61477c565b8251926108089384549461080091826103a782896139f2565b116108cd5760ff61080c5460081c166108a4576108099081546106686103cd83836139f2565b1161087b57666a94d74f430000340361085257906103ea916139f2565b9055610408610807966103fd88546139ff565b8098558451906139f2565b809155116107f6576104198161421c565b948551838701208060005261080f9081855260ff8660002054166107995760005283528360002095600196877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055845192610478846132db565b835283830190815284830191600083528660005261080e855285600020935180519082821161073b5768010000000000000000821161073b578690865483885580841061077c575b500185600052866000208a60005b84811061076a57509250505084019151805191821161073b576104fb826104f585546133c1565b85613a57565b8590601f831160011461068f57918060029492610582979694600092610684575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828c1b9260031b1c19161790555b51151591019060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b61058d3315156147ec565b826000526108039081815273ffffffffffffffffffffffffffffffffffffffff83600020541661062757336000526108048152826000208581540190558360005252600020337fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790553360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a461080d55005b6064908351907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152600e60248201527f414c52454144595f4d494e5445440000000000000000000000000000000000006044820152fd5b01519050388061051c565b82917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08b94169185600052886000209260005b8a828210610725575050916105829897959391856002989694106106ee575b505050811b01905561054d565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690553880806106e1565b8385015186558e979095019493840193016106c2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b89845194019381840155018b906104ce565b610793908860005284846000209182019101613a40565b386104c0565b6064858751907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601760248201527f4d4e454d4f4e49435f414c52454144595f4d494e5445440000000000000000006044820152fd5b5060649151907f08c379a000000000000000000000000000000000000000000000000000000000825280600483015260248201527f4d494e5441424c455f574f52445f4c494d49545f524541434845445f323034386044820152fd5b600488517f99b5cb1d000000000000000000000000000000000000000000000000000000008152fd5b600488517f6bb8aab8000000000000000000000000000000000000000000000000000000008152fd5b600486517f9e87fac8000000000000000000000000000000000000000000000000000000008152fd5b600486517fb36c1284000000000000000000000000000000000000000000000000000000008152fd5b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257610928613562565b61093061385a565b8060601b1561099b5773ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739278181547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a355005b637448fbae6000526004601cfd5b5034610332576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257600435918260005261080e8083528160002082519081858254918281520191600052856000209060005b87828210610ae6575050505090610a2081610a259303826132f7565b614581565b9360005282526000600182822001610a3b614c3e565b94610a72845196879384937f0403faa400000000000000000000000000000000000000000000000000000000855260048501614bde565b0381739A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE5af4928315610adb57600093610ab2575b50610aae90519282849384528301906134fc565b0390f35b610aae919350610ad4903d806000833e610acc81836132f7565b810190614b05565b9290610a9a565b50513d6000823e3d90fd5b835485529093019260019283019201610a04565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760209060043560005261080f825260ff81600020541690519015158152f35b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760209061080b549051908152f35b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760043560005261080e602052806000209060ff6002825193610be785610be081600185016137a5565b03866132f7565b015416610bfd82519383859485528401906134fc565b90151560208301520390f35b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257610c3b613562565b610c4361385a565b63389a75e1600c52806000526020600c209081544211610cc357600073ffffffffffffffffffffffffffffffffffffffff9255167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739278181547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a355005b636f5e88186000526004601cfd5b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325780518181019181831067ffffffffffffffff84111761073b57610aae928152600782527f656e676c697368000000000000000000000000000000000000000000000000006020830152519182916020835260208301906134fc565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257610aae90610d9b60043561450d565b905191829182613661565b503461033257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257602090610de0613562565b610de861353f565b9073ffffffffffffffffffffffffffffffffffffffff8091166000526108068452826000209116600052825260ff81600020541690519015158152f35b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760209060ff61080c5460081c1690519015158152f35b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257602090516106688152f35b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257602090516202a3008152f35b5034610332576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257600435918260005261080e8083528160002082519081858254918281520191600052856000209060005b87828210610fa6575050505090610a2081610f599303826132f7565b9360005282526000600182822001610f6f614c3e565b94610a72845196879384937ffcb7003500000000000000000000000000000000000000000000000000000000855260048501614bde565b835485529093019260019283019201610f3d565b503461033257610aae90610fd9610a20610fd33661374a565b90614549565b90519182918261369c565b5034610332576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257600435918260005261080e8083528160002082519081858254918281520191600052856000209060005b878282106110a8575050505090610a208161105b9303826132f7565b9360005282526000600182822001611071614c3e565b94610a72845196879384937f74a06ecf00000000000000000000000000000000000000000000000000000000855260048501614bde565b83548552909301926001928301920161103f565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9181833601126103325760043580600052610803835261112073ffffffffffffffffffffffffffffffffffffffff8360002054161515613892565b8060005261080e908184528260002094835180868854918281520197600052866000209060005b8181106111e357505050600093929161116c82610a20610a72946111c49b03826132f7565b9383865287526001868620016111d4611183614c3e565b9188519a8b9788977f885086390000000000000000000000000000000000000000000000000000000089526004890152608060248901526084880190614b64565b90848783030160448801526137a5565b918483030160648501526134fc565b82548a529888019860019283019201611147565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610332576004359067ffffffffffffffff82116103325761125361124e610aae933690600401613585565b61421c565b90519182916020835260208301906134fc565b346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257600435801515809103610332576112aa61385a565b61080c907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff61ff0083549260081b169116179055600080f35b50346103325760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325761131b613562565b9061132461353f565b9060443560643567ffffffffffffffff81116103325761134890369060040161371c565b90938260005261080e60205261136860ff60028660002001541615614851565b6113738382886148b6565b803b15948515611389575b61138786614aa0565b005b60209395506000859760a485937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f9951998a98899788947f150b7a02000000000000000000000000000000000000000000000000000000009e8f875233600488015273ffffffffffffffffffffffffffffffffffffffff8099166024880152604487015260806064870152816084870152868601378685828601015201168101030193165af19283156114a25750611387927fffffffff0000000000000000000000000000000000000000000000000000000091600091611474575b501614388080808061137e565b611495915060203d811161149b575b61148d81836132f7565b810190614a68565b38611467565b503d611483565b513d6000823e3d90fd5b346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325761080060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825461152773ffffffffffffffffffffffffffffffffffffffff8260081c16331461398d565b16179055005b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760209060ff610800541690519015158152f35b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610332576004359061080082101561033257611253610aae92613414565b503461033257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610332576115f1613562565b90602435908115159182810361033257611666903360005261080660205273ffffffffffffffffffffffffffffffffffffffff8360002095169485600052602052826000209060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b503461033257610aae90610d9b610fd33661374a565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760043567ffffffffffffffff8111610332576116f8903690600401613585565b600061170c6117068361421c565b92614581565b91611715614c3e565b9261174c855194859384937ffcb7003500000000000000000000000000000000000000000000000000000000855260048501614c15565b0381739A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE5af49081156117a95791610aae9260009261178c575b50519182916020835260208301906134fc565b6117a29192503d806000833e610acc81836132f7565b9038611779565b82513d6000823e3d90fd5b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257805160009161080280546117f7816133c1565b808552916001918083169081156118935750600114611835575b50505061182382610aae9403836132f7565b519182916020835260208301906134fc565b600090815294507f7d04e1cf6586d03adf0caf3cfde9ea4be66dcb4ba46a19a422e87945a4f7b23f5b82861061187b57505050611823826020610aae9582010194611811565b8054602087870181019190915290950194810161185e565b610aae9750869350602092506118239491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b82010194611811565b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257602090516101988152f35b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760209073ffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff7487392754915191168152f35b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760209051666a94d74f4300008152f35b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257602090610808549051908152f35b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760043567ffffffffffffffff811161033257600b611a6a611a5b601593369060040161371c565b611a6361385a565b369161338a565b9283519060018201901b6a61000080600a3d393df3001784520191016000f08015611ad55773ffffffffffffffffffffffffffffffffffffffff61081091167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055600080f35b63301164256000526004601cfd5b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257611b1561385a565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739278181547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a355005b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325773ffffffffffffffffffffffffffffffffffffffff611baf613562565b16908115611bce57602091600052610804825280600020549051908152f35b606490517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152fd5b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760209060ff61080c541690519015158152f35b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760209073ffffffffffffffffffffffffffffffffffffffff611cc16004356138f7565b915191168152f35b5034610332576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257600435918260005261080e8083528160002082519081858254918281520191600052856000209060005b87828210611d8d575050505090610a2081611d409303826132f7565b9360005282526000600182822001611d56614c3e565b94610a72845196879384937feb5cf9ab00000000000000000000000000000000000000000000000000000000855260048501614bde565b835485529093019260019283019201611d24565b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325763389a75e1600c523360005260006020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92600080a2005b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760043573ffffffffffffffffffffffffffffffffffffffff811680910361033257600080808093611e6661385a565b47905af1903d15611e8c57611e8590611e7e3d613350565b90516132f7565b1561033257005b50611e85565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610332576004359067ffffffffffffffff821161033257610fd9610a20610aae933690600401613585565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760043567ffffffffffffffff811161033257611f39903690600401613585565b6000611f476117068361421c565b91611f50614c3e565b9261174c855194859384937f0403faa400000000000000000000000000000000000000000000000000000000855260048501614c15565b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257611fc361080854613aad565b6000916000610807545b808210611fe157825180610aae8682613661565b60009392935b8260005260209061080e825285600020548110156120675785600020805482101561203857612033928291600052600020015461202d612026896139ff565b9887613a2c565b526139ff565b611fe7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b505090612076909392936139ff565b90611fcd565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760043567ffffffffffffffff8111610332576120cc903690600401613585565b60006120da6117068361421c565b916120e3614c3e565b9261174c855194859384937feb5cf9ab00000000000000000000000000000000000000000000000000000000855260048501614c15565b503461033257612129366135e3565b90918160005261080e60205261214960ff60028660002001541615614851565b6121548284836148b6565b823b15928315612168575b61138784614aa0565b60009293509060a4602092865194859384927f150b7a02000000000000000000000000000000000000000000000000000000009889855233600486015273ffffffffffffffffffffffffffffffffffffffff8093166024860152604485015260806064850152826084850152165af19283156114a25750611387927fffffffff0000000000000000000000000000000000000000000000000000000091600091612218575b50161438808061215f565b612230915060203d811161149b5761148d81836132f7565b3861220d565b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257602090516108008152f35b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257610aae90610fd9610a2060043561450d565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610332576004359067ffffffffffffffff821161033257610fd9610a2061230d610aae943690600401613643565b613afc565b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257610aae90611253614c3e565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610332576004359067ffffffffffffffff821161033257610d9b61230d610aae933690600401613643565b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325763389a75e1600c52336000526202a30042016020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d600080a2005b3461033257611387612420366135e3565b916148b6565b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325767ffffffffffffffff9060043582811161033257612473903690600401613585565b9061247c61353f565b90604435918215158093036103325761249361385a565b61080093805194806124a96108089788546139f2565b11612858576124b661477c565b610807956124c487546139ff565b8097556124d3835182546139f2565b809155116127fb576124e48161421c565b93845194602095868201208060005261080f9081885260ff87600020541661279e5760005286528460002097600198897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055855193612547856132db565b84528684019182528584019283528760005261080e875285600020935180519082821161073b5768010000000000000000821161073b5788908654838855808410612781575b500185600052886000208b60005b84811061276f57509250505084019151805191821161073b576125c2826104f585546133c1565b8790601f83116001146126fb579180600294926126489796946000926126f0575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828d1b9260031b1c191617905551151591019060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b73ffffffffffffffffffffffffffffffffffffffff8091169261266c8415156147ec565b846000526108039182825283600020541661062757836000526108048152826000208681540190558460005252600020817fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905560007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a461080d55005b0151905038806125e3565b82917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08c941691856000528a6000209260005b8c828210612759575050916126489897959391856002989694106106ee57505050811b01905561054d565b8385015186558f9790950194938401930161272e565b8b845194019381840155018c9061259b565b612798908860005284846000209182019101613a40565b3861258d565b6064888851907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601760248201527f4d4e454d4f4e49435f414c52454144595f4d494e5445440000000000000000006044820152fd5b606483517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4d494e5441424c455f574f52445f4c494d49545f524541434845445f323034386044820152fd5b600484517fb36c1284000000000000000000000000000000000000000000000000000000008152fd5b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257602090610807549051908152f35b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760043567ffffffffffffffff81116103325761290f903690600401613585565b600061291d6117068361421c565b91612926614c3e565b9261174c855194859384937f74a06ecf00000000000000000000000000000000000000000000000000000000855260048501614c15565b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257805162010000919067ffffffffffffffff908381018281118282101761073b57835260005b848110612a6657505081519283019081118382101761073b578152600080835b6108008210612a49575050505160209182820183835262010020830191906000945b6108008610612a035784840385f35b9091928180612a3c837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0896001960301875287516134fc565b95019301950194906129f4565b600160208192612a5886613414565b8152019301910190916129d2565b6060828201526020016129b2565b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257602090610809549051908152f35b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257610aae90611253600435614638565b503461033257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257612b28613562565b602435918260005261080360205273ffffffffffffffffffffffffffffffffffffffff80826000205416918233148015612bc5575b612b6690613928565b84600052610805602052600020921691827fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4005b50826000526108066020528060002033600052602052612b6660ff8260002054169050612b5d565b503461033257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257606490600435612c2a61353f565b612c33826138f7565b73ffffffffffffffffffffffffffffffffffffffff33911603612cbe5781612c5b91336148b6565b60005261080e602052517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494d504c454d454e545f4d4500000000000000000000000000000000000000006044820152fd5b5050517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f4e4c595f4f574e4552000000000000000000000000000000000000000000006044820152fd5b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257602090600435600052610805825273ffffffffffffffffffffffffffffffffffffffff8160002054169051908152f35b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325780516000916108018054612dbd816133c1565b808552916001918083169081156118935750600114612de85750505061182382610aae9403836132f7565b600090815294507f2ff9a80826da3807a6b7bb99b22d907374cea34bf0d07a9245bfc117a9e9c2655b828610612e2e57505050611823826020610aae9582010194611811565b80546020878701810191909152909501948101612e11565b503461033257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760043567ffffffffffffffff81116103325736602382011215610332578060040135612ea081613338565b91612ead845193846132f7565b8183526024602084019260051b820101903682116103325760248101925b8284106131ad5785856024359160ff61080054612f0273ffffffffffffffffffffffffffffffffffffffff8260081c16331461398d565b1661315057612f128251846139f2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081116131215761080011156130c45750906000915b805183101561138757612f5e8382613a2c565b5192612f6a81846139f2565b61080081101561203857845167ffffffffffffffff811161073b57612f9981612f9384546133c1565b84613a57565b6020601f8211600114612ffe578190612fec959697600092612ff3575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790556139ff565b9190612f4b565b015190508780612fb6565b8260005260206000209060005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0841681106130ac5750612fec959697837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0811610613075575b505050600190811b0190556139ff565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055868080613065565b9091602060018192858c01518155019301910161300b565b606490517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e64657820746f6f20686967680000000000000000000000000000000000006044820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b606490517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f66696e616c697a656400000000000000000000000000000000000000000000006044820152fd5b833567ffffffffffffffff811161033257820136604382011215610332576020916131e38392369060446024820135910161338a565b815201930192612ecb565b346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257600435907fffffffff00000000000000000000000000000000000000000000000000000000821680920361033257817f01ffc9a700000000000000000000000000000000000000000000000000000000602093149081156132b1575b8115613287575b5015158152f35b7f5b5e139f0000000000000000000000000000000000000000000000000000000091501483613280565b7f80ac58cd0000000000000000000000000000000000000000000000000000000081149150613279565b6060810190811067ffffffffffffffff82111761073b57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761073b57604052565b67ffffffffffffffff811161073b5760051b60200190565b67ffffffffffffffff811161073b57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b92919261339682613350565b916133a460405193846132f7565b829481845281830111610332578281602093846000960137010152565b90600182811c9216801561340a575b60208310146133db57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916133d0565b9060405191826000825492613428846133c1565b9081845260019485811690816000146134975750600114613454575b5050613452925003836132f7565b565b9093915060005260209081600020936000915b81831061347f57505061345293508201013880613444565b85548884018501529485019487945091830191613467565b90506134529550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880613444565b60005b8381106134ec5750506000910152565b81810151838201526020016134dc565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093613538815180928187528780880191016134d9565b0116010190565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361033257565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361033257565b81601f820112156103325780359161359c83613338565b926135aa60405194856132f7565b808452602092838086019260051b820101928311610332578301905b8282106135d4575050505090565b813581529083019083016135c6565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60609101126103325773ffffffffffffffffffffffffffffffffffffffff90600435828116810361033257916024359081168103610332579060443590565b9080601f830112156103325781602061365e9335910161338a565b90565b6020908160408183019282815285518094520193019160005b828110613688575050505090565b83518552938101939281019260010161367a565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106136d05750505050505090565b909192939495848061370c837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a516134fc565b98019301930191949392906136c0565b9181601f840112156103325782359167ffffffffffffffff8311610332576020838186019501011161033257565b9060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83011261033257600435916024359067ffffffffffffffff82116103325761365e91600401613643565b9190820391821161312157565b90600092918054916137b6836133c1565b91828252600193848116908160001461381857506001146137d8575b50505050565b90919394506000526020928360002092846000945b8386106138045750505050010190388080806137d2565b8054858701830152940193859082016137ed565b91505060209495507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009193501683830152151560051b010190388080806137d2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff7487392754330361388457565b6382b429006000526004601cfd5b1561389957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f4d494e544544000000000000000000000000000000000000000000006044820152fd5b60005261080360205273ffffffffffffffffffffffffffffffffffffffff6040600020541690613452821515613892565b1561392f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152fd5b1561399457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6f6e6c79206465706c6f796572000000000000000000000000000000000000006044820152fd5b9190820180921161312157565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146131215760010190565b80518210156120385760209160051b010190565b818110613a4b575050565b60008155600101613a40565b9190601f8111613a6657505050565b613452926000526020600020906020601f840160051c83019310613a92575b601f0160051c0190613a40565b9091508190613a85565b908151811015612038570160200190565b90613ab782613338565b613ac460405191826132f7565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0613af28294613338565b0190602036910137565b906040908151835193602085613b168297858486016134d9565b8360009485928101039060025afa15614166578151938051918683019267ffffffffffffffff93818110858211176141395783528481529484955b8251871015613cc557613b648784613a9c565b5160f81c845185810181811088821117613c9857908b92918752600880825283820192843685378a5b828110613be25750505091613bdc93613bd692613bca9489519583613bbb88955180928880890191016134d9565b840191518093868401906134d9565b010380845201826132f7565b966139ff565b95613b51565b9091929394506007818103908111613c6b578e969594939291613c3d9183901c600116613c45577f30000000000000000000000000000000000000000000000000000000000000005b8d1a613c378287613a9c565b536139ff565b959495613b8d565b7f3100000000000000000000000000000000000000000000000000000000000000613c2b565b60248c7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024897f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b919395509691958651956101208701908782109082111761413957875261010090818752813685890137855b82811061409557505050825195868060031b0460081487151715613f9f577f3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe600197881b16613d3f816141d7565b96865b8281106140535750505090613d889291519581613d6888935180928680870191016134d9565b8201613d7c825180938680850191016134d9565b010380865201846132f7565b8051908160031b91808304600814901517156140265790613dad915160021c906139f2565b9260078401809411613ff957600b80940491613dc883613aad565b94815b848110613ddb5750505050505090565b818102818104831482151715613fcc57848201808311613f9f5783810290808204851490151715613f9f57875180821015613f9857505b613e24613e1f8383613798565b6141d7565b91805b828110613f4b575050508390858086905b613e54575b50505090613e4f9161202d828a613a2c565b613dcb565b8251811015613f46577f31000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000613ea98386613a9c565b511614613ec0575b613eba906139ff565b81613e38565b929050613ece838351613798565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908111613f195760ff8111613f1957613f11889283613eba931b906139f2565b939050613eb1565b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b613e3d565b807fff00000000000000000000000000000000000000000000000000000000000000613f7a613f93938d613a9c565b5116613c37613f898584613798565b918a1a9187613a9c565b613e27565b9050613e12565b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b807fff000000000000000000000000000000000000000000000000000000000000006140826140909385613a9c565b5116891a613c37828c613a9c565b613d42565b60ff81810390811161410c57906001836140e1931c16156000146140e6577f30000000000000000000000000000000000000000000000000000000000000005b881a613c37828b613a9c565b613cf1565b7f31000000000000000000000000000000000000000000000000000000000000006140d5565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b508251903d90823e3d90fd5b1561417957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420776f726420636f756e7400000000000000000000000000006044820152fd5b906141e182613350565b6141ee60405191826132f7565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0613af28294613350565b80519061423e60039283808210159182614501575b826144f6575b5050614172565b805190600b92838302928084048514901517156131215761425e836141d7565b9260005b8351811015614305576142758185613a2c565b5160005b87811061429057505061428b906139ff565b614262565b600a818103908111613121576000906001901b8316156142ff57507f0100000000000000000000000000000000000000000000000000000000000000905b888402918483048a148515171561312157613c376142ef836142fa956139f2565b9160001a918a613a9c565b614279565b906142ce565b5091509391925061431a602182048092613798565b9061432682861c6141d7565b926000925b84518410156143fa5760005b600890818110156143e25785891b91868304148615171561312157614367614361826001946139f2565b89613a9c565b51918060f893841c14614385575b5061438091506139ff565b614337565b61438f8789613a9c565b51831c926007938385039485116131215760ff7fff0000000000000000000000000000000000000000000000000000000000000093614380961b1617901b1660001a6143db8789613a9c565b5338614375565b5050926143f1909291926139ff565b9291909161432b565b9193949250946040918251938660008680835161441d8160209b8c8098016134d9565b8101039060025afa156144eb576000519160005b87811061444357505050505050505090565b61445661445082846139f2565b84613a9c565b5160f81c81861c88811015612038576007808416810390811161312157866001921a901c160361448e57614489906139ff565b614431565b6064878751907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152600f60248201527f4661696c656420636865636b73756d00000000000000000000000000000000006044820152fd5b83513d6000823e3d90fd5b061590508338614237565b60188111159250614231565b61230d61365e9160038110158061453e575b80614533575b61452e90614172565b614638565b506003810615614525565b50601881111561451f565b9061230d61365e9260038110159081614575575b81614569575b50614172565b60039150061538614563565b6018811115915061455d565b908151917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06145c86145b285613338565b946145c060405196876132f7565b808652613338565b0160005b81811061462757505060005b8151811015614623576145eb8183613a2c565b51906108008210156120385761460361461e92613414565b61460d8287613a2c565b526146188186613a2c565b506139ff565b6145d8565b5050565b8060606020809388010152016145cc565b600381101580614771575b80614766575b61465290614172565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff430190438211613121575a9160405190602093848301913260601b835240603484015242605484015260748301526074825260a082019180831067ffffffffffffffff84111761073b576003926040525190209104808060051b048314811517156131215760021b7f1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc16614706816141d7565b92600090815b83811061471b57505050505090565b81811015614739578085614734921a613c378289613a9c565b61470c565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b506003810615614649565b506018811115614643565b61080d600281541461478e5760029055565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b156147f357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f524543495049454e540000000000000000000000000000006044820152fd5b1561485857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f424f554e440000000000000000000000000000000000000000000000000000006044820152fd5b6000838152602061080e815260406148d760ff600283862001541615614851565b85835261080380835273ffffffffffffffffffffffffffffffffffffffff95868084872054169616958603614a0b5790614955877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef96959493169761493d8915156147ec565b8733149081156149ed575b81156149d6575b50613928565b85845261080483528184207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8154019055868452818420600181540190558784528252610805818420927fffffffffffffffffffffffff000000000000000000000000000000000000000093888582541617905552822090815416905580a4565b90508986526108058552838620541633143861494f565b888752610806865284872033885286528487205460ff169150614948565b6064848451907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152600a60248201527f57524f4e475f46524f4d000000000000000000000000000000000000000000006044820152fd5b9081602091031261033257517fffffffff00000000000000000000000000000000000000000000000000000000811681036103325790565b15614aa757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f554e534146455f524543495049454e54000000000000000000000000000000006044820152fd5b6020818303126103325780519067ffffffffffffffff8211610332570181601f82011215610332578051614b3881613350565b92614b4660405194856132f7565b818452602082840101116103325761365e91602080850191016134d9565b908082519081815260208091019281808460051b8301019501936000915b848310614b925750505050505090565b9091929394958480614bce837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086600196030187528a516134fc565b9801930193019194939290614b82565b91614c0790614bf961365e9593606086526060860190614b64565b9084820360208601526137a5565b9160408184039101526134fc565b91614c0790614c3061365e9593606086526060860190614b64565b9084820360208601526134fc565b73ffffffffffffffffffffffffffffffffffffffff6108105416803b908115614cd357602061365e91601f8460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614cc69701916040519461ffe0603e83011686016040528386526000878701958693880101523c604051948592518092858501906134d9565b81010380845201826132f7565b6311052bb46000526004601cfdfea2646970667358221220b163e44d42c9868a85ae79a84de082f51b56a49a4d4f60d40c1e9d8fb7215bb164736f6c63430008110033",
  "deployedBytecode": "0x6080604090808252600436101561001557600080fd5b60003560e01c90816301ffc9a7146131ee5750806306bddb1914612e4657806306fdde0314612d7a578063081812fc14612d1a5780630908853214612bed578063095ea7b314612af15780630b35610214612ab2578063165d7e8014612a7457806316c6ca971461295d57806317aee9ba146128bf57806318160ddd146128815780631a0823a41461242657806323b872dd1461240f57806325692962146123a55780632a2758be1461234e5780633438c9b31461231257806335585877146122b35780633d92e4f01461227157806340d06d801461223657806342842e0e1461211a57806346623ecd1461207c578063492f7e0414611f875780634c0e5ec914611ee95780634d81e43314611e9257806351cff8d914611e0757806354d1f13d14611da15780635ca2ddf114611cc95780636352211e14611c6e578063665aa64714611c2b57806370a0823114611b62578063715018a614611ae357806378d20fa214611a0457806382f4fd5d146119c65780638d859f3e146119865780638da5cb5b146119145780639524bb44146118d957806395d89b41146117b4578063985e5937146116a85780639fa587ac14611692578063a22cb465146115ba578063a582fc5614611570578063b3f05b971461152d578063b4d7ec71146114ac578063b88d4fde146112e3578063bedb86fb14611266578063c6dc80fb146111f7578063c87b56dd146110bc578063d12a4c9814610fe4578063d3af112c14610fba578063d451a75714610ee2578063d7533f0214610ea6578063d838b1f514610e6b578063e1a283d614610e25578063e985e9c514610da6578063eb60633a14610d5c578063ed9978c714610cd1578063f04e283e14610c09578063f0503e8014610b87578063f0d0779c14610b49578063f1eeb61b14610afa578063f232b8e6146109a9578063f2fde38b146108f6578063f8e93ef9146103375763fee81cf4146102e157600080fd5b346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760209061031b613562565b63389a75e1600c5260005281600c20549051908152f35b600080fd5b506020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325767ffffffffffffffff9160043583811161033257610385903690600401613585565b9161038e61477c565b8251926108089384549461080091826103a782896139f2565b116108cd5760ff61080c5460081c166108a4576108099081546106686103cd83836139f2565b1161087b57666a94d74f430000340361085257906103ea916139f2565b9055610408610807966103fd88546139ff565b8098558451906139f2565b809155116107f6576104198161421c565b948551838701208060005261080f9081855260ff8660002054166107995760005283528360002095600196877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055845192610478846132db565b835283830190815284830191600083528660005261080e855285600020935180519082821161073b5768010000000000000000821161073b578690865483885580841061077c575b500185600052866000208a60005b84811061076a57509250505084019151805191821161073b576104fb826104f585546133c1565b85613a57565b8590601f831160011461068f57918060029492610582979694600092610684575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828c1b9260031b1c19161790555b51151591019060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b61058d3315156147ec565b826000526108039081815273ffffffffffffffffffffffffffffffffffffffff83600020541661062757336000526108048152826000208581540190558360005252600020337fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790553360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a461080d55005b6064908351907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152600e60248201527f414c52454144595f4d494e5445440000000000000000000000000000000000006044820152fd5b01519050388061051c565b82917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08b94169185600052886000209260005b8a828210610725575050916105829897959391856002989694106106ee575b505050811b01905561054d565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690553880806106e1565b8385015186558e979095019493840193016106c2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b89845194019381840155018b906104ce565b610793908860005284846000209182019101613a40565b386104c0565b6064858751907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601760248201527f4d4e454d4f4e49435f414c52454144595f4d494e5445440000000000000000006044820152fd5b5060649151907f08c379a000000000000000000000000000000000000000000000000000000000825280600483015260248201527f4d494e5441424c455f574f52445f4c494d49545f524541434845445f323034386044820152fd5b600488517f99b5cb1d000000000000000000000000000000000000000000000000000000008152fd5b600488517f6bb8aab8000000000000000000000000000000000000000000000000000000008152fd5b600486517f9e87fac8000000000000000000000000000000000000000000000000000000008152fd5b600486517fb36c1284000000000000000000000000000000000000000000000000000000008152fd5b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257610928613562565b61093061385a565b8060601b1561099b5773ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739278181547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a355005b637448fbae6000526004601cfd5b5034610332576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257600435918260005261080e8083528160002082519081858254918281520191600052856000209060005b87828210610ae6575050505090610a2081610a259303826132f7565b614581565b9360005282526000600182822001610a3b614c3e565b94610a72845196879384937f0403faa400000000000000000000000000000000000000000000000000000000855260048501614bde565b038173__$31c0833bf1f99a480d7ff9c84446810f95$__5af4928315610adb57600093610ab2575b50610aae90519282849384528301906134fc565b0390f35b610aae919350610ad4903d806000833e610acc81836132f7565b810190614b05565b9290610a9a565b50513d6000823e3d90fd5b835485529093019260019283019201610a04565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760209060043560005261080f825260ff81600020541690519015158152f35b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760209061080b549051908152f35b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760043560005261080e602052806000209060ff6002825193610be785610be081600185016137a5565b03866132f7565b015416610bfd82519383859485528401906134fc565b90151560208301520390f35b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257610c3b613562565b610c4361385a565b63389a75e1600c52806000526020600c209081544211610cc357600073ffffffffffffffffffffffffffffffffffffffff9255167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739278181547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a355005b636f5e88186000526004601cfd5b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325780518181019181831067ffffffffffffffff84111761073b57610aae928152600782527f656e676c697368000000000000000000000000000000000000000000000000006020830152519182916020835260208301906134fc565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257610aae90610d9b60043561450d565b905191829182613661565b503461033257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257602090610de0613562565b610de861353f565b9073ffffffffffffffffffffffffffffffffffffffff8091166000526108068452826000209116600052825260ff81600020541690519015158152f35b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760209060ff61080c5460081c1690519015158152f35b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257602090516106688152f35b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257602090516202a3008152f35b5034610332576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257600435918260005261080e8083528160002082519081858254918281520191600052856000209060005b87828210610fa6575050505090610a2081610f599303826132f7565b9360005282526000600182822001610f6f614c3e565b94610a72845196879384937ffcb7003500000000000000000000000000000000000000000000000000000000855260048501614bde565b835485529093019260019283019201610f3d565b503461033257610aae90610fd9610a20610fd33661374a565b90614549565b90519182918261369c565b5034610332576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257600435918260005261080e8083528160002082519081858254918281520191600052856000209060005b878282106110a8575050505090610a208161105b9303826132f7565b9360005282526000600182822001611071614c3e565b94610a72845196879384937f74a06ecf00000000000000000000000000000000000000000000000000000000855260048501614bde565b83548552909301926001928301920161103f565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9181833601126103325760043580600052610803835261112073ffffffffffffffffffffffffffffffffffffffff8360002054161515613892565b8060005261080e908184528260002094835180868854918281520197600052866000209060005b8181106111e357505050600093929161116c82610a20610a72946111c49b03826132f7565b9383865287526001868620016111d4611183614c3e565b9188519a8b9788977f885086390000000000000000000000000000000000000000000000000000000089526004890152608060248901526084880190614b64565b90848783030160448801526137a5565b918483030160648501526134fc565b82548a529888019860019283019201611147565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610332576004359067ffffffffffffffff82116103325761125361124e610aae933690600401613585565b61421c565b90519182916020835260208301906134fc565b346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257600435801515809103610332576112aa61385a565b61080c907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff61ff0083549260081b169116179055600080f35b50346103325760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325761131b613562565b9061132461353f565b9060443560643567ffffffffffffffff81116103325761134890369060040161371c565b90938260005261080e60205261136860ff60028660002001541615614851565b6113738382886148b6565b803b15948515611389575b61138786614aa0565b005b60209395506000859760a485937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f9951998a98899788947f150b7a02000000000000000000000000000000000000000000000000000000009e8f875233600488015273ffffffffffffffffffffffffffffffffffffffff8099166024880152604487015260806064870152816084870152868601378685828601015201168101030193165af19283156114a25750611387927fffffffff0000000000000000000000000000000000000000000000000000000091600091611474575b501614388080808061137e565b611495915060203d811161149b575b61148d81836132f7565b810190614a68565b38611467565b503d611483565b513d6000823e3d90fd5b346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325761080060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825461152773ffffffffffffffffffffffffffffffffffffffff8260081c16331461398d565b16179055005b50346103325760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760209060ff610800541690519015158152f35b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610332576004359061080082101561033257611253610aae92613414565b503461033257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610332576115f1613562565b90602435908115159182810361033257611666903360005261080660205273ffffffffffffffffffffffffffffffffffffffff8360002095169485600052602052826000209060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b503461033257610aae90610d9b610fd33661374a565b50346103325760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325760043567ffffffffffffffff8111610332576116f8903690600401613585565b600061170c6117068361421c565b92614581565b91611715614c3e565b9261174c855194859384937ffcb7003500000000000000000000000000000000000000000000000000000000855260048501614c15565b038173__$31c0833bf1f99a480d7ff9c84446810f95$",
  "libraries": {
    "Render": "0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE"
  },
  "devdoc": {
    "errors": {
      "NewOwnerIsZeroAddress()": [
        {
          "details": "The `newOwner` cannot be the zero address."
        }
      ],
      "NoHandoverRequest()": [
        {
          "details": "The `pendingOwner` does not have a valid handover request."
        }
      ],
      "Unauthorized()": [
        {
          "details": "The caller is not authorized to call the function."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "bind(uint256,address)": {
        "params": {
          "id": "tokenId of the poem to be bound"
        }
      },
      "cancelOwnershipHandover()": {
        "details": "Cancels the two-step ownership handover to the caller, if any."
      },
      "completeOwnershipHandover(address)": {
        "details": "Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`."
      },
      "getMintedIndices()": {
        "details": "Intended to be used offchain"
      },
      "owner()": {
        "details": "Returns the owner of the contract."
      },
      "ownershipHandoverExpiresAt(address)": {
        "details": "Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`."
      },
      "ownershipHandoverValidFor()": {
        "details": "Returns how long a two-step ownership handover is valid for in seconds."
      },
      "renounceOwnership()": {
        "details": "Allows the owner to renounce their ownership."
      },
      "requestOwnershipHandover()": {
        "details": "Request a two-step ownership handover to the caller. The request will be automatically expire in 48 hours (172800 seconds) by default."
      },
      "transferOwnership(address)": {
        "details": "Allows the owner to transfer the ownership to `newOwner`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bind(uint256,address)": {
        "notice": "This method allows a seed poem to be bound to a specific address that is derived from the seed itself."
      },
      "setPause(bool)": {
        "notice": "Pause/Unpause minting"
      },
      "withdraw(address)": {
        "notice": "Withdraws balance to address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 914,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "wordlist",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_string_storage)2048_storage"
      },
      {
        "astId": 916,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "finalized",
        "offset": 0,
        "slot": "2048",
        "type": "t_bool"
      },
      {
        "astId": 918,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "deployer",
        "offset": 1,
        "slot": "2048",
        "type": "t_address"
      },
      {
        "astId": 370,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "name",
        "offset": 0,
        "slot": "2049",
        "type": "t_string_storage"
      },
      {
        "astId": 372,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "symbol",
        "offset": 0,
        "slot": "2050",
        "type": "t_string_storage"
      },
      {
        "astId": 383,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "2051",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 387,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "2052",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 436,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "getApproved",
        "offset": 0,
        "slot": "2053",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 442,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "2054",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2573,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2055",
        "type": "t_uint256"
      },
      {
        "astId": 2575,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "totalWords",
        "offset": 0,
        "slot": "2056",
        "type": "t_uint256"
      },
      {
        "astId": 2577,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "publicClaimed",
        "offset": 0,
        "slot": "2057",
        "type": "t_uint256"
      },
      {
        "astId": 2581,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "reserve",
        "offset": 0,
        "slot": "2058",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2583,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "reserveRoot",
        "offset": 0,
        "slot": "2059",
        "type": "t_bytes32"
      },
      {
        "astId": 2586,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "mintReserveActive",
        "offset": 0,
        "slot": "2060",
        "type": "t_bool"
      },
      {
        "astId": 2589,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "mintingPaused",
        "offset": 1,
        "slot": "2060",
        "type": "t_bool"
      },
      {
        "astId": 10,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "_status",
        "offset": 0,
        "slot": "2061",
        "type": "t_uint256"
      },
      {
        "astId": 1910,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "seeds",
        "offset": 0,
        "slot": "2062",
        "type": "t_mapping(t_uint256,t_struct(Seed)1905_storage)"
      },
      {
        "astId": 1914,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "isEntropyMinted",
        "offset": 0,
        "slot": "2063",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1916,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "font",
        "offset": 0,
        "slot": "2064",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)2048_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2048]",
        "numberOfBytes": "65536"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Seed)1905_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SeedPoems.Seed)",
        "numberOfBytes": "32",
        "value": "t_struct(Seed)1905_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Seed)1905_storage": {
        "encoding": "inplace",
        "label": "struct SeedPoems.Seed",
        "members": [
          {
            "astId": 1900,
            "contract": "src/SeedPoems.sol:SeedPoems",
            "label": "indices",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1902,
            "contract": "src/SeedPoems.sol:SeedPoems",
            "label": "entropy",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1904,
            "contract": "src/SeedPoems.sol:SeedPoems",
            "label": "bound",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}