{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "bind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_wordsChunk",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "commitWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        }
      ],
      "name": "entropyToMnemonic",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        }
      ],
      "name": "entropyToMnemonicString",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "words",
          "type": "uint256"
        }
      ],
      "name": "generateEntropy",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "words",
          "type": "uint256"
        }
      ],
      "name": "generateMnemonic",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "words",
          "type": "uint256"
        }
      ],
      "name": "generateMnemonicString",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFont",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintedIndices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWordlist",
      "outputs": [
        {
          "internalType": "string[2048]",
          "name": "",
          "type": "string[2048]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        }
      ],
      "name": "indicesToWords",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isEntropyMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "language",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "seedIndices",
          "type": "uint256[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "wordIndices",
          "type": "uint256[]"
        }
      ],
      "name": "mnemonicToEntropy",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "renderSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "renderSVGBase64",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "seedIndices",
          "type": "uint256[]"
        }
      ],
      "name": "renderSVGBase64FromWords",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "renderSVGBase64static",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "seedIndices",
          "type": "uint256[]"
        }
      ],
      "name": "renderSVGBase64staticFromWords",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "seedIndices",
          "type": "uint256[]"
        }
      ],
      "name": "renderSVGFromWords",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "renderSVGstatic",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "seedIndices",
          "type": "uint256[]"
        }
      ],
      "name": "renderSVGstaticFromWords",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "seeds",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "entropy",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "bound",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fontString",
          "type": "string"
        }
      ],
      "name": "setFont",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wordPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wordlist",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2253546540d29ddcad6060c8e341eef6e9d8d05be37360f76250b467938aa8e9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "4082201",
    "logsBloom": "0x
    "blockHash": "0xcec0914fcf8c9e8dd5294a153ab47bc50017c0e754518c94216b8e5c6f1a82ec",
    "transactionHash": "0x2253546540d29ddcad6060c8e341eef6e9d8d05be37360f76250b467938aa8e9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x2253546540d29ddcad6060c8e341eef6e9d8d05be37360f76250b467938aa8e9",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcec0914fcf8c9e8dd5294a153ab47bc50017c0e754518c94216b8e5c6f1a82ec"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x2253546540d29ddcad6060c8e341eef6e9d8d05be37360f76250b467938aa8e9",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xcec0914fcf8c9e8dd5294a153ab47bc50017c0e754518c94216b8e5c6f1a82ec"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "4082201",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f8672c3ec2ca825207aabaa4ef255dff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_wordsChunk\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"commitWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"}],\"name\":\"entropyToMnemonic\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"}],\"name\":\"entropyToMnemonicString\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"words\",\"type\":\"uint256\"}],\"name\":\"generateEntropy\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"words\",\"type\":\"uint256\"}],\"name\":\"generateMnemonic\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"words\",\"type\":\"uint256\"}],\"name\":\"generateMnemonicString\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFont\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintedIndices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWordlist\",\"outputs\":[{\"internalType\":\"string[2048]\",\"name\":\"\",\"type\":\"string[2048]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"indicesToWords\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isEntropyMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"language\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seedIndices\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"wordIndices\",\"type\":\"uint256[]\"}],\"name\":\"mnemonicToEntropy\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"renderSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"renderSVGBase64\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seedIndices\",\"type\":\"uint256[]\"}],\"name\":\"renderSVGBase64FromWords\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"renderSVGBase64static\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seedIndices\",\"type\":\"uint256[]\"}],\"name\":\"renderSVGBase64staticFromWords\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seedIndices\",\"type\":\"uint256[]\"}],\"name\":\"renderSVGFromWords\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"renderSVGstatic\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seedIndices\",\"type\":\"uint256[]\"}],\"name\":\"renderSVGstaticFromWords\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seeds\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"entropy\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"bound\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fontString\",\"type\":\"string\"}],\"name\":\"setFont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wordPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wordlist\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bind(uint256,address)\":{\"params\":{\"id\":\"tokenId of the poem to be bound\"}},\"getMintedIndices()\":{\"details\":\"Intended to be used offchain\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bind(uint256,address)\":{\"notice\":\"This method allows a seed poem to be bound to a specific address that is derived from the seed itself.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/SeedPoems.sol\":\"SeedPoems\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363839343135303932363536\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"solady/src/utils/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Read and write to persistent storage at a fraction of the cost.\\n/// @author Solady (https://github.com/vectorized/solmady/blob/main/src/utils/SSTORE2.sol)\\n/// @author Saw-mon-and-Natalie (https://github.com/Saw-mon-and-Natalie)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SSTORE2.sol)\\n/// @author Modified from 0xSequence (https://github.com/0xSequence/sstore2/blob/master/contracts/SSTORE2.sol)\\nlibrary SSTORE2 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev We skip the first byte as it's a STOP opcode,\\n    /// which ensures the contract can't be called.\\n    uint256 internal constant DATA_OFFSET = 1;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Unable to deploy the storage contract.\\n    error DeploymentFailed();\\n\\n    /// @dev The storage contract address is invalid.\\n    error InvalidPointer();\\n\\n    /// @dev Attempt to read outside of the storage contract's bytecode bounds.\\n    error ReadOutOfBounds();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         WRITE LOGIC                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Writes `data` into the bytecode of a storage contract and returns its address.\\n    function write(bytes memory data) internal returns (address pointer) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let originalDataLength := mload(data)\\n\\n            // Add 1 to data size since we are prefixing it with a STOP opcode.\\n            let dataSize := add(originalDataLength, DATA_OFFSET)\\n\\n            /**\\n             * ------------------------------------------------------------------------------+\\n             * Opcode      | Mnemonic        | Stack                   | Memory              |\\n             * ------------------------------------------------------------------------------|\\n             * 61 codeSize | PUSH2 codeSize  | codeSize                |                     |\\n             * 80          | DUP1            | codeSize codeSize       |                     |\\n             * 60 0xa      | PUSH1 0xa       | 0xa codeSize codeSize   |                     |\\n             * 3D          | RETURNDATASIZE  | 0 0xa codeSize codeSize |                     |\\n             * 39          | CODECOPY        | codeSize                | [0..codeSize): code |\\n             * 3D          | RETURNDATASIZE  | 0 codeSize              | [0..codeSize): code |\\n             * F3          | RETURN          |                         | [0..codeSize): code |\\n             * 00          | STOP            |                         |                     |\\n             * ------------------------------------------------------------------------------+\\n             * @dev Prefix the bytecode with a STOP opcode to ensure it cannot be called.\\n             * Also PUSH2 is used since max contract size cap is 24,576 bytes which is less than 2 ** 16.\\n             */\\n            mstore(\\n                data,\\n                or(\\n                    0x61000080600a3d393df300,\\n                    // Left shift `dataSize` by 64 so that it lines up with the 0000 after PUSH2.\\n                    shl(0x40, dataSize)\\n                )\\n            )\\n\\n            // Deploy a new contract with the generated creation code.\\n            pointer := create(0, add(data, 0x15), add(dataSize, 0xa))\\n\\n            // If `pointer` is zero, revert.\\n            if iszero(pointer) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Restore original length of the variable size `data`.\\n            mstore(data, originalDataLength)\\n        }\\n    }\\n\\n    /// @dev Writes `data` into the bytecode of a storage contract with `salt`\\n    /// and returns its deterministic address.\\n    function writeDeterministic(bytes memory data, bytes32 salt)\\n        internal\\n        returns (address pointer)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let originalDataLength := mload(data)\\n            let dataSize := add(originalDataLength, DATA_OFFSET)\\n\\n            mstore(data, or(0x61000080600a3d393df300, shl(0x40, dataSize)))\\n\\n            // Deploy a new contract with the generated creation code.\\n            pointer := create2(0, add(data, 0x15), add(dataSize, 0xa), salt)\\n\\n            // If `pointer` is zero, revert.\\n            if iszero(pointer) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Restore original length of the variable size `data`.\\n            mstore(data, originalDataLength)\\n        }\\n    }\\n\\n    /// @dev Returns the initialization code hash of the storage contract for `data`.\\n    /// Used for mining vanity addresses with create2crunch.\\n    function initCodeHash(bytes memory data) internal pure returns (bytes32 hash) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let originalDataLength := mload(data)\\n            let dataSize := add(originalDataLength, DATA_OFFSET)\\n\\n            mstore(data, or(0x61000080600a3d393df300, shl(0x40, dataSize)))\\n\\n            hash := keccak256(add(data, 0x15), add(dataSize, 0xa))\\n\\n            // Restore original length of the variable size `data`.\\n            mstore(data, originalDataLength)\\n        }\\n    }\\n\\n    /// @dev Returns the address of the storage contract for `data`\\n    /// deployed with `salt` by `deployer`.\\n    function predictDeterministicAddress(bytes memory data, bytes32 salt, address deployer)\\n        internal\\n        pure\\n        returns (address predicted)\\n    {\\n        bytes32 hash = initCodeHash(data);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and store the bytecode hash.\\n            mstore8(0x00, 0xff) // Write the prefix.\\n            mstore(0x35, hash)\\n            mstore(0x01, shl(96, deployer))\\n            mstore(0x15, salt)\\n            predicted := keccak256(0x00, 0x55)\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x35, 0)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         READ LOGIC                         */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns all the `data` from the bytecode of the storage contract at `pointer`.\\n    function read(address pointer) internal view returns (bytes memory data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let pointerCodesize := extcodesize(pointer)\\n            if iszero(pointerCodesize) {\\n                // Store the function selector of `InvalidPointer()`.\\n                mstore(0x00, 0x11052bb4)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Offset all indices by 1 to skip the STOP opcode.\\n            let size := sub(pointerCodesize, DATA_OFFSET)\\n\\n            // Get the pointer to the free memory and allocate\\n            // enough 32-byte words for the data and the length of the data,\\n            // then copy the code to the allocated memory.\\n            // Masking with 0xffe0 will suffice, since contract size is less than 16 bits.\\n            data := mload(0x40)\\n            mstore(0x40, add(data, and(add(size, 0x3f), 0xffe0)))\\n            mstore(data, size)\\n            mstore(add(add(data, 0x20), size), 0) // Zeroize the last slot.\\n            extcodecopy(pointer, add(data, 0x20), DATA_OFFSET, size)\\n        }\\n    }\\n\\n    /// @dev Returns the `data` from the bytecode of the storage contract at `pointer`,\\n    /// from the byte at `start`, to the end of the data stored.\\n    function read(address pointer, uint256 start) internal view returns (bytes memory data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let pointerCodesize := extcodesize(pointer)\\n            if iszero(pointerCodesize) {\\n                // Store the function selector of `InvalidPointer()`.\\n                mstore(0x00, 0x11052bb4)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // If `!(pointer.code.size > start)`, reverts.\\n            // This also handles the case where `start + DATA_OFFSET` overflows.\\n            if iszero(gt(pointerCodesize, start)) {\\n                // Store the function selector of `ReadOutOfBounds()`.\\n                mstore(0x00, 0x84eb0dd1)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            let size := sub(pointerCodesize, add(start, DATA_OFFSET))\\n\\n            // Get the pointer to the free memory and allocate\\n            // enough 32-byte words for the data and the length of the data,\\n            // then copy the code to the allocated memory.\\n            // Masking with 0xffe0 will suffice, since contract size is less than 16 bits.\\n            data := mload(0x40)\\n            mstore(0x40, add(data, and(add(size, 0x3f), 0xffe0)))\\n            mstore(data, size)\\n            mstore(add(add(data, 0x20), size), 0) // Zeroize the last slot.\\n            extcodecopy(pointer, add(data, 0x20), add(start, DATA_OFFSET), size)\\n        }\\n    }\\n\\n    /// @dev Returns the `data` from the bytecode of the storage contract at `pointer`,\\n    /// from the byte at `start`, to the byte at `end` (exclusive) of the data stored.\\n    function read(address pointer, uint256 start, uint256 end)\\n        internal\\n        view\\n        returns (bytes memory data)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let pointerCodesize := extcodesize(pointer)\\n            if iszero(pointerCodesize) {\\n                // Store the function selector of `InvalidPointer()`.\\n                mstore(0x00, 0x11052bb4)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // If `!(pointer.code.size > end) || (start > end)`, revert.\\n            // This also handles the cases where\\n            // `end + DATA_OFFSET` or `start + DATA_OFFSET` overflows.\\n            if iszero(\\n                and(\\n                    gt(pointerCodesize, end), // Within bounds.\\n                    iszero(gt(start, end)) // Valid range.\\n                )\\n            ) {\\n                // Store the function selector of `ReadOutOfBounds()`.\\n                mstore(0x00, 0x84eb0dd1)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            let size := sub(end, start)\\n\\n            // Get the pointer to the free memory and allocate\\n            // enough 32-byte words for the data and the length of the data,\\n            // then copy the code to the allocated memory.\\n            // Masking with 0xffe0 will suffice, since contract size is less than 16 bits.\\n            data := mload(0x40)\\n            mstore(0x40, add(data, and(add(size, 0x3f), 0xffe0)))\\n            mstore(data, size)\\n            mstore(add(add(data, 0x20), size), 0) // Zeroize the last slot.\\n            extcodecopy(pointer, add(data, 0x20), add(start, DATA_OFFSET), size)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37b70d6747e5ddbde738b39d1463ea18050dada568141c5cfd45317ef962d619\",\"license\":\"MIT\"},\"solmate/src/auth/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xfedb27d14c508342c33eb067c9a02eabcdb0f9dcf93b04ded1001f580d12d0ea\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    mapping(address => uint256) internal _balanceOf;\\n\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\n        require((owner = _ownerOf[id]) != address(0), \\\"NOT_MINTED\\\");\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        return _balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _balanceOf[from]--;\\n\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            _balanceOf[owner]--;\\n        }\\n\\n        delete _ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721TokenReceiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x04af19f16f00ba65ae168d6d10da5210dc18da6bcec6974dccf984ba388aa22d\",\"license\":\"AGPL-3.0-only\"},\"src/BIP39.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ncontract BIP39 {\\n    string constant public language = \\\"english\\\";\\n    string[2048] public wordlist;\\n    bool public finalized;\\n    address private deployer;\\n\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    modifier onlyDeployer {\\n        require(msg.sender == deployer, \\\"only deployer\\\");\\n        _;\\n    }\\n\\n    function commitWords(string[] memory _wordsChunk, uint256 _offset) external onlyDeployer {\\n        require(!finalized, \\\"finalized\\\");\\n        require(_offset + _wordsChunk.length - 1 < 2048, \\\"index too high\\\");\\n        for (uint256 i = 0; i < _wordsChunk.length; i++) {\\n            wordlist[_offset + i] = _wordsChunk[i];\\n        }\\n    }\\n\\n    function finalizeWords() external onlyDeployer {\\n        finalized = true;\\n    }\\n\\n    function getWordlist() external view returns (string[2048] memory) {\\n        return wordlist;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                BIP39\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function entropyToMnemonic(bytes memory entropy) public pure returns (uint[] memory) {\\n        bytes32 hashedEntropy = sha256(entropy);\\n        string memory binaryEntropy = \\\"\\\";\\n        for (uint i = 0; i < entropy.length; i++) {\\n            binaryEntropy = string(abi.encodePacked(binaryEntropy, uintToBinaryString(uint8(entropy[i]), 8)));\\n        }\\n        string memory binaryChecksum = substring(uintToBinaryString(uint256(hashedEntropy), 256), 0, entropy.length * 8 / 4);\\n        string memory binaryString = string(abi.encodePacked(binaryEntropy, binaryChecksum));\\n\\n        uint mnemonicLength = (entropy.length * 8 + entropy.length / 4 + 7) / 11;\\n\\n        uint[] memory mnemonicIndices = new uint[](mnemonicLength);\\n        for (uint i = 0; i < mnemonicLength; i++) {\\n            uint index = binaryToUint(substring(binaryString, i * 11, min((i+1) * 11, bytes(binaryString).length)));\\n            mnemonicIndices[i] = index;\\n        }\\n        return mnemonicIndices;\\n    }\\n\\n\\n    function entropyToMnemonicString(bytes memory entropy) public view returns (string[] memory) {\\n        return indicesToWords(entropyToMnemonic(entropy));\\n    }\\n\\n    function mnemonicToEntropy(uint[] memory wordIndices) public pure returns (bytes memory) {\\n        require(wordIndices.length >= 3 && wordIndices.length <= 24 && wordIndices.length % 3 == 0, \\\"Invalid word count\\\");\\n\\n        uint concatLenBits = wordIndices.length * 11;\\n        bytes memory concatBits = new bytes(concatLenBits);\\n\\n        for (uint wordIndex = 0; wordIndex < wordIndices.length; wordIndex++) {\\n            uint ndx = wordIndices[wordIndex];\\n\\n            for (uint i = 0; i < 11; i++) {\\n                bool isOne = (ndx & (1 << (10 - i))) != 0;\\n                concatBits[(wordIndex * 11) + i] = isOne ? bytes1(uint8(1)) : bytes1(uint8(0));\\n            }\\n        }\\n\\n        uint checksumLengthBits = concatLenBits / 33;\\n        uint entropyLengthBits = concatLenBits - checksumLengthBits;\\n\\n        bytes memory entropy = new bytes(entropyLengthBits / 8);\\n        for (uint i = 0; i < entropy.length; i++) {\\n            for (uint j = 0; j < 8; j++) {\\n                if (uint8(concatBits[(i * 8) + j]) == 1) {\\n                    entropy[i] = bytes1(uint8(entropy[i]) | uint8(1 << (7 - j)));\\n                }\\n            }\\n        }\\n\\n        bytes32 hashBytes = sha256(entropy);\\n\\n        for (uint i = 0; i < checksumLengthBits; i++) {\\n            require(\\n                uint8(concatBits[entropyLengthBits + i]) == uint8(uint8(hashBytes[i / 8]) >> (7 - i % 8) & 1),\\n                \\\"Failed checksum\\\"\\n            );\\n        }\\n\\n        return entropy;\\n    }\\n\\n    function generateMnemonic(uint256 words) public view returns (uint[] memory) {\\n        require(words >= 3 && words <= 24 && words % 3 == 0, \\\"Invalid word count\\\");\\n        bytes memory entropy = generateEntropy(words);\\n        uint[] memory mnemonicIndices = entropyToMnemonic(entropy);\\n        return mnemonicIndices;\\n    }\\n\\n    function generateMnemonicString(uint256 words) public view returns (string[] memory) {\\n        return indicesToWords(generateMnemonic(words));\\n    }\\n\\n    function indicesToWords(uint256[] memory indices) public view returns (string[] memory) {\\n        string[] memory words = new string[](indices.length);\\n        for (uint index; index < indices.length; index++) {\\n            words[index] = wordlist[indices[index]];\\n        }\\n        return words;\\n    }\\n\\n    function generateEntropy(uint256 words) public view returns (bytes memory) {\\n        require(words >= 3 && words <= 24 && words % 3 == 0, \\\"Invalid word count\\\");\\n\\n        bytes32 totalEntropy = keccak256(abi.encodePacked(\\n            tx.origin,\\n            blockhash(block.number - 1),\\n            block.timestamp,\\n            gasleft()\\n        ));\\n\\n        uint256 bits = words / 3 * 32;\\n        uint256 bytesLength = bits / 8;\\n\\n        bytes memory entropy = new bytes(bytesLength);\\n        for (uint i = 0; i < bytesLength; i++) {\\n            entropy[i] = totalEntropy[i];\\n        }\\n        return entropy;\\n    }\\n\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                Utility\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function substring(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint i = startIndex; i < endIndex; i++) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n\\n    function uintToBinaryString(uint256 x, uint256 length) internal pure returns (string memory) {\\n        bytes memory result = new bytes(length);\\n        for (uint i = 0; i < length; i++) {\\n            uint8 b = uint8(uint(x) >> (length - 1 - i));\\n            result[i] = b % 2 == 0 ? bytes1(uint8(48)) : bytes1(uint8(49));  // 48 and 49 are '0' and '1' in ASCII\\n        }\\n        return string(result);\\n    }\\n\\n    function binaryToUint(string memory binaryString) internal pure returns (uint) {\\n        bytes memory binaryBytes = bytes(binaryString);\\n        uint result = 0;\\n        for (uint i = 0; i < binaryBytes.length; i++) {\\n            if (binaryBytes[i] == '1') {\\n                result += 2**(binaryBytes.length - i - 1);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function min(uint a, uint b) private pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n}\",\"keccak256\":\"0x9992e90d72d191004f38760a81d15f6767b7d8b8bc1b5dfb26ba9d71c0ec2ce8\",\"license\":\"UNLICENSED\"},\"src/SeedPoems.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"solmate/src/tokens/ERC721.sol\\\";\\nimport \\\"solmate/src/auth/Owned.sol\\\";\\nimport \\\"solady/src/utils/SSTORE2.sol\\\";\\nimport \\\"./BIP39.sol\\\";\\nimport {Render} from \\\"./libraries/Render.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                               seek                                 //\\n//                               poet                                 //\\n//                               seed                                 //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                                    //\\n//                                                       0xfff.eth    //\\n//                                                                    //\\n////////////////////////////////////////////////////////////////////////\\n\\ncontract SeedPoems is ERC721, BIP39, Owned {\\n    struct Seed {\\n        uint256[] indices;\\n        bytes entropy;\\n        bool bound;\\n    }\\n    mapping(uint256 => Seed) public seeds;\\n\\n    uint256 public totalSupply; // => 2048 words ~ 70~650 / 200-250 realistic\\n    uint256 public wordPrice = 0.01 ether; // 2048 words => 20.48 ETH\\n\\n    // Scenario A\\n    // First 512 free\\n    // Then 0.01\\n\\n    // Scenario B\\n    // First 512 free\\n    // Next 512 0.005\\n    // Next 512 0.01\\n    // Last 512 0.015\\n\\n    // Scenario C\\n    // Potential curve\\n    // first 512 free\\n    // next 512 0.005\\n    // next 512 0.01\\n    // next 256 0.02\\n    // next 128 0.03\\n    // next 64 0.04\\n    // next 32 0.05\\n    // next 16 0.1\\n    // next 8 0.2\\n    // next 6 0.5\\n    // next 2 1\\n\\n    bool public locked = true; // prevent minting\\n\\n    // mapping(uint256 => bool) public isIndexMinted;\\n    mapping(bytes32 => bool) public isEntropyMinted;\\n    uint256 totalWords = 0; // total minted words\\n\\n    address private font;\\n\\n    constructor() ERC721(\\\"Seed Poem\\\", \\\"SEED\\\") Owned(msg.sender) {\\n        uint256[] memory seedIndices = new uint256[](3);\\n        seedIndices[0] = 1560; // seek\\n        seedIndices[1] = 1337; // poet\\n        seedIndices[2] = 1559; // seed\\n        _mintPoem(seedIndices, false);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                  Mint\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function lock(bool state) external onlyOwner {\\n        locked = state;\\n    }\\n\\n    function mint(uint256[] memory seedIndices) external payable {\\n        uint seedPrice = wordPrice * seedIndices.length;\\n        require(!locked, \\\"LOCKED\\\");\\n        require(msg.value == seedPrice, \\\"PRICE\\\");\\n        _mintPoem(seedIndices, false);\\n    }\\n\\n    // function mintAndBind(uint256[] memory seedIndices, address to) external payable {\\n    //     // TODO: Verify signature\\n    //     _mintPoem(seedIndices, true);\\n    // }\\n\\n    function _mintPoem(uint256[] memory seedIndices, bool bound) internal {\\n        uint id = ++totalSupply;\\n\\n        // Keep track of words minted\\n        totalWords += seedIndices.length;\\n        require(totalWords < 2048, \\\"MINTABLE_WORD_LIMIT_REACHED_2048\\\");\\n\\n        // This generates the entropy from the seed indices\\n        // and simultaneously validates the seed.\\n        bytes memory entropy = mnemonicToEntropy(seedIndices);\\n\\n        // Words can only be minted once\\n        // for (uint i = 0; i < seedIndices.length; i++) {\\n        //     require(!isIndexMinted[seedIndices[i]], \\\"WORD_ALREADY_MINTED\\\");\\n        //     isIndexMinted[seedIndices[i]] = true;\\n        // }\\n        // hash entropy to check if it has been minted\\n        bytes32 entropyHash = keccak256(entropy);\\n        require(!isEntropyMinted[entropyHash], \\\"MNEMONIC_ALREADY_MINTED\\\");\\n        isEntropyMinted[entropyHash] = true;\\n\\n        // Store the seed\\n        seeds[id] = Seed({\\n            indices: seedIndices,\\n            entropy: entropy,\\n            bound: bound\\n        });\\n\\n        // Mint the token\\n        _mint(msg.sender, id);\\n    }\\n\\n    /**\\n     * @dev Intended to be used offchain\\n     */\\n    function getMintedIndices() external view returns (uint256[] memory) {\\n        uint256[] memory mintedIndicesArray = new uint256[](totalWords);\\n        uint words = 0;\\n        for (uint i = 0; i < totalSupply; i++) {\\n            for (uint j = 0; j < seeds[i].indices.length; j++) {\\n                mintedIndicesArray[words++] = seeds[i].indices[j];\\n            }\\n        }\\n        return mintedIndicesArray;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 BINDING\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * This method allows a seed poem to be bound to a specific\\n     * address that is derived from the seed itself.\\n     * @param id tokenId of the poem to be bound\\n     */\\n    function bind(\\n        uint256 id,\\n        address to /*, message, signature, address */\\n    ) public {\\n        require(ownerOf(id) == msg.sender, \\\"ONLY_OWNER\\\");\\n        // TODO: require valid signature signed offchain by the artist's \\\"validator\\\"\\n        transferFrom(msg.sender, to, id);\\n        seeds[id].bound = true;\\n    }\\n\\n    // Inherit natspec\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public override {\\n        require(!seeds[id].bound, \\\"BOUND\\\");\\n        super.transferFrom(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public override {\\n        require(!seeds[id].bound, \\\"BOUND\\\");\\n        super.safeTransferFrom(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public override {\\n        require(!seeds[id].bound, \\\"BOUND\\\");\\n        super.safeTransferFrom(from, to, id, data);\\n    }\\n\\n    /* /////////////////////////////////////////////////////////////\\n                                 UTILS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function withdraw(address payable _to) public onlyOwner {\\n        (bool success, ) = _to.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function renderSVG(uint256 _tokenId) external view returns (string memory) {\\n        return\\n            Render.renderSVG(\\n                indicesToWords(seeds[_tokenId].indices),\\n                seeds[_tokenId].entropy,\\n                getFont()\\n            );\\n    }\\n\\n    function renderSVGFromWords(\\n        uint256[] memory seedIndices\\n    ) external view returns (string memory) {\\n        bytes memory entropy = mnemonicToEntropy(seedIndices);\\n        return\\n            Render.renderSVG(indicesToWords(seedIndices), entropy, getFont());\\n    }\\n\\n    function renderSVGBase64(\\n        uint256 _tokenId\\n    ) external view returns (string memory) {\\n        return\\n            Render.renderSVGBase64(\\n                indicesToWords(seeds[_tokenId].indices),\\n                seeds[_tokenId].entropy,\\n                getFont()\\n            );\\n    }\\n\\n    function renderSVGBase64FromWords(\\n        uint256[] memory seedIndices\\n    ) external view returns (string memory) {\\n        bytes memory entropy = mnemonicToEntropy(seedIndices);\\n        return\\n            Render.renderSVGBase64(\\n                indicesToWords(seedIndices),\\n                entropy,\\n                getFont()\\n            );\\n    }\\n\\n    function renderSVGstatic(\\n        uint256 _tokenId\\n    ) external view returns (string memory) {\\n        return\\n            Render.renderSVGstatic(\\n                indicesToWords(seeds[_tokenId].indices),\\n                seeds[_tokenId].entropy,\\n                getFont()\\n            );\\n    }\\n\\n    function renderSVGstaticFromWords(\\n        uint256[] memory seedIndices\\n    ) external view returns (string memory) {\\n        bytes memory entropy = mnemonicToEntropy(seedIndices);\\n        return\\n            Render.renderSVGstatic(\\n                indicesToWords(seedIndices),\\n                entropy,\\n                getFont()\\n            );\\n    }\\n\\n    function renderSVGBase64static(\\n        uint256 _tokenId\\n    ) external view returns (string memory) {\\n        return\\n            Render.renderSVGBase64static(\\n                indicesToWords(seeds[_tokenId].indices),\\n                seeds[_tokenId].entropy,\\n                getFont()\\n            );\\n    }\\n\\n    function renderSVGBase64staticFromWords(\\n        uint256[] memory seedIndices\\n    ) external view returns (string memory) {\\n        bytes memory entropy = mnemonicToEntropy(seedIndices);\\n        return\\n            Render.renderSVGBase64static(\\n                indicesToWords(seedIndices),\\n                entropy,\\n                getFont()\\n            );\\n    }\\n\\n    function tokenURI(\\n        uint256 _tokenId\\n    ) public view override returns (string memory) {\\n        require(_ownerOf[_tokenId] != address(0), \\\"NOT_MINTED\\\");\\n        return\\n            Render.tokenURI(\\n                _tokenId,\\n                indicesToWords(seeds[_tokenId].indices),\\n                seeds[_tokenId].entropy,\\n                getFont()\\n            );\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Font\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    function setFont(string calldata fontString) external onlyOwner {\\n        font = SSTORE2.write(bytes(fontString));\\n    }\\n\\n    function getFont() public view returns (string memory) {\\n        return string(abi.encodePacked(SSTORE2.read(font)));\\n    }\\n}\\n\",\"keccak256\":\"0x9852fe7ee95534f040222d01e0c1c5e23a7ff5d96e473127b05f86364f865961\",\"license\":\"UNLICENSED\"},\"src/libraries/Background.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {SVG} from \\\"./SVG.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Background {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function render(\\n        string memory backgroundColor\\n    ) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"rect\\\",\\n                SVG.rectAttributes({\\n                    _width: \\\"100%\\\",\\n                    _height: \\\"100%\\\",\\n                    _fill: backgroundColor,\\n                    _attributes: \\\"\\\"\\n                })\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5f0c98eba8890f01c0c8dbddb311ed3f8012d92daedee16ea84db94c3bb83ea9\",\"license\":\"Unlicense\"},\"src/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    function encode(string memory _data) internal pure returns (string memory) {\\n        return encode(bytes(_data));\\n    }\\n\\n    function encode(bytes memory _data) internal pure returns (string memory) {\\n        if (_data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((_data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := _data\\n            let endPtr := add(dataPtr, mload(_data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(_data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x298c5050ef28c296db0e2f796e4c2747e8e014881517728e072fc15fdfc6c555\",\"license\":\"MIT\"},\"src/libraries/Effect.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {SVG} from \\\"./SVG.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Effect {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function vhsFilter(\\n        uint256 vhsLevel,\\n        uint256 distortionLevel,\\n        bool invert,\\n        bool animate\\n    ) internal pure returns (string memory) {\\n        string memory colorMatrix = invert\\n            ? \\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.35 0\\\"\\n            : \\\"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.35 0\\\";\\n        return\\n            string.concat(\\n                '<defs><filter id=\\\"vhs\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"616\\\" height=\\\"889\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\"><feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                (\\n                    vhsLevel == 1 ? \\\"-6\\\" : vhsLevel == 2 ? \\\"-9\\\" : vhsLevel == 3\\n                        ? \\\"-10\\\"\\n                        : /*l4+*/ \\\"-12\\\"\\n                ),\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"textBlur_pass1\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                vhsLevel == 1 ? \\\"-3\\\" : vhsLevel == 2 ? \\\"-4.5\\\" : vhsLevel == 3\\n                    ? \\\"-5\\\"\\n                    : /*l4+*/ \\\"-6\\\",\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"textBlur_pass1\\\" result=\\\"textBlur_pass2\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                vhsLevel == 1 ? \\\"3\\\" : vhsLevel == 2 ? \\\"4.5\\\" : vhsLevel == 3\\n                    ? \\\"5\\\"\\n                    : /*l4+*/ \\\"6\\\",\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"textBlur_pass2\\\" result=\\\"textBlur_pass3\\\" /><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"hardAlpha\\\" /><feOffset dx=\\\"',\\n                vhsLevel == 1 ? \\\"-6\\\" : vhsLevel == 2 ? \\\"-9\\\" : vhsLevel == 3\\n                    ? \\\"-10\\\"\\n                    : /*l4+*/ \\\"-12\\\",\\n                '\\\" /><feGaussianBlur stdDeviation=\\\"2\\\" /><feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" /><feColorMatrix type=\\\"matrix\\\" values=\\\"',\\n                colorMatrix,\\n                '\\\" /><feBlend mode=\\\"normal\\\" in2=\\\"textBlur_pass3\\\" result=\\\"textBlur_pass4\\\" /><feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"textBlur_pass4\\\" result=\\\"shape\\\" /><feGaussianBlur stdDeviation=\\\"',\\n                vhsLevel == 1 ? \\\"3.5\\\" : vhsLevel == 2 ? \\\"4\\\" : vhsLevel == 3\\n                    ? \\\"4.5\\\"\\n                    : /*l4+*/ \\\"5\\\",\\n                '\\\" result=\\\"textBlur_pass5\\\" />',\\n                '<feTurbulence baseFrequency=\\\".015\\\" type=\\\"fractalNoise\\\" />',\\n                '<feColorMatrix type=\\\"hueRotate\\\" values=\\\"0\\\">',\\n                (\\n                    animate\\n                        ? '<animate attributeName=\\\"values\\\" from=\\\"0\\\" to=\\\"360\\\" dur=\\\"16s\\\" repeatCount=\\\"indefinite\\\" />'\\n                        : \\\"\\\"\\n                ),\\n                \\\"</feColorMatrix>\\\",\\n                '<feDisplacementMap in=\\\"textBlur_pass5\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"B\\\" scale=\\\"',\\n                distortionLevel == 1 ? \\\"10\\\" : distortionLevel == 2\\n                    ? \\\"20\\\"\\n                    : \\\"22\\\",\\n                '\\\">',\\n                (\\n                    animate\\n                        ? (\\n                            string.concat(\\n                                '<animate attributeName=\\\"scale\\\" values=\\\"',\\n                                distortionLevel == 1\\n                                    ? \\\"10;20;15;25;15;20;10\\\"\\n                                    : distortionLevel == 2\\n                                    ? \\\"20;30;30;20\\\"\\n                                    : \\\"22:38:28:38:22\\\",\\n                                '\\\" dur=\\\"16s\\\" repeatCount=\\\"indefinite\\\" />'\\n                            )\\n                        )\\n                        : \\\"\\\"\\n                ),\\n                \\\"</feDisplacementMap></filter></defs>\\\"\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xe1cae91462baa5a9a8e82c06df3fac3073247eaa9e60ce167c32ab0a93024c94\",\"license\":\"Unlicense\"},\"src/libraries/Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Base64} from \\\"./Base64.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Metadata {\\n    string constant JSON_BASE64_HEADER = \\\"data:application/json;base64,\\\";\\n    string constant SVG_XML_BASE64_HEADER = \\\"data:image/svg+xml;base64,\\\";\\n\\n    function encodeMetadata(\\n        uint256 _tokenId,\\n        string memory _name,\\n        string memory _description,\\n        string memory _attributes,\\n        string memory _backgroundColor,\\n        string memory _svg,\\n        string memory _animation\\n    ) internal pure returns (string memory) {\\n        string memory metadata = string.concat(\\n            \\\"{\\\",\\n            Util.keyValue(\\\"tokenId\\\", Util.uint256ToString(_tokenId)),\\n            \\\",\\\",\\n            Util.keyValue(\\\"name\\\", _name),\\n            \\\",\\\",\\n            Util.keyValue(\\\"description\\\", _description),\\n            \\\",\\\",\\n            Util.keyValueNoQuotes(\\\"attributes\\\", _attributes),\\n            \\\",\\\",\\n            Util.keyValue(\\\"backgroundColor\\\", _backgroundColor),\\n            \\\",\\\",\\n            Util.keyValue(\\\"image\\\", _encodeSVG(_svg)),\\n            \\\",\\\",\\n            Util.keyValue(\\\"animation_url\\\", _encodeSVG(_animation)),\\n            \\\"}\\\"\\n        );\\n\\n        return _encodeJSON(metadata);\\n    }\\n\\n    /// @notice base64 encode json\\n    /// @param _json, stringified json\\n    /// @return string, bytes64 encoded json with prefix\\n    function _encodeJSON(\\n        string memory _json\\n    ) internal pure returns (string memory) {\\n        return string.concat(JSON_BASE64_HEADER, Base64.encode(_json));\\n    }\\n\\n    /// @notice base64 encode svg\\n    /// @param _svg, stringified json\\n    /// @return string, bytes64 encoded svg with prefix\\n    function _encodeSVG(\\n        string memory _svg\\n    ) internal pure returns (string memory) {\\n        return string.concat(SVG_XML_BASE64_HEADER, Base64.encode(bytes(_svg)));\\n    }\\n}\\n\",\"keccak256\":\"0xeffd26a54572b13e908c4ee3509887451b9741a11c49ab98462185eb802c827b\",\"license\":\"Unlicense\"},\"src/libraries/Render.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Metadata} from \\\"./Metadata.sol\\\";\\nimport {Util} from \\\"./Util.sol\\\";\\nimport {Traits} from \\\"./Traits.sol\\\";\\nimport {Background} from \\\"./Background.sol\\\";\\nimport {TextLine} from \\\"./TextLine.sol\\\";\\nimport {Traits} from \\\"./Traits.sol\\\";\\nimport {SVG} from \\\"./SVG.sol\\\";\\nimport {Effect} from \\\"./Effect.sol\\\";\\n\\n/// @notice Adopted from Bibos (0xf528e3381372c43f5e8a55b3e6c252e32f1a26e4)\\nlibrary Render {\\n    string public constant description = \\\"Seed Poems\\\";\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                TOKENURI\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function tokenURI(\\n        uint256 _tokenId,\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        string memory wordsStr = words[0];\\n        for (uint i = 1; i < words.length; i++) {\\n            wordsStr = string(abi.encodePacked(wordsStr, \\\" \\\", words[i]));\\n        }\\n        return\\n            Metadata.encodeMetadata({\\n                _tokenId: _tokenId,\\n                _name: _name(_tokenId),\\n                _description: wordsStr,\\n                _attributes: Traits.attributes(words, entropy),\\n                _backgroundColor: Traits.backgroundColor(words, entropy),\\n                _svg: _svg(words, entropy, base64font, false),\\n                _animation: _svg(words, entropy, base64font, true)\\n            });\\n    }\\n\\n    function renderSVG(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return _svg(words, entropy, base64font, true);\\n    }\\n\\n    function renderSVGBase64(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return Metadata._encodeSVG(_svg(words, entropy, base64font, true));\\n    }\\n\\n    function renderSVGstatic(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return _svg(words, entropy, base64font, false);\\n    }\\n\\n    function renderSVGBase64static(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font\\n    ) external pure returns (string memory) {\\n        return Metadata._encodeSVG(_svg(words, entropy, base64font, false));\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _svg(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory base64font,\\n        bool animate\\n    ) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"svg\\\",\\n                SVG.svgAttributes(),\\n                string.concat(\\n                    \\\"<defs><style>\\\",\\n                    '@font-face {font-family: \\\"EBGI\\\";src: url(\\\"',\\n                    base64font,\\n                    '\\\");',\\n                    // \\\"text {text-transform: uppercase;\\\"\\n                    \\\"}</style>\\\",\\n                    Effect.vhsFilter(\\n                        words.length <= 3 ? 4 : words.length <= 6\\n                            ? 3\\n                            : words.length <= 9\\n                            ? 2\\n                            : 1,\\n                        Traits.distortionType(entropy),\\n                        keccak256(\\n                            abi.encodePacked(Traits.textColor(words, entropy))\\n                        ) == keccak256(abi.encodePacked(\\\"#000000\\\")),\\n                        animate\\n                    ),\\n                    \\\"</defs>\\\"\\n                ),\\n                Background.render(Traits.backgroundColor(words, entropy)),\\n                SVG.element(\\n                    \\\"g\\\",\\n                    string.concat(\\n                        SVG.filterAttribute(\\\"vhs\\\"),\\n                        // ' style=\\\"mix-blend-mode:exclusion\\\" ',\\n                        \\\" \\\",\\n                        'transform=\\\"rotate(',\\n                        Traits.textRotation(words, entropy),\\n                        ')\\\"'\\n                    ),\\n                    _renderText(\\n                        words,\\n                        entropy,\\n                        Traits.textColor(words, entropy)\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _renderText(\\n        string[] memory words,\\n        bytes memory entropy,\\n        string memory textColor\\n    ) public pure returns (string memory) {\\n        uint256 wordCount = words.length;\\n        uint8 charsPerLine = 20;\\n        if (wordCount == 21) charsPerLine = 19;\\n        else if (wordCount == 18) charsPerLine = 18;\\n        else if (wordCount == 15) charsPerLine = 17;\\n        else if (wordCount == 12) charsPerLine = 16;\\n        else if (wordCount == 9) charsPerLine = 15;\\n        else if (wordCount == 6) charsPerLine = 12;\\n        else if (wordCount == 3) charsPerLine = 9;\\n        else if (wordCount != 24) revert(\\\"Invalid words per line\\\");\\n\\n        string[] memory tempLines = new string[](wordCount); // worst-case scenario, one word per line\\n        string memory line;\\n        uint256 lineCount = 0;\\n\\n        for (uint256 i = 0; i < words.length; i++) {\\n            if (\\n                bytes(line).length != 0 &&\\n                bytes(line).length + bytes(words[i]).length + 1 > charsPerLine\\n            ) {\\n                tempLines[lineCount] = line;\\n                lineCount++;\\n                line = words[i];\\n            } else {\\n                if (bytes(line).length != 0) {\\n                    line = string(abi.encodePacked(line, \\\" \\\", words[i]));\\n                } else {\\n                    line = words[i];\\n                }\\n            }\\n\\n            if (i == words.length - 1) {\\n                tempLines[lineCount] = line;\\n            }\\n        }\\n\\n        string memory fontSize = \\\"125\\\";\\n        uint256 yDistance = 120;\\n        if (wordCount == 6) {\\n            fontSize = \\\"93\\\";\\n            yDistance = 93;\\n        } else if (wordCount == 9) {\\n            fontSize = \\\"75\\\";\\n            yDistance = 75;\\n        } else if (wordCount == 12) {\\n            fontSize = \\\"75\\\";\\n            yDistance = 75;\\n        } else if (wordCount == 15) {\\n            fontSize = \\\"65\\\";\\n            yDistance = 65;\\n        } else if (wordCount == 18) {\\n            fontSize = \\\"62\\\";\\n            yDistance = 62;\\n        } else if (wordCount == 21) {\\n            fontSize = \\\"57\\\";\\n            yDistance = 57;\\n        } else if (wordCount == 24) {\\n            fontSize = \\\"55\\\";\\n            yDistance = 55;\\n        }\\n\\n        uint256 rotationSeed = Traits._rarity(entropy, \\\"rotation\\\");\\n        bool isPositive = rotationSeed % 2 == 0;\\n        uint256 degrees = (rotationSeed / 10) % 6;\\n        bytes memory svgTexts;\\n        for (uint256 i = 0; i <= lineCount; i++) {\\n            svgTexts = abi.encodePacked(\\n                svgTexts,\\n                TextLine.render(\\n                    tempLines[i],\\n                    (\\n                        isPositive\\n                            ? 90 + degrees * (words.length > 12 ? 1 : 2)\\n                            : 90 - degrees * (words.length > 12 ? 1 : 2)\\n                    ),\\n                    (444 - (lineCount * yDistance) / 2) + (i * yDistance),\\n                    fontSize,\\n                    textColor\\n                )\\n            );\\n        }\\n\\n        return SVG.element(\\\"g\\\", \\\"\\\", string(svgTexts));\\n    }\\n\\n    function _name(uint256 _tokenId) internal pure returns (string memory) {\\n        return\\n            string.concat(\\\"Mnemonic Poem \\\", Util.uint256ToString(_tokenId, 3));\\n    }\\n}\\n\",\"keccak256\":\"0xb403a2c8c37ba9b2d9b9276fafd6e81209d9d7802a50623ea9a99c232d2e6cf3\",\"license\":\"Unlicense\"},\"src/libraries/SVG.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary SVG {\\n    /*//////////////////////////////////////////////////////////////\\n                                 ELEMENT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes\\n    ) internal pure returns (string memory) {\\n        return string.concat(\\\"<\\\", _type, \\\" \\\", _attributes, \\\"/>\\\");\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _children\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<\\\",\\n                _type,\\n                \\\" \\\",\\n                _attributes,\\n                \\\">\\\",\\n                _children,\\n                \\\"</\\\",\\n                _type,\\n                \\\">\\\"\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2\\n    ) internal pure returns (string memory) {\\n        return element(_type, _attributes, string.concat(_child1, _child2));\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(_child1, _child2, _child3)\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(_child1, _child2, _child3, _child4)\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(_child1, _child2, _child3, _child4, _child5)\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(\\n                    _child1,\\n                    _child2,\\n                    _child3,\\n                    _child4,\\n                    _child5,\\n                    _child6\\n                )\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6,\\n        string memory _child7\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(\\n                    _child1,\\n                    _child2,\\n                    _child3,\\n                    _child4,\\n                    _child5,\\n                    _child6,\\n                    _child7\\n                )\\n            );\\n    }\\n\\n    function element(\\n        string memory _type,\\n        string memory _attributes,\\n        string memory _child1,\\n        string memory _child2,\\n        string memory _child3,\\n        string memory _child4,\\n        string memory _child5,\\n        string memory _child6,\\n        string memory _child7,\\n        string memory _child8\\n    ) internal pure returns (string memory) {\\n        return\\n            element(\\n                _type,\\n                _attributes,\\n                string.concat(\\n                    _child1,\\n                    _child2,\\n                    _child3,\\n                    _child4,\\n                    _child5,\\n                    _child6,\\n                    _child7,\\n                    _child8\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ATTRIBUTES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function svgAttributes() internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                'xmlns=\\\"http://www.w3.org/2000/svg\\\" '\\n                'xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" '\\n                'width=\\\"100%\\\" '\\n                'height=\\\"100%\\\" '\\n                'viewBox=\\\"0 0 616 889\\\" ',\\n                'preserveAspectRatio=\\\"xMidYMid meet\\\" ',\\n                'fill=\\\"none\\\" '\\n            );\\n    }\\n\\n    function textAttributes(\\n        string[2] memory _coords,\\n        string memory _fontSize,\\n        string memory _fontFamily,\\n        string memory _fill,\\n        string memory _attributes\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"x=\\\",\\n                Util.quote(_coords[0]),\\n                \\\"y=\\\",\\n                Util.quote(_coords[1]),\\n                \\\"font-size=\\\",\\n                Util.quote(string.concat(_fontSize, \\\"px\\\")),\\n                \\\"font-family=\\\",\\n                Util.quote(_fontFamily),\\n                \\\"fill=\\\",\\n                Util.quote(_fill),\\n                \\\" \\\",\\n                _attributes,\\n                \\\" \\\"\\n            );\\n    }\\n\\n    function rectAttributes(\\n        string memory _width,\\n        string memory _height,\\n        string memory _fill,\\n        string memory _attributes\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"width=\\\",\\n                Util.quote(_width),\\n                \\\"height=\\\",\\n                Util.quote(_height),\\n                \\\"fill=\\\",\\n                Util.quote(_fill),\\n                \\\" \\\",\\n                _attributes,\\n                \\\" \\\"\\n            );\\n    }\\n\\n    function filterAttribute(\\n        string memory _id\\n    ) internal pure returns (string memory) {\\n        return string.concat(\\\"filter=\\\", '\\\"', \\\"url(#\\\", _id, \\\")\\\", '\\\" ');\\n    }\\n}\\n\",\"keccak256\":\"0xec7f2f3d4425047a732b6dd274dc2e69b4e1f83837f27887efaa1a8cabe68487\",\"license\":\"Unlicense\"},\"src/libraries/TextLine.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\nimport {SVG} from \\\"./SVG.sol\\\";\\n\\nlibrary TextLine {\\n    /*//////////////////////////////////////////////////////////////\\n                                 RENDER\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function render(\\n        string memory text,\\n        uint256 xOffset,\\n        uint256 yOffset,\\n        string memory fontSize,\\n        string memory textColor\\n    ) internal pure returns (string memory) {\\n        return\\n            SVG.element(\\n                \\\"text\\\",\\n                SVG.textAttributes({\\n                    _fontSize: fontSize,\\n                    _fontFamily: \\\"EBGI, EB Garamond Italic, Garamond Italic, EB Garamond, Garamond, serif\\\",\\n                    _coords: [\\n                        Util.uint256ToString(xOffset),\\n                        Util.uint256ToString(yOffset)\\n                    ],\\n                    _fill: textColor,\\n                    _attributes: 'dy=\\\"0.4em\\\"' // offset text so yCoord aligns with top of text (magic number)\\n                }),\\n                text\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x939b7a08b6a2fbe0274017f33d8ebcafc88055acd0b1f5b5e7c1b7f091e1a190\",\"license\":\"Unlicense\"},\"src/libraries/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nimport {Util} from \\\"./Util.sol\\\";\\n\\nlibrary Traits {\\n    function distortionTrait(\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        uint256 distortion = distortionType(entropy);\\n        distortion == 1 ? \\\"Low\\\" : distortion == 2 ? \\\"Med\\\" : \\\"High\\\";\\n    }\\n\\n    function distortionType(\\n        bytes memory entropy\\n    ) internal pure returns (uint256) {\\n        return (_rarity(entropy, \\\"distortion\\\") % 3) + 1; // 1-3\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 Colors\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function colorTrait(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string[3] memory color = colorType(words, entropy);\\n        return color[0];\\n    }\\n\\n    function colorType(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string[3] memory) {\\n        uint256 colorRarity = _rarity(entropy, \\\"color\\\") % 78;\\n        // if (colorRarity < 72) return [\\\"Inverse\\\", \\\"#000000\\\", \\\"#FFFFFF\\\"];\\n        return [\\\"Void\\\", \\\"#F9F9F9\\\", \\\"#000000\\\"];\\n    }\\n\\n    // function colorType(\\n    //     string[] memory words,\\n    //     bytes memory entropy\\n    // ) internal pure returns (string[3] memory) {\\n    //     uint256 colorRarity = _rarity(entropy, \\\"color\\\") % 100;\\n    //     if (colorRarity < 4) return [\\\"Inverse\\\", \\\"#FFFFFF\\\", \\\"#000000\\\"];\\n    //     if (colorRarity < 8) return [\\\"Sky\\\", \\\"#CBF2FE\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 12) return [\\\"Rose\\\", \\\"#F4D9EE\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 16) return [\\\"Blue\\\", \\\"#0000A6\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 20) return [\\\"Blue\\\", \\\"#112748\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 24) return [\\\"Red\\\", \\\"#BC1818\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 28) return [\\\"Sand\\\", \\\"#E1D8C9\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 32) return [\\\"Gray\\\", \\\"#E0E0E0\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 36) return [\\\"Feather\\\", \\\"#A4AFC0\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 40) return [\\\"Charcoal\\\", \\\"#36414F\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 44) return [\\\"Mint\\\", \\\"#D9EED3\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 48) return [\\\"Purple\\\", \\\"#5A00CD\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 52) return [\\\"Yellow\\\", \\\"#FAC300\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 56) return [\\\"Red\\\", \\\"#BC1818\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 60) return [\\\"Brown\\\", \\\"#402F2F\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 64) return [\\\"Orange\\\", \\\"#FF9C54\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 68) return [\\\"Green\\\", \\\"#172E20\\\", \\\"#FFFFFF\\\"];\\n    //     return [\\\"Void\\\", \\\"#111111\\\", \\\"#FFFFFF\\\"];\\n    // }\\n\\n    // function colorType(\\n    //     string[] memory words,\\n    //     bytes memory entropy\\n    // ) internal pure returns (string[3] memory) {\\n    //     uint256 colorRarity = _rarity(entropy, \\\"color\\\") % 100;\\n    //     if (colorRarity < 2) return [\\\"Inverse\\\", \\\"#FFFFFF\\\", \\\"#000000\\\"];\\n    //     if (colorRarity < 5) return [\\\"Sky\\\", \\\"#CBF2FE\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 8) return [\\\"Rose\\\", \\\"#F4D9EE\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 11) return [\\\"Blue\\\", \\\"#0000A6\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 14) return [\\\"Red\\\", \\\"#BC1818\\\", \\\"#FFFFFF\\\"];\\n    //     if (colorRarity < 17) return [\\\"Sand\\\", \\\"#E1D8C9\\\", \\\"#FFFFFF\\\"];\\n    //     return [\\\"Void\\\", \\\"#111111\\\", \\\"#FFFFFF\\\"];\\n    // }\\n\\n    // function colorType(\\n    //     string[] memory words,\\n    //     bytes memory entropy\\n    // ) internal pure returns (string[3] memory) {\\n    //     uint256 colorRarity = _rarity(entropy, \\\"color\\\") % 79;\\n    //     if (colorRarity < 1) return [\\\"Inverse\\\", \\\"#FFFFFF\\\", \\\"#000000\\\"];\\n    //     else if (colorRarity < 6) return [\\\"Sky\\\", \\\"#000000\\\", \\\"#CBF2FE\\\"];\\n    //     else if (colorRarity < 11) return [\\\"Rose\\\", \\\"#000000\\\", \\\"#F4D9EE\\\"];\\n    //     else if (colorRarity < 16) return [\\\"Blue\\\", \\\"#000000\\\", \\\"#0000A6\\\"];\\n    //     else if (colorRarity < 21) return [\\\"Red\\\", \\\"#000000\\\", \\\"#BC1818\\\"];\\n    //     else if (colorRarity < 26) return [\\\"Sand\\\", \\\"#000000\\\", \\\"#E1D8C9\\\"];\\n    //     // else if (colorRarity < 13) return [\\\"Pink\\\", \\\"#F89EE4\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 16) return [\\\"Yellow\\\", \\\"#FFD600\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     // else if (colorRarity < 55) return [\\\"Brown\\\", \\\"#132540\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 60) return [\\\"Beige\\\", \\\"#E0E0E0\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 75) return [\\\"Green\\\", \\\"#172E20\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else return [\\\"Void\\\", \\\"#000000\\\", \\\"#FFFFFF\\\"];\\n    // }\\n\\n    // function colorType(\\n    //     string[] memory words,\\n    //     bytes memory entropy\\n    // ) internal pure returns (string[3] memory) {\\n    //     uint256 colorRarity = _rarity(entropy, \\\"color\\\") % 79;\\n    //     if (colorRarity < 1) return [\\\"White\\\", \\\"#FFFFFF\\\", \\\"#000000\\\"];\\n    //     else if (colorRarity < 6) return [\\\"Sky\\\", \\\"#CBF2FE\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 11) return [\\\"Rose\\\", \\\"#F4D9EE\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 16) return [\\\"Blue\\\", \\\"#0000A6\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 21) return [\\\"Red\\\", \\\"#BC1818\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 26) return [\\\"Sand\\\", \\\"#E1D8C9\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 13) return [\\\"Pink\\\", \\\"#F89EE4\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 16) return [\\\"Yellow\\\", \\\"#FFD600\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     // else if (colorRarity < 55) return [\\\"Brown\\\", \\\"#132540\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 60) return [\\\"Beige\\\", \\\"#E0E0E0\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 75) return [\\\"Green\\\", \\\"#172E20\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else return [\\\"Void\\\", \\\"#000000\\\", \\\"#FFFFFF\\\"];\\n    // }\\n\\n    // function colorType(\\n    //     string[] memory words,\\n    //     bytes memory entropy\\n    // ) internal pure returns (string[3] memory) {\\n    //     uint256 colorRarity = _rarity(entropy, \\\"color\\\") % 79;\\n    //     if (colorRarity < 1) return [\\\"Orange\\\", \\\"#ffff\\\", \\\"#000\\\"];\\n    //     else if (colorRarity < 5) return [\\\"Gray\\\", \\\"#D3CFBD\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 10) return [\\\"Blue\\\", \\\"#0007B7\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 15) return [\\\"Orange\\\", \\\"#FF9C54\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 10) return [\\\"Charcoal\\\", \\\"#36414F\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 13) return [\\\"Pink\\\", \\\"#F89EE4\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 16) return [\\\"Yellow\\\", \\\"#FFD600\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     // else if (colorRarity < 55) return [\\\"Brown\\\", \\\"#132540\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 60) return [\\\"Beige\\\", \\\"#E0E0E0\\\", \\\"#FFFFFF\\\"];\\n    //     // else if (colorRarity < 75) return [\\\"Green\\\", \\\"#172E20\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else return [\\\"Void\\\", \\\"#000000\\\", \\\"#FFFFFF\\\"];\\n    // }\\n\\n    // function colorType(\\n    //     string[] memory words,\\n    //     bytes memory entropy\\n    // ) internal pure returns (string[3] memory) {\\n    //     uint256 colorRarity = _rarity(entropy, \\\"color\\\") % 79;\\n    //     if (colorRarity < 5) return [\\\"Blue\\\", \\\"#0007B7\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 10) return [\\\"Gray\\\", \\\"#E0E0E0\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else if (colorRarity < 15) return [\\\"Petrol\\\", \\\"#00FF19\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else if (colorRarity < 20) return [\\\"Charcoal\\\", \\\"#36414F\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 25) return [\\\"Mint\\\", \\\"#ECFFB8\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else if (colorRarity < 30) return [\\\"Marine\\\", \\\"#74FFE6\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else if (colorRarity < 35) return [\\\"Purple\\\", \\\"#5A00CD\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 40) return [\\\"Pink\\\", \\\"#F89EE4\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 45) return [\\\"Yellow\\\", \\\"#FFD600\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else if (colorRarity < 50) return [\\\"Red\\\", \\\"#E81C10\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 55) return [\\\"Brown\\\", \\\"#402F2F\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 60) return [\\\"Beige\\\", \\\"#D3CFBD\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 65) return [\\\"Sky\\\", \\\"#81E1FF\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 70) return [\\\"Orange\\\", \\\"#FF9C54\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 75) return [\\\"Green\\\", \\\"#254A2E\\\", \\\"#FFFFFF\\\"];\\n    //     else if (colorRarity < 77) return [\\\"White\\\", \\\"#FFFFFF\\\", \\\"#FFFFFF\\\"];\\n    //     //\\\"#000000\\\"];\\n    //     else return [\\\"Void\\\", \\\"#000000\\\", \\\"#FFFFFF\\\"];\\n    // }\\n\\n    function backgroundColor(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string[3] memory color = colorType(words, entropy);\\n        return color[1];\\n    }\\n\\n    function textColor(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string[3] memory color = colorType(words, entropy);\\n        return color[2];\\n    }\\n\\n    function textRotation(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        uint256 rotationSeed = _rarity(entropy, \\\"rotation\\\");\\n        bool isPositive = rotationSeed % 2 == 0;\\n        uint256 degrees = (rotationSeed / 10) % 6;\\n        uint256 float = (rotationSeed / 100) % 1000;\\n        return\\n            string.concat(\\n                isPositive ? \\\"\\\" : \\\"-\\\",\\n                Util.uint256ToString(degrees),\\n                \\\".\\\",\\n                Util.uint256ToString(float)\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 TRAITS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function attributes(\\n        string[] memory words,\\n        bytes memory entropy\\n    ) internal pure returns (string memory) {\\n        string memory result = \\\"[\\\";\\n        result = string.concat(\\n            result,\\n            _attribute(\\\"Color\\\", colorTrait(words, entropy)),\\n            _attribute(\\\"Words\\\", Util.uint256ToString(words.length))\\n        );\\n        return string.concat(result, \\\"]\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _attribute(\\n        string memory _traitType,\\n        string memory _value\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"{\\\",\\n                Util.keyValue(\\\"trait_type\\\", _traitType),\\n                \\\",\\\",\\n                Util.keyValue(\\\"value\\\", _value),\\n                \\\"}\\\"\\n            );\\n    }\\n\\n    function _rarity(\\n        bytes memory _seed,\\n        string memory _salt\\n    ) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(_seed, _salt)));\\n    }\\n}\\n\",\"keccak256\":\"0x3357f3ea0682984fa9fce3551c7d5008ef16a4d85091d38d9c351b07b065bb2e\",\"license\":\"Unlicense\"},\"src/libraries/Util.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0;\\n\\nlibrary Util {\\n    error NumberHasTooManyDigits();\\n\\n    /// @notice wraps a string in quotes and adds a space after\\n    function quote(string memory value) internal pure returns (string memory) {\\n        return string.concat('\\\"', value, '\\\" ');\\n    }\\n\\n    function keyValue(\\n        string memory _key,\\n        string memory _value\\n    ) internal pure returns (string memory) {\\n        return string.concat('\\\"', _key, '\\\":\\\"', _value, '\\\"');\\n    }\\n\\n    function keyValueNoQuotes(\\n        string memory _key,\\n        string memory _value\\n    ) internal pure returns (string memory) {\\n        return string.concat('\\\"', _key, '\\\":', _value);\\n    }\\n\\n    /// @notice converts a tokenId to string and pads to _digits digits\\n    /// @dev tokenId must be less than 10**_digits\\n    /// @param _tokenId, uint256, the tokenId\\n    /// @param _digits, uint8, the number of digits to pad to\\n    /// @return result the resulting string\\n    function uint256ToString(\\n        uint256 _tokenId,\\n        uint8 _digits\\n    ) internal pure returns (string memory result) {\\n        uint256 max = 10 ** _digits;\\n        if (_tokenId >= max) revert NumberHasTooManyDigits();\\n        // add leading zeroes\\n        result = uint256ToString(_tokenId + max);\\n        assembly {\\n            // cut off one character\\n            result := add(result, 1)\\n            // store new length = _digits\\n            mstore(result, _digits)\\n        }\\n    }\\n\\n    /// @notice converts a uint256 to ascii representation, without leading zeroes\\n    /// @param _value, uint256, the value to convert\\n    /// @return result the resulting string\\n    function uint256ToString(\\n        uint256 _value\\n    ) internal pure returns (string memory result) {\\n        if (_value == 0) return \\\"0\\\";\\n\\n        assembly {\\n            // largest uint = 2^256-1 has 78 digits\\n            // reserve 110 = 78 + 32 bytes of data in memory\\n            // (first 32 are for string length)\\n\\n            // get 110 bytes of free memory\\n            result := add(mload(0x40), 110)\\n            mstore(0x40, result)\\n\\n            // keep track of digits\\n            let digits := 0\\n\\n            for {\\n\\n            } gt(_value, 0) {\\n\\n            } {\\n                // increment digits\\n                digits := add(digits, 1)\\n                // go back one byte\\n                result := sub(result, 1)\\n                // compute ascii char\\n                let c := add(mod(_value, 10), 48)\\n                // store byte\\n                mstore8(result, c)\\n                // advance to next digit\\n                _value := div(_value, 10)\\n            }\\n            // go back 32 bytes\\n            result := sub(result, 32)\\n            // store the length\\n            mstore(result, digits)\\n        }\\n    }\\n\\n    function bytes1ToString(\\n        bytes1 _value\\n    ) internal pure returns (string memory) {\\n        return uint256ToString(uint8(_value));\\n    }\\n\\n    function uint8ToString(uint8 _value) internal pure returns (string memory) {\\n        return uint256ToString(_value);\\n    }\\n\\n    /// @notice will revert in any characters are not in [0-9]\\n    function stringToUint256(\\n        string memory _value\\n    ) internal pure returns (uint256 result) {\\n        // 0-9 are 48-57\\n\\n        bytes memory value = bytes(_value);\\n        if (value.length == 0) return 0;\\n        uint256 multiplier = 10 ** (value.length - 1);\\n        uint256 i;\\n        while (multiplier != 0) {\\n            result += uint256((uint8(value[i]) - 48)) * multiplier;\\n            unchecked {\\n                multiplier /= 10;\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function bytes1ToHex(bytes1 _value) internal pure returns (string memory) {\\n        bytes memory result = new bytes(2);\\n        uint8 x = uint8(_value);\\n\\n        result[0] = getHexChar(x >> 4);\\n        result[1] = getHexChar(x % 16);\\n\\n        return string(result);\\n    }\\n\\n    function bytes32ToBytes(bytes32 x) internal pure returns (bytes memory) {\\n        bytes memory bytesString = new bytes(32);\\n        for (uint i = 0; i < 32; i++) {\\n            if (x[i] == 0) {\\n                bytesString[i] = bytes1(0x20);\\n            } else {\\n                bytesString[i] = x[i];\\n            }\\n        }\\n        return abi.encodePacked(bytesString);\\n    }\\n\\n    function bytes32ToString(bytes32 x) internal pure returns (string memory) {\\n        return string(bytes32ToBytes(x));\\n    }\\n\\n    function getHexChar(uint8 _value) internal pure returns (bytes1) {\\n        if (_value < 10) {\\n            return bytes1(_value + 48);\\n        }\\n        _value -= 10;\\n        return bytes1(_value + 97);\\n    }\\n\\n    function stringToBytes1(\\n        string memory _value\\n    ) internal pure returns (bytes1 result) {\\n        return bytes1(uint8(stringToUint256(_value)));\\n    }\\n\\n    function getRGBString(\\n        bytes memory _palette,\\n        uint256 _pos\\n    ) internal pure returns (string memory result) {\\n        return\\n            string.concat(\\n                \\\"#\\\",\\n                Util.bytes1ToHex(_palette[3 * _pos]),\\n                Util.bytes1ToHex(_palette[3 * _pos + 1]),\\n                Util.bytes1ToHex(_palette[3 * _pos + 2])\\n            );\\n    }\\n\\n    function getRGBString(\\n        bytes3 _color\\n    ) internal pure returns (string memory result) {\\n        return\\n            string.concat(\\n                \\\"#\\\",\\n                Util.bytes1ToHex(_color[0]),\\n                Util.bytes1ToHex(_color[1]),\\n                Util.bytes1ToHex(_color[2])\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x2504c3f999b200d7883c00c73bae04d5fcc305900e015dec580e6ecc50e7a216\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c90816301ffc9a7146126475750806306bddb19146122ba57806306fdde03146121f4578063081812fc146121995780630908853214612094578063095ea7b314611fa65780630b35610214611f675780630dd0a04214611ed557806316c6ca9714611d6957806317aee9ba14611d0f57806318160ddd14611cd157806323b872dd14611cb95780632a2758be14611ca25780633438c9b314611c665780633558587714611c475780633d92e4f014611c0557806342842e0e14611aea57806346623ecd14611a90578063492f7e04146119a65780634c0e5ec91461194c5780634d81e4331461192a5783816351cff8d914611895575080635ca2ddf1146117c45780636352211e1461176957806370a08231146116a0578063728ac96a1461166257806378d20fa21461157d5780638da5cb5b1461152957806395d89b411461140a578063985e593714611344578063a22cb4651461126f578063a582fc5614611222578063b3f05b97146111df578063b4d7ec711461115d578063b88d4fde14610f8d578063c6dc80fb14610f5e578063c87b56dd14610e25578063cf30901214610de2578063d12a4c9814610d11578063d451a75714610c40578063e985e9c514610bc7578063eb60633a14610b7d578063ed9978c714610abe578063f0503e8014610a3e578063f1eeb61b146109f2578063f232b8e61461089f578063f2fde38b146107e95763f8e93ef91461023657600080fd5b61023f366129f7565b9161080a548351908181029181830414901517156107bd5760ff61080b541661076057340361070457610809926102768454612efc565b809455610800815161028c61080d918254612eb3565b80915510156106a75761029e81613748565b918251926020938482012080885261080c9081865260ff878a20541661064b578852845284872092600193847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055855191606083019167ffffffffffffffff92848110848211176105c6578852835285830190815286830191898352888a526108088752878a20935180519082821161061f5768010000000000000000821161061f5788908c87548489558484828210610604575b5050505001858c52888c20888d5b8481106105f25750925050508401915180519182116105c6576103938261038d8554612833565b85612f83565b87908b601f841160011461051d579260029492819261041a98979592610512575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828a1b9260031b1c19161790555b51151591019060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b610425331515613c73565b8486526002835273ffffffffffffffffffffffffffffffffffffffff84872054166104b657509060029133865260038252838620908154019055838552528220337fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905533827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a480f35b606490838551917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600e60248201527f414c52454144595f4d494e5445440000000000000000000000000000000000006044820152fd5b0151905038806103b4565b909183927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08a95168684528b8420935b8c8282106105b05750509161041a989795939185600298969410610579575b505050811b0190556103e5565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c1916905538808061056c565b8385015186558c9790950194938401930161054d565b60248b6041887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8b845194019381840155018990610366565b838b6106169552209182019101612f6c565b8c388484610358565b60248c6041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b606484878951917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601760248201527f4d4e454d4f4e49435f414c52454144595f4d494e5445440000000000000000006044820152fd5b50602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602060248201527f4d494e5441424c455f574f52445f4c494d49545f524541434845445f323034386044820152fd5b602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600560248201527f50524943450000000000000000000000000000000000000000000000000000006044820152fd5b50602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152fd5b6024856011847f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b833461089c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089c577fffffffffffffffffffffffff00000000000000000000000000000000000000006108426129d4565b6108079081549073ffffffffffffffffffffffffffffffffffffffff9061086c8284163314612cef565b1692839116179055337f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b80fd5b50346109ee57602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109ea5783813580825261080880865284832085519081888254918281520191865288862090865b8a8282106109d357505050509061091181610916930382612735565b613a75565b91835285526001848320019261095e61092d61409b565b865195869485947f0403faa4000000000000000000000000000000000000000000000000000000008652850161403b565b038173__$31c0833bf1f99a480d7ff9c84446810f95$__5af49384156109c857809461099e575b505061099a905192828493845283019061296e565b0390f35b61099a929450906109c0913d8091833e6109b88183612735565b810190613f87565b929038610985565b8251903d90823e3d90fd5b835485528c985090930192600192830192016108f5565b8380fd5b8280fd5b5090346109ee5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109ee578160209360ff9235815261080c855220541690519015158152f35b5090346109ee5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109ee57918192358152610808602052209060ff6002825193610a9c85610a958160018501612c3a565b0386612735565b015416610ab2825193838594855284019061296e565b90151560208301520390f35b50829034610b7957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b79578051918183019083821067ffffffffffffffff831117610b4d575061099a93508152600782527f656e676c6973680000000000000000000000000000000000000000000000000060208301525191829160208352602083019061296e565b806041867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b5080fd5b50823461089c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089c5750610bbc61099a9235613a39565b905191829182612b51565b838234610b7957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b795760ff81602093610c056129d4565b610c0d6129b1565b73ffffffffffffffffffffffffffffffffffffffff91821683526005875283832091168252855220549151911615158152f35b50346109ee57602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109ea5783813580825261080880865284832085519081888254918281520191865288862090865b8a828210610cfa57505050509061091181610cb2930382612735565b91835285526001848320019261095e610cc961409b565b865195869485947ffcb70035000000000000000000000000000000000000000000000000000000008652850161403b565b835485528c98509093019260019283019201610c96565b50346109ee57602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109ea5783813580825261080880865284832085519081888254918281520191865288862090865b8a828210610dcb57505050509061091181610d83930382612735565b91835285526001848320019261095e610d9a61409b565b865195869485947f74a06ecf000000000000000000000000000000000000000000000000000000008652850161403b565b835485528c98509093019260019283019201610d67565b838234610b7957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b795760209060ff61080b541690519015158152f35b50346109ee576020917ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc908382360112610f5a57808591359081835260028652610e8973ffffffffffffffffffffffffffffffffffffffff86852054161515612d54565b8183526108089384875285842086519081898254918281520191875289872090875b8b828210610f4357505050508161091161095e9493610ecb930382612735565b958486528852600187862001610f34610ee261409b565b91610f248a51998a9889987f88508639000000000000000000000000000000000000000000000000000000008a52890152608060248901526084880190613fe6565b9084878303016044880152612c3a565b9184830301606485015261296e565b835485528d99509093019260019283019201610eab565b8480fd5b838234610b795761099a90610f7a610f75366129f7565b613748565b905191829160208352602083019061296e565b5090346109ee5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109ee57610fc66129d4565b90610fcf6129b1565b916044359260643567ffffffffffffffff811161115957610ff39036908501612c0c565b9285885261080860205261101060ff6002898b2001541615613cd8565b61101b868483613d3d565b823b15958615611033575b8861103088613f22565b80f35b9091929380959650875195869485937f150b7a0200000000000000000000000000000000000000000000000000000000998a8652339086015273ffffffffffffffffffffffffffffffffffffffff80961660248601526044850152606484016080905281608485015260a48401378881830160a40152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681010360a40192169181875a94602095f19283156111505750611030927fffffffff00000000000000000000000000000000000000000000000000000000918591611122575b501614388080808080611026565b611143915060203d8111611149575b61113b8183612735565b810190613eea565b38611114565b503d611131565b513d85823e3d90fd5b8680fd5b833461089c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089c5761080660017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082546111d873ffffffffffffffffffffffffffffffffffffffff8260081c163314612e4e565b1617905580f35b838234610b7957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b795760209060ff610806541690519015158152f35b5090346109ee5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109ee57359161080083101561089c5750610f7a61099a92600601612886565b838234610b7957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b79576112a76129d4565b906024359081151591828103610f5a5761131790338652600560205273ffffffffffffffffffffffffffffffffffffffff8387209516948587526020528286209060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b50346109ee5782611354366129f7565b9261136761136185613748565b94613a75565b906113a461137361409b565b855196879485947ffcb700350000000000000000000000000000000000000000000000000000000086528501614072565b038173__$31c0833bf1f99a480d7ff9c84446810f95$__5af4918215611400578361099a94936113e3575b50505191829160208352602083019061296e565b6113f89293503d8091833e6109b88183612735565b9038806113cf565b81513d85823e3d90fd5b838234610b7957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b795780519082600180549161144c83612833565b808652928281169081156114e35750600114611487575b5050506114758261099a940383612735565b5191829160208352602083019061296e565b94508085527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8286106114cb5750505061147582602061099a9582010194611463565b805460208787018101919091529095019481016114ae565b61099a9750869350602092506114759491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b82010194611463565b838234610b7957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b795760209073ffffffffffffffffffffffffffffffffffffffff61080754169051908152f35b50346109ee5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109ee5781359067ffffffffffffffff82116109ea576015600b6115d36116029436908701612c0c565b949073ffffffffffffffffffffffffffffffffffffffff956115fb8761080754163314612cef565b36916127f7565b9283519060018201901b6a61000080600a3d393df30017845201910184f0918215611657575061080e91167fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905580f35b63301164258452601cfd5b838234610b7957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b795760209061080a549051908152f35b50919034610b795760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b795773ffffffffffffffffffffffffffffffffffffffff6116ef6129d4565b1690811561170c5760208480858581526003845220549051908152f35b60649060208551917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152fd5b50823461089c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089c575073ffffffffffffffffffffffffffffffffffffffff6117bc60209335612db9565b915191168152f35b50346109ee57602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109ea5783813580825261080880865284832085519081888254918281520191865288862090865b8a82821061187e57505050509061091181611836930382612735565b91835285526001848320019261095e61184d61409b565b865195869485947feb5cf9ab000000000000000000000000000000000000000000000000000000008652850161403b565b835485528c9850909301926001928301920161181a565b82818534610b795760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b79573573ffffffffffffffffffffffffffffffffffffffff908181168091036109ee57828092916118fd829361080754163314612cef565b47905af1903d156119245761191c906119153d6127bd565b9051612735565b1561089c5780f35b5061191c565b838234610b795761099a90611941610911366129f7565b905191829182612b8c565b50346109ee578261195c366129f7565b9261196961136185613748565b906113a461197561409b565b855196879485947f0403faa40000000000000000000000000000000000000000000000000000000086528501614072565b50829034610b7957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b79576119e361080d54612fd9565b918080610809545b8083106119ff5784518061099a8882612b51565b819594955b8383526020610808815287842054821015611a7b578784208054831015611a4f5784528320810154611a4a9190611a44611a3d88612efc565b9789612f29565b52612efc565b611a04565b60248560328c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b505091611a8a90959495612efc565b916119eb565b50346109ee5782611aa0366129f7565b92611aad61136185613748565b906113a4611ab961409b565b855196879485947feb5cf9ab0000000000000000000000000000000000000000000000000000000086528501614072565b5090346109ee57611afa36612a94565b929190838652610808602052611b1960ff600287892001541615613cd8565b611b24848284613d3d565b803b15938415611b39575b8661103086613f22565b60209293945060a49087875195869485937f150b7a0200000000000000000000000000000000000000000000000000000000998a8652339086015273ffffffffffffffffffffffffffffffffffffffff8093166024860152604485015260806064850152826084850152165af19283156111505750611030927fffffffff00000000000000000000000000000000000000000000000000000000918591611be7575b50161438808080611b2f565b611bff915060203d81116111495761113b8183612735565b38611bdb565b50823461089c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089c575061194161091161099a9335613a39565b838234610b795761099a90611941610911611c6136612af4565b613028565b838234610b7957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b795761099a90610f7a61409b565b838234610b795761099a90610bbc611c6136612af4565b833461089c57611030611ccb36612a94565b91613d3d565b838234610b7957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b7957602090610809549051908152f35b50346109ee5782611d1f366129f7565b92611d2c61136185613748565b906113a4611d3861409b565b855196879485947f74a06ecf0000000000000000000000000000000000000000000000000000000086528501614072565b50346109ee57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109ee578051620100009267ffffffffffffffff9184810183811182821017611ea9578452855b858110611e9b575050825193840191821184831017611e6f57508152600683835b6108008210611e525750505051906020928383018484526201002084019291945b6108008610611e0c5784840385f35b9091928180611e45837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08960019603018752875161296e565b9501930195019490611dfd565b600160208192611e6186612886565b815201930191019091611ddc565b8460416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b606082820152602001611dbb565b6024876041857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b505034610b795760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b795735801515809103610b7957611f3573ffffffffffffffffffffffffffffffffffffffff61080754163314612cef565b61080b9060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00835416911617905580f35b50823461089c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089c5750610f7a61099a9235613b2f565b5090346109ee57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109ee57611fde6129d4565b9060243592838552600260205273ffffffffffffffffffffffffffffffffffffffff90818187205416928333148015612075575b61201b90612de9565b8587526020528520921691827fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b508387526005602090815282882033895290528187205460ff16612012565b50829034610b7957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b795782356120cf6129b1565b936120d982612db9565b73ffffffffffffffffffffffffffffffffffffffff3391160361213c5750612105816002949533613d3d565b835261080860205282200160017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905580f35b60649060208451917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600a60248201527f4f4e4c595f4f574e4552000000000000000000000000000000000000000000006044820152fd5b5090346109ee5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109ee57816020938273ffffffffffffffffffffffffffffffffffffffff9335825285522054169051908152f35b838234610b7957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b795780519082805461223381612833565b808552916001918083169081156114e3575060011461225e575050506114758261099a940383612735565b80809650527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8286106122a25750505061147582602061099a9582010194611463565b80546020878701810191909152909501948101612285565b50919034610b7957827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610b795780359267ffffffffffffffff908185116109ea57366023860112156109ea5784830135612317816127a5565b9461232483519687612735565b8186526020968787016024809460051b830101913683116109ea57848101915b83831061260c575050505081359160ff6108065461237c73ffffffffffffffffffffffffffffffffffffffff8260081c163314612e4e565b166125b15761238c875184612eb3565b937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9485810190811161258657610800111561252b5750815b8751811015612527576123d88189612f29565b516123e38286612eb3565b6108008110156124fc57600601908051908882116124d1576124098261038d8554612833565b8b90601f831160011461244b5761243b94939291879183612440575b5050888260011b9260031b1c1916179055612efc565b6123c5565b015190503880612425565b8387528c872091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08416888f5b8282106124ba575050908461243b979695949392106124a3575b505050600190811b019055612efc565b01518960f88460031b161c19169055388080612493565b60018596829396860151815501950193018f612479565b848660418c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b838560328b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8280f35b600e6064928a899351937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f696e64657820746f6f20686967680000000000000000000000000000000000006044820152fd5b828460118a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8560096064928a8751937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f66696e616c697a656400000000000000000000000000000000000000000000006044820152fd5b823588811161264357820136604382011215612643578b916126388392369060448b82013591016127f7565b815201920191612344565b8580fd5b849084346109ee5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109ee57357fffffffff0000000000000000000000000000000000000000000000000000000081168091036109ee57602092507f01ffc9a700000000000000000000000000000000000000000000000000000000811490811561270b575b81156126e1575b5015158152f35b7f5b5e139f00000000000000000000000000000000000000000000000000000000915014836126da565b7f80ac58cd00000000000000000000000000000000000000000000000000000000811491506126d3565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761277657604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116127765760051b60200190565b67ffffffffffffffff811161277657601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192612803826127bd565b916128116040519384612735565b82948184528183011161282e578281602093846000960137010152565b600080fd5b90600182811c9216801561287c575b602083101461284d57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691612842565b906040519182600082549261289a84612833565b90818452600194858116908160001461290957506001146128c6575b50506128c492500383612735565b565b9093915060005260209081600020936000915b8183106128f15750506128c4935082010138806128b6565b855488840185015294850194879450918301916128d9565b90506128c49550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b82010138806128b6565b60005b83811061295e5750506000910152565b818101518382015260200161294e565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6020936129aa8151809281875287808801910161294b565b0116010190565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361282e57565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361282e57565b6020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83011261282e576004359167ffffffffffffffff831161282e578060238401121561282e578260040135612a4e816127a5565b93612a5c6040519586612735565b81855260248486019260051b82010192831161282e57602401905b828210612a85575050505090565b81358152908301908301612a77565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc606091011261282e5773ffffffffffffffffffffffffffffffffffffffff90600435828116810361282e5791602435908116810361282e579060443590565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261282e576004359067ffffffffffffffff821161282e578060238301121561282e57816024612b4e936004013591016127f7565b90565b6020908160408183019282815285518094520193019160005b828110612b78575050505090565b835185529381019392810192600101612b6a565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310612bc05750505050505090565b9091929394958480612bfc837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a5161296e565b9801930193019194939290612bb0565b9181601f8401121561282e5782359167ffffffffffffffff831161282e576020838186019501011161282e57565b9060009291805491612c4b83612833565b918282526001938481169081600014612cad5750600114612c6d575b50505050565b90919394506000526020928360002092846000945b838610612c99575050505001019038808080612c67565b805485870183015294019385908201612c82565b91505060209495507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009193501683830152151560051b01019038808080612c67565b15612cf657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152fd5b15612d5b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f4d494e544544000000000000000000000000000000000000000000006044820152fd5b600052600260205273ffffffffffffffffffffffffffffffffffffffff60406000205416906128c4821515612d54565b15612df057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152fd5b15612e5557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6f6e6c79206465706c6f796572000000000000000000000000000000000000006044820152fd5b91908201809211612ec057565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91908203918211612ec057565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114612ec05760010190565b8051821015612f3d5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b818110612f77575050565b60008155600101612f6c565b9190601f8111612f9257505050565b6128c4926000526020600020906020601f840160051c83019310612fbe575b601f0160051c0190612f6c565b9091508190612fb1565b908151811015612f3d570160200190565b90612fe3826127a5565b612ff06040519182612735565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061301e82946127a5565b0190602036910137565b90604090815183519360208561304282978584860161294b565b8360009485928101039060025afa15613692578151938051918683019267ffffffffffffffff93818110858211176136655783528481529484955b82518710156131f1576130908784612fc8565b5160f81c8451858101818110888211176131c457908b92918752600880825283820192843685378a5b82811061310e575050509161310893613102926130f694895195836130e7889551809288808901910161294b565b8401915180938684019061294b565b01038084520182612735565b96612efc565b9561307d565b9091929394506007818103908111613197578e9695949392916131699183901c600116613171577f30000000000000000000000000000000000000000000000000000000000000005b8d1a6131638287612fc8565b53612efc565b9594956130b9565b7f3100000000000000000000000000000000000000000000000000000000000000613157565b60248c7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024897f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b919395509691958651956101208701908782109082111761366557875261010090818752813685890137855b8281106135c157505050825195868060031b04600814871517156134cb577f3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe600197881b1661326b81613703565b96865b82811061357f57505050906132b49291519581613294889351809286808701910161294b565b82016132a88251809386808501910161294b565b01038086520184612735565b8051908160031b918083046008149015171561355257906132d9915160021c90612eb3565b926007840180941161352557600b809404916132f483612fd9565b94815b8481106133075750505050505090565b8181028181048314821517156134f8578482018083116134cb57838102908082048514901517156134cb578751808210156134c457505b61335061334b8383612eef565b613703565b91805b828110613477575050508390858086905b613380575b5050509061337b91611a44828a612f29565b6132f7565b8251811015613472577f31000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000006133d58386612fc8565b5116146133ec575b6133e690612efc565b81613364565b9290506133fa838351612eef565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081116134455760ff81116134455761343d8892836133e6931b90612eb3565b9390506133dd565b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b613369565b807fff000000000000000000000000000000000000000000000000000000000000006134a66134bf938d612fc8565b51166131636134b58584612eef565b918a1a9187612fc8565b613353565b905061333e565b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b807fff000000000000000000000000000000000000000000000000000000000000006135ae6135bc9385612fc8565b5116891a613163828c612fc8565b61326e565b60ff818103908111613638579060018361360d931c1615600014613612577f30000000000000000000000000000000000000000000000000000000000000005b881a613163828b612fc8565b61321d565b7f3100000000000000000000000000000000000000000000000000000000000000613601565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b508251903d90823e3d90fd5b156136a557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420776f726420636f756e7400000000000000000000000000006044820152fd5b9061370d826127bd565b61371a6040519182612735565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061301e82946127bd565b80519061376a60039283808210159182613a2d575b82613a22575b505061369e565b805190600b9283830292808404851490151715612ec05761378a83613703565b9260005b8351811015613831576137a18185612f29565b5160005b8781106137bc5750506137b790612efc565b61378e565b600a818103908111612ec0576000906001901b83161561382b57507f0100000000000000000000000000000000000000000000000000000000000000905b888402918483048a1485151715612ec05761316361381b8361382695612eb3565b9160001a918a612fc8565b6137a5565b906137fa565b50915093919250613846602182048092612eef565b9061385282861c613703565b926000925b84518410156139265760005b6008908181101561390e5785891b918683041486151715612ec05761389361388d82600194612eb3565b89612fc8565b51918060f893841c146138b1575b506138ac9150612efc565b613863565b6138bb8789612fc8565b51831c92600793838503948511612ec05760ff7fff00000000000000000000000000000000000000000000000000000000000000936138ac961b1617901b1660001a6139078789612fc8565b53386138a1565b50509261391d90929192612efc565b92919091613857565b919394925094604091825193866000868083516139498160209b8c80980161294b565b8101039060025afa15613a17576000519160005b87811061396f57505050505050505090565b61398261397c8284612eb3565b84612fc8565b5160f81c81861c88811015612f3d5760078084168103908111612ec057866001921a901c16036139ba576139b590612efc565b61395d565b6064878751907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152600f60248201527f4661696c656420636865636b73756d00000000000000000000000000000000006044820152fd5b83513d6000823e3d90fd5b061590508338613763565b6018811115925061375d565b611c61612b4e91600381101580613a6a575b80613a5f575b613a5a9061369e565b613b2f565b506003810615613a51565b506018811115613a4b565b908151917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0613abc613aa6856127a5565b94613ab46040519687612735565b8086526127a5565b0160005b818110613b1e57505060005b8151811015613b1a57613adf8183612f29565b5190610800821015612f3d57613afa613b1592600601612886565b613b048287612f29565b52613b0f8186612f29565b50612efc565b613acc565b5050565b806060602080938801015201613ac0565b600381101580613c68575b80613c5d575b613b499061369e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff430190438211612ec0575a9160405190602093848301913260601b835240603484015242605484015260748301526074825260a082019180831067ffffffffffffffff841117612776576003926040525190209104808060051b04831481151715612ec05760021b7f1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc16613bfd81613703565b92600090815b838110613c1257505050505090565b81811015613c30578085613c2b921a6131638289612fc8565b613c03565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b506003810615613b40565b506018811115613b3a565b15613c7a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f524543495049454e540000000000000000000000000000006044820152fd5b15613cdf57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f424f554e440000000000000000000000000000000000000000000000000000006044820152fd5b6000838152602061080881526040613d5e60ff600283862001541615613cd8565b8583526002825273ffffffffffffffffffffffffffffffffffffffff94858083862054169516948503613e8d5790613dd9867fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9594931696613dc1881515613c73565b863314908115613e70575b8115613e5a575b50612de9565b848352600382528083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff815401905585835280832060018154019055868352600282526004818420927fffffffffffffffffffffffff000000000000000000000000000000000000000093888582541617905552822090815416905580a4565b9050888552600484528285205416331438613dd3565b8786526005855283862033875285528386205460ff169150613dcc565b6064838351907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152600a60248201527f57524f4e475f46524f4d000000000000000000000000000000000000000000006044820152fd5b9081602091031261282e57517fffffffff000000000000000000000000000000000000000000000000000000008116810361282e5790565b15613f2957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f554e534146455f524543495049454e54000000000000000000000000000000006044820152fd5b60208183031261282e5780519067ffffffffffffffff821161282e570181601f8201121561282e578051613fba816127bd565b92613fc86040519485612735565b8184526020828401011161282e57612b4e916020808501910161294b565b90815180825260208092019182818360051b85019501936000915b8483106140115750505050505090565b909192939495848061402b83856001950387528a5161296e565b9801930193019194939290614001565b9161406490614056612b4e9593606086526060860190613fe6565b908482036020860152612c3a565b91604081840391015261296e565b916140649061408d612b4e9593606086526060860190613fe6565b90848203602086015261296e565b73ffffffffffffffffffffffffffffffffffffffff61080e5416803b908115614130576020612b4e91601f8460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6141239701916040519461ffe0603e83011686016040528386526000878701958693880101523c6040519485925180928585019061294b565b8101038084520182612735565b6311052bb46000526004601cfdfea26469706673582212206f536bdbedd5f280ef65c9db3ae72af8daaeac02e57d09ea5e12d3a0ccc7c4ff64736f6c63430008110033",
  "libraries": {
    "Render": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bind(uint256,address)": {
        "params": {
          "id": "tokenId of the poem to be bound"
        }
      },
      "getMintedIndices()": {
        "details": "Intended to be used offchain"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bind(uint256,address)": {
        "notice": "This method allows a seed poem to be bound to a specific address that is derived from the seed itself."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 193,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 195,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 206,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 210,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 259,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "getApproved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 265,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 737,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "wordlist",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_string_storage)2048_storage"
      },
      {
        "astId": 739,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "finalized",
        "offset": 0,
        "slot": "2054",
        "type": "t_bool"
      },
      {
        "astId": 741,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "deployer",
        "offset": 1,
        "slot": "2054",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "owner",
        "offset": 0,
        "slot": "2055",
        "type": "t_address"
      },
      {
        "astId": 1676,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "seeds",
        "offset": 0,
        "slot": "2056",
        "type": "t_mapping(t_uint256,t_struct(Seed)1671_storage)"
      },
      {
        "astId": 1678,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2057",
        "type": "t_uint256"
      },
      {
        "astId": 1681,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "wordPrice",
        "offset": 0,
        "slot": "2058",
        "type": "t_uint256"
      },
      {
        "astId": 1684,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "locked",
        "offset": 0,
        "slot": "2059",
        "type": "t_bool"
      },
      {
        "astId": 1688,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "isEntropyMinted",
        "offset": 0,
        "slot": "2060",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1691,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "totalWords",
        "offset": 0,
        "slot": "2061",
        "type": "t_uint256"
      },
      {
        "astId": 1693,
        "contract": "src/SeedPoems.sol:SeedPoems",
        "label": "font",
        "offset": 0,
        "slot": "2062",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)2048_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2048]",
        "numberOfBytes": "65536"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Seed)1671_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SeedPoems.Seed)",
        "numberOfBytes": "32",
        "value": "t_struct(Seed)1671_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Seed)1671_storage": {
        "encoding": "inplace",
        "label": "struct SeedPoems.Seed",
        "members": [
          {
            "astId": 1666,
            "contract": "src/SeedPoems.sol:SeedPoems",
            "label": "indices",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1668,
            "contract": "src/SeedPoems.sol:SeedPoems",
            "label": "entropy",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1670,
            "contract": "src/SeedPoems.sol:SeedPoems",
            "label": "bound",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}